//
// Created by Caelum van Ispelen on 6/14/21.
//

syntax = "proto3";

package rip.proto;

// Defines the packets. All of them.
//
// The client connects to the server and sends ClientInfo.
// The server responds with ServerInfo.
//
// The client is now in a "Waiting for Game to Start" state.
// It remains in this state until the server sends StartGame as
// a result of one of the following events:
// * the game host starts the game
// * the game was in progress, and the client was allowed to rejoin
// (because its username matched one of the existing players)
//
// After receiving StartGame, the client is in the "playing" state.
//
// The server proceeds to send all of the data packets to initialize
// game state on the client, including:
// * UpdateGlobalData
// * UpdateMap
// * UpdateCity
// * UpdateUnit
// * UpdatePlayer
// etc.
//
// The server sends StartTurn whenever the client's turn begins.
// During a client's turn, it can send action packets such as:
// * MoveUnit
// * SetCityBuildTask
// * SetWorkerTask
// * ComputePath (server responds with PathComputed)
// * SetEconomy
// etc.
//
// The server responds to each of these packets with a data packet
// to acknowledge the updated game state and cause it to be displayed on the client.
// For example, it responds to MoveUnit with UpdateUnit set to the new position.
//
// When the client ends its turn, it sends EndTurn. Alternatively, the server
// can force-end a turn by sending the same packet to the client. After the turn
// ends, the client must wait for StartTurn before making further actions.
//
// # Game Saves
// The same packets that are used to update game data on the client are used
// to serialize game data to disk.
//
// Some fields are not used in game saves.

// ----------------------------
// ---------- LOBBY -----------
// ----------------------------

message UUID {
  string uuid = 1;
}

// A packet sent by the client during the lobby phase.
message ClientLobbyPacket {
  oneof packet {
    CreateSlot createSlot = 1;
    DeleteSlot deleteSlot = 2;
    RequestGameStart requestGameStart = 3;
    ChangeCivAndLeader changeCivAndLeader = 4;
  }
}

// Sent by the client to add a new player slot to the game.
//
// Rejected if the lobby isStatic.
//
// Admin only
message CreateSlot {
  // Whether the slot should be a human or AI player
  bool isAI = 1;
}

// Sent by the client to remove a player slot from the game.
// If the player was human and had joined, the player is kicked.
//
// Rejected if the lobby isStatic.
//
// Admin only
message DeleteSlot {
  // ID of the slot to delete
  uint32 slotID = 1;
}

// Sent by the client to start the game.
//
// Rejected if not all slots are filled.
//
// Admin only
message RequestGameStart {}

// Sent by the client to change its selected leader
// and civilization.
//
// Rejected if the lobby isStatic. Also rejected
// if the civilization is already in use by another
// player.
message ChangeCivAndLeader {
  string civID = 1;
  string leaderName = 2;
}

// A packet sent by the server during the lobby phase.
message ServerLobbyPacket {
  oneof packet {
    LobbyInfo lobbyInfo = 1;
    Kicked kicked = 2;
    GameStarted gameStarted = 3;
  }
}

// Sent by the server on join and whenever slot data changes.
message LobbyInfo {
  repeated LobbySlot slots = 1;
  // Whether the game was loaded from a game save and, as
  // a result, settings (including civ/leader choices) cannot be
  // changed.
  bool isStatic = 2;
  // The slot ID occupied by this client.
  uint32 yourSlotID = 3;
}

// Sent by the server when the client was kicked from the game.
//
// The connection is terminated immediately after this message is sent.
message Kicked {}

// Sent by the server when the game has started.
//
// This closes the game lobby. It includes all initial
// data for the game.
message GameStarted {
  InitialGameData gameData = 1;
}

// A slot represents a player in the game.
//
// A slot may be empty or occupied. When a slot
// is empty, the game cannot start.
// A slot is filled when a player takes its place.
//
// If `ownerUUID` is set to a user UUID but `occupied` is
// set to false, then only that user is allowed to join
// in this slot. (This functionality is used when loading a saved
// game - the same users will join the same slots.)
message LobbySlot {
  // Whether the slot is occupied.
  bool occupied = 1;
  // UUID of the slot owner. If null, either
  // the slot is empty or the player is an AI.
  UUID ownerUUID = 2;
  // Whether the slot is an AI or a human player.
  bool isAI = 3;
  // The civilization selected by this player.
  string civID = 4;
  // The leader selected by this player.
  string leaderName = 5;
  // Unique ID of the slot
  uint32 id = 6;
  // Whether the player occupying this slot is the game admin
  bool isAdmin = 7;
}

// ----------------------------
// ---------- GAME ------------
// ----------------------------

message InitialGameData {
  UpdateMap map = 1;
  repeated UpdateCity cities = 2;
  repeated UpdateUnit units = 3;
  repeated UpdatePlayer players = 4;
  UpdateGlobalData globalData = 5;
  UpdateVisibility visibility = 6;
}

message Pos {
  uint32 x = 1;
  uint32 y = 2;
}

// Any packet sent by the client.
message AnyClient {
  int32 requestID = 1;
  oneof packet {
    ComputePath computePath = 3;
    MoveUnits moveUnits = 4;
    EndTurn endTurn = 5;
    GetBuildTasks getBuildTasks = 6;
    SetCityBuildTask setCityBuildTask = 7;
    SetResearch setResearch = 8;
    GetPossibleTechs getPossibleTechs = 9;
    SetEconomySettings setEconomySettings = 10;
    DoUnitAction doUnitAction = 11;
    SetWorkerTask setWorkerTask = 12;
    DeclareWar declareWar = 13;
    ConfigureWorkedTiles configureWorkedTiles = 14;
    BombardCity bombardCity = 18;
    SaveGame saveGame = 19;
  }
}

// Any packet sent by the server.
message AnyServer {
  // Corresponds to the requestID of the packet
  // the server is responding to, if any.
  // Otherwise, always equal to zero.
  int32 requestID = 1;
  oneof packet {
    UpdateGlobalData updateGlobalData = 5;
    UpdateMap updateMap = 6;
    UpdateCity updateCity = 7;
    UpdateUnit updateUnit = 8;
    UpdatePlayer updatePlayer = 9;
    PathComputed pathComputed = 10;
    ConfirmMoveUnits confirmMoveUnits = 11;
    PossibleCityBuildTasks possibleCityBuildTasks = 12;
    PossibleTechs possibleTechs = 13;
    DeleteUnit deleteUnit = 14;
    UpdateTile updateTile = 15;
    UpdateVisibility updateVisibility = 16;
    CombatEvent combatEvent = 17;
    UpdateTradeNetworks updateTradeNetworks = 18;
    CityCaptured cityCaptured = 19;
    WarDeclared warDeclared = 20;
    GameSaved gameSaved = 21;
    BordersExpanded bordersExpanded = 22;
    BuildTaskFinished buildTaskFinished = 23;
    BuildTaskFailed buildTaskFailed = 24;
  }
}

// ---------------------
// SERVER
// ---------------------

enum Era {
  Ancient = 0;
  Classical = 1;
  Medieval = 2;
  Renaissance = 3;
  Industrial = 4;
  Modern = 5;
  Future = 6;
}

// Sets global data for the entire game.
message UpdateGlobalData {
  // The current turn number.
  int32 turn = 1;
  // The ID of the connected client.
  int32 playerID = 2;
}

enum Terrain {
  Grassland = 0;
  Desert = 1;
  Ocean = 2;
  Plains = 3;
}

message Improvement {
  // The type of improvement.
  string id = 1;
  // Only set for cottages
  string cottageLevel = 2;
}

message Yield {
  int32 hammers = 1;
  int32 commerce = 2;
  int32 food = 3;
}

message Tile {
  Terrain terrain = 1;
  bool forested = 2;
  bool hilled = 3;
  repeated Improvement improvements = 4;
  Yield yield = 5;
  int32 ownerID = 6;
  bool hasOwner = 7;
  bool isWorked = 8;
  string resourceID = 9;
  CultureValues cultureValues = 10;
}

// Sends all map tiles.
message UpdateMap {
  uint32 width = 1;
  uint32 height = 2;
  repeated Tile tiles = 3;
}

enum Visibility {
  Hidden = 0;
  Fogged = 1;
  Visible = 2;
}

// Updates the player's visibility map.
message UpdateVisibility {
  repeated Visibility visibility = 1;
}

// Updates a single tile.
message UpdateTile {
  Tile tile = 1;
  uint32 x = 2;
  uint32 y = 3;
}

message UnitBuildTask {
  string unitKindID = 1;
}

message BuildingBuildTask {
  string buildingName = 1;
}

message BuildTaskKind {
  oneof task {
    UnitBuildTask unit = 1;
    BuildingBuildTask building = 2;
  }
}

message BuildTask {
  BuildTaskKind kind = 1;
  int32 progress = 2;
  int32 cost = 3;
}

// A source of happiness in a city.
enum HappinessSource {
  // Free base happiness
  DifficultyBonus = 0;
  Buildings = 1;
  Resources = 2;
}

// A source of unhappiness in a city.
enum UnhappinessSource {
  Population = 0;
  Undefended = 1;
}

// A source of health in a city.
enum HealthSource {
  // Same as DifficultyBonus, but protobuf doesn't namespace enums.
  BaseHealth = 0;
  ResourceHealth = 1;
  BuildingHealth = 2;
  ForestHealth = 3;
}

// A source of sickness in a city.
enum SicknessSource {
  PopulationSickness = 0;
}

message HappinessEntry {
  HappinessSource source = 1;
  uint32 count = 2;
}

message UnhappinessEntry {
  UnhappinessSource source = 1;
  uint32 count = 2;
}

message HealthEntry {
  HealthSource source = 1;
  uint32 count = 2;
}

message SicknessEntry {
  SicknessSource source = 1;
  uint32 count = 2;
}

// Creates or updates a city.
message UpdateCity {
  Pos pos = 1;
  string name = 2;
  int32 ownerID = 3;
  BuildTask buildTask = 4;
  Yield yield = 5;
  int32 culture = 6;
  // Culture needed to advance to the next level
  int32 cultureNeeded = 7;
  int32 id = 8;
  repeated string buildingNames = 9;
  int32 population = 10;
  int32 storedFood = 11;
  int32 foodNeededForGrowth = 12;
  int32 consumedFood = 13;
  bool isCapital = 14;
  repeated Pos workedTiles = 15;
  repeated HappinessEntry happinessSources = 16;
  repeated UnhappinessEntry unhappinessSources = 17;
  int32 cultureDefenseBonus = 18;
  repeated HealthEntry healthSources = 19;
  repeated SicknessEntry sicknessSources = 20;
  repeated string resources = 21;
  CultureValues cultureValues = 22;
  repeated Pos manualWorkedTiles = 23;
}

message Path {
  // Encoded as a series of [x, y], such
  // that the total length is the length of the path
  // times 2.
  repeated uint32 positions = 1;
}

message FoundCityCapability {}

message WorkerTaskImprovement {
  string improvementID = 1;
}

message WorkerTaskKind {
  oneof kind {
    WorkerTaskImprovement buildImprovement = 1;
  }
}

message WorkerTask {
  string name = 1;
  int32 turnsLeft = 2;
  WorkerTaskKind kind = 3;
  string presentParticiple = 4;
}

message WorkerCapability {
  WorkerTask currentTask = 1;
  repeated WorkerTask possibleTasks = 2;
}

message CarryUnitsCapability {
  repeated int32 carryingUnitIDs = 1;
}

message BombardCityCapability {}

message Capability {
  oneof cap {
    FoundCityCapability foundCity = 1;
    WorkerCapability worker = 2;
    CarryUnitsCapability carryUnits = 3;
    BombardCityCapability bombardCity = 4;
  }
}

message UpdateUnit {
  Pos pos = 1;
  string kindID = 2;
  int32 ownerID = 3;
  // On [0, 1]
  double health = 4;
  double movementLeft = 5;
  Path followingPath = 6;
  repeated Capability capabilities = 7;
  int32 id = 8;
  double strength = 9;
  bool isFortified = 10;

  bool fortifiedForever = 11;
  bool skippingTurn = 12;
  bool fortifiedUntilHeal = 13;

  bool usedAttack = 14;
}

message ResearchingTech {
  string techID = 1;
  int32 progress = 2;
}

// Updates a player's data.
message UpdatePlayer {
  int32 id = 1;
  string username = 2;

  int32 baseRevenue = 3;
  int32 beakerRevenue = 4;
  int32 goldRevenue = 5;
  int32 expenses = 6;
  int32 netGold = 7;

  int32 gold = 8;

  ResearchingTech researchingTech = 9;

  int32 capitalCityID = 10;

  repeated string unlockedTechIDs = 11;

  int32 beakerPercent = 12;

  repeated int32 atWarWithIDs = 13;

  Era era = 14;
  bool hasAI = 15;
  UpdateVisibility visibility = 16;

  string leaderName = 17;
  string civID = 18;

  repeated uint32 cityIDs = 19;
  int32 score = 20;
}

message PathComputed {
  Path path = 1;
}

// Response to MoveUnits.
message ConfirmMoveUnits {
  // Whether the units were moved at least one tile.
  bool success = 1;
}

message PossibleCityBuildTasks {
  repeated BuildTask tasks = 1;
}

message PossibleTechs {
  repeated string techs = 1;
}

message DeleteUnit {
  int32 unitID = 1;
}

// Informs the client of a combat event that occurred between two units.
//
// Only sent if combat happens during the player's turn, or if one of the player's
// units is involved. If it happens in between
// turns (e.g. because of AI vs AI combat) then this packet is not sent.
// However, DeleteUnit is always sent for the loser.
//
// If one of the client's units is involved in this combat event, the client should stop
// handling packets until it has finished displaying the combat animation. This ensures
// that cities won't turn, units won't die, and new combat animations won't be displayed until
// after the player has watched the animation.
//
// Following this packet, DeleteUnit is sent for the loser of the battle, if any,
// and UpdateUnit is sent for the winner.
message CombatEvent {
  int32 attackerID = 1;
  int32 defenderID = 2;

  // A list of rounds that occurred during combat.
  // Used to display the animation.
  repeated CombatRound rounds = 3;

  bool attackerWon = 4;

  int32 numCollateralTargets = 5;
}

// A round of combat during which one or both units suffered damage.
message CombatRound {
  // The attacker's health (0..1) at the end of this round.
  double attackerHealth = 1;
  // The defender's health (0..1) at the end of this round.
  double defenderHealth = 2;
}

// Used only for debugging trade networks on the client.
message UpdateTradeNetworks {
  repeated TradeNetwork networks = 1;
}

message TradeNetwork {
  repeated Pos positions = 1;
  int32 id = 2;
  repeated int32 visitedCityIDs = 3;
}

message CityCaptured {
  int32 cityID = 1;
  int32 capturerID = 2;
}

message WarDeclared {
  int32 declarerID = 1;
  int32 declaredID = 2;
}

message GameSaved {}

message BordersExpanded {
  uint32 cityID = 1;
}

message BuildTaskFinished {
  uint32 cityID = 1;
  BuildTask task = 2;
}

message BuildTaskFailed {
  uint32 cityID = 1;
  BuildTask task = 2;
}

// ---------------------
// CLIENT
// ---------------------

// Moves multiple units along a path.
// The units will all go to the same destination.
//
// Response: ConfirmMoveUnits
message MoveUnits {
  repeated int32 unitIDs = 1;
  Path pathToFollow = 2;
}

message SetCityBuildTask {
  int32 cityID = 1;
  BuildTaskKind task = 2;
}

message SetWorkerTask {
  int32 workerID = 1;
  WorkerTask task = 2;
}

message ComputePath {
  Pos from = 1;
  Pos to = 2;
  string unitKindID = 3;
}

message SetEconomySettings {
  int32 beakerPercent = 1;
}

message SetResearch {
  string techID = 1;
}

message EndTurn {

}

message GetBuildTasks {
  int32 cityID = 1;
}

message GetPossibleTechs {

}

enum UnitAction {
  Kill = 0;
  Fortify = 1;
  SkipTurn = 2;
  FortifyUntilHealed = 3;
  FoundCity = 4;
}

message DoUnitAction {
  int32 unitID = 1;
  UnitAction action = 2;
}

message DeclareWar {
  int32 onPlayerID = 1;
}

// Updates a city's worked tile overrides.
message ConfigureWorkedTiles {
  int32 cityID = 1;
  Pos tilePos = 2;
  bool shouldManuallyWork = 3;
}

message BombardCity {
  int32 siegeUnitID = 1;
  int32 targetCityID = 2;
}

message SaveGame {}

// GAME SAVE / LOAD

// A game save. Contains the entire game state, serialized.
message GameSave {
  uint32 mapWidth = 1;
  uint32 mapHeight = 2;
  repeated Tile tiles = 3;
  uint32 turn = 4;
  repeated UpdatePlayer players = 5;
  repeated UpdateCity cities = 6;
  repeated UpdateUnit units = 7;
}

// Culture values for a tile or city.
message CultureValues {
  // SoA representation
  repeated uint32 playerIDs = 1;
  repeated uint32 amounts = 2;
}

// Occupies the first 128 bytes (zero-padded) of a save file.
message SaveFileHeader {
  string name = 1;
  uint32 turn = 2;
}
