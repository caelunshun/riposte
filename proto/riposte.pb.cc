// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riposte.proto

#include "riposte.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Pos::Pos(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0u)
  , y_(0u){}
struct PosDefaultTypeInternal {
  constexpr PosDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosDefaultTypeInternal() {}
  union {
    Pos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosDefaultTypeInternal _Pos_default_instance_;
constexpr AnyClient::AnyClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(0)
  , _oneof_case_{}{}
struct AnyClientDefaultTypeInternal {
  constexpr AnyClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyClientDefaultTypeInternal() {}
  union {
    AnyClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyClientDefaultTypeInternal _AnyClient_default_instance_;
constexpr AnyServer::AnyServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(0)
  , _oneof_case_{}{}
struct AnyServerDefaultTypeInternal {
  constexpr AnyServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyServerDefaultTypeInternal() {}
  union {
    AnyServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyServerDefaultTypeInternal _AnyServer_default_instance_;
constexpr ClientInfo::ClientInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ClientInfoDefaultTypeInternal {
  constexpr ClientInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientInfoDefaultTypeInternal() {}
  union {
    ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
constexpr ServerInfo::ServerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currentplayers_()
  , playerid_(0){}
struct ServerInfoDefaultTypeInternal {
  constexpr ServerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
constexpr KickPlayer::KickPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct KickPlayerDefaultTypeInternal {
  constexpr KickPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KickPlayerDefaultTypeInternal() {}
  union {
    KickPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KickPlayerDefaultTypeInternal _KickPlayer_default_instance_;
constexpr SetLeader::SetLeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : civid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leader_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetLeaderDefaultTypeInternal {
  constexpr SetLeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetLeaderDefaultTypeInternal() {}
  union {
    SetLeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetLeaderDefaultTypeInternal _SetLeader_default_instance_;
constexpr AdminStartGame::AdminStartGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AdminStartGameDefaultTypeInternal {
  constexpr AdminStartGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdminStartGameDefaultTypeInternal() {}
  union {
    AdminStartGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdminStartGameDefaultTypeInternal _AdminStartGame_default_instance_;
constexpr LobbyError::LobbyError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LobbyErrorDefaultTypeInternal {
  constexpr LobbyErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LobbyErrorDefaultTypeInternal() {}
  union {
    LobbyError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LobbyErrorDefaultTypeInternal _LobbyError_default_instance_;
constexpr StartGame::StartGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StartGameDefaultTypeInternal {
  constexpr StartGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartGameDefaultTypeInternal() {}
  union {
    StartGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartGameDefaultTypeInternal _StartGame_default_instance_;
constexpr PlayerInfo::PlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , civid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leadername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_(0)
  , id_(0)
  , isadmin_(false){}
struct PlayerInfoDefaultTypeInternal {
  constexpr PlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
constexpr UpdateGlobalData::UpdateGlobalData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , turn_(0)
  , era_(0)

  , playerid_(0){}
struct UpdateGlobalDataDefaultTypeInternal {
  constexpr UpdateGlobalDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateGlobalDataDefaultTypeInternal() {}
  union {
    UpdateGlobalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateGlobalDataDefaultTypeInternal _UpdateGlobalData_default_instance_;
constexpr Improvement::Improvement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cottagelevel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ImprovementDefaultTypeInternal {
  constexpr ImprovementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImprovementDefaultTypeInternal() {}
  union {
    Improvement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImprovementDefaultTypeInternal _Improvement_default_instance_;
constexpr Yield::Yield(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hammers_(0)
  , commerce_(0)
  , food_(0){}
struct YieldDefaultTypeInternal {
  constexpr YieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~YieldDefaultTypeInternal() {}
  union {
    Yield _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT YieldDefaultTypeInternal _Yield_default_instance_;
constexpr Tile::Tile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : improvements_()
  , resourceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , yield_(nullptr)
  , terrain_(0)

  , forested_(false)
  , hilled_(false)
  , hasowner_(false)
  , isworked_(false)
  , ownerid_(0){}
struct TileDefaultTypeInternal {
  constexpr TileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileDefaultTypeInternal() {}
  union {
    Tile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileDefaultTypeInternal _Tile_default_instance_;
constexpr UpdateMap::UpdateMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tiles_()
  , visibility_()
  , _visibility_cached_byte_size_(0)
  , width_(0u)
  , height_(0u){}
struct UpdateMapDefaultTypeInternal {
  constexpr UpdateMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateMapDefaultTypeInternal() {}
  union {
    UpdateMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateMapDefaultTypeInternal _UpdateMap_default_instance_;
constexpr UnitBuildTask::UnitBuildTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unitkindid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UnitBuildTaskDefaultTypeInternal {
  constexpr UnitBuildTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnitBuildTaskDefaultTypeInternal() {}
  union {
    UnitBuildTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnitBuildTaskDefaultTypeInternal _UnitBuildTask_default_instance_;
constexpr BuildingBuildTask::BuildingBuildTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buildingname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BuildingBuildTaskDefaultTypeInternal {
  constexpr BuildingBuildTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildingBuildTaskDefaultTypeInternal() {}
  union {
    BuildingBuildTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildingBuildTaskDefaultTypeInternal _BuildingBuildTask_default_instance_;
constexpr BuildTaskKind::BuildTaskKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BuildTaskKindDefaultTypeInternal {
  constexpr BuildTaskKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildTaskKindDefaultTypeInternal() {}
  union {
    BuildTaskKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildTaskKindDefaultTypeInternal _BuildTaskKind_default_instance_;
constexpr BuildTask::BuildTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kind_(nullptr)
  , progress_(0)
  , cost_(0){}
struct BuildTaskDefaultTypeInternal {
  constexpr BuildTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuildTaskDefaultTypeInternal() {}
  union {
    BuildTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuildTaskDefaultTypeInternal _BuildTask_default_instance_;
constexpr UpdateCity::UpdateCity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buildingnames_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pos_(nullptr)
  , buildtask_(nullptr)
  , yield_(nullptr)
  , ownerid_(0)
  , culture_(0)
  , cultureneeded_(0)
  , id_(0)
  , population_(0)
  , storedfood_(0)
  , foodneededforgrowth_(0)
  , consumedfood_(0)
  , iscapital_(false){}
struct UpdateCityDefaultTypeInternal {
  constexpr UpdateCityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateCityDefaultTypeInternal() {}
  union {
    UpdateCity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateCityDefaultTypeInternal _UpdateCity_default_instance_;
constexpr Path::Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positions_()
  , _positions_cached_byte_size_(0){}
struct PathDefaultTypeInternal {
  constexpr PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDefaultTypeInternal _Path_default_instance_;
constexpr FoundCityCapability::FoundCityCapability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FoundCityCapabilityDefaultTypeInternal {
  constexpr FoundCityCapabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FoundCityCapabilityDefaultTypeInternal() {}
  union {
    FoundCityCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FoundCityCapabilityDefaultTypeInternal _FoundCityCapability_default_instance_;
constexpr WorkerTaskImprovement::WorkerTaskImprovement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : improvementid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkerTaskImprovementDefaultTypeInternal {
  constexpr WorkerTaskImprovementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerTaskImprovementDefaultTypeInternal() {}
  union {
    WorkerTaskImprovement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerTaskImprovementDefaultTypeInternal _WorkerTaskImprovement_default_instance_;
constexpr WorkerTaskKind::WorkerTaskKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct WorkerTaskKindDefaultTypeInternal {
  constexpr WorkerTaskKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerTaskKindDefaultTypeInternal() {}
  union {
    WorkerTaskKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerTaskKindDefaultTypeInternal _WorkerTaskKind_default_instance_;
constexpr WorkerTask::WorkerTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , presentparticiple_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kind_(nullptr)
  , turnsleft_(0){}
struct WorkerTaskDefaultTypeInternal {
  constexpr WorkerTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerTaskDefaultTypeInternal() {}
  union {
    WorkerTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerTaskDefaultTypeInternal _WorkerTask_default_instance_;
constexpr WorkerCapability::WorkerCapability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : possibletasks_()
  , currenttask_(nullptr){}
struct WorkerCapabilityDefaultTypeInternal {
  constexpr WorkerCapabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerCapabilityDefaultTypeInternal() {}
  union {
    WorkerCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerCapabilityDefaultTypeInternal _WorkerCapability_default_instance_;
constexpr CarryUnitsCapability::CarryUnitsCapability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : carryingunitids_()
  , _carryingunitids_cached_byte_size_(0){}
struct CarryUnitsCapabilityDefaultTypeInternal {
  constexpr CarryUnitsCapabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CarryUnitsCapabilityDefaultTypeInternal() {}
  union {
    CarryUnitsCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CarryUnitsCapabilityDefaultTypeInternal _CarryUnitsCapability_default_instance_;
constexpr Capability::Capability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CapabilityDefaultTypeInternal {
  constexpr CapabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapabilityDefaultTypeInternal() {}
  union {
    Capability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapabilityDefaultTypeInternal _Capability_default_instance_;
constexpr UpdateUnit::UpdateUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : capabilities_()
  , kindid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pos_(nullptr)
  , followingpath_(nullptr)
  , health_(0)
  , movementleft_(0)
  , ownerid_(0)
  , id_(0)
  , strength_(0){}
struct UpdateUnitDefaultTypeInternal {
  constexpr UpdateUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateUnitDefaultTypeInternal() {}
  union {
    UpdateUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateUnitDefaultTypeInternal _UpdateUnit_default_instance_;
constexpr ResearchingTech::ResearchingTech(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : techid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , progress_(0){}
struct ResearchingTechDefaultTypeInternal {
  constexpr ResearchingTechDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResearchingTechDefaultTypeInternal() {}
  union {
    ResearchingTech _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResearchingTechDefaultTypeInternal _ResearchingTech_default_instance_;
constexpr UpdatePlayer::UpdatePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unlockedtechids_()
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , researchingtech_(nullptr)
  , id_(0)
  , baserevenue_(0)
  , beakerrevenue_(0)
  , goldrevenue_(0)
  , expenses_(0)
  , netgold_(0)
  , gold_(0)
  , capitalcityid_(0)
  , beakerpercent_(0){}
struct UpdatePlayerDefaultTypeInternal {
  constexpr UpdatePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdatePlayerDefaultTypeInternal() {}
  union {
    UpdatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdatePlayerDefaultTypeInternal _UpdatePlayer_default_instance_;
constexpr PathComputed::PathComputed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr){}
struct PathComputedDefaultTypeInternal {
  constexpr PathComputedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathComputedDefaultTypeInternal() {}
  union {
    PathComputed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathComputedDefaultTypeInternal _PathComputed_default_instance_;
constexpr ConfirmMoveUnits::ConfirmMoveUnits(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct ConfirmMoveUnitsDefaultTypeInternal {
  constexpr ConfirmMoveUnitsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfirmMoveUnitsDefaultTypeInternal() {}
  union {
    ConfirmMoveUnits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfirmMoveUnitsDefaultTypeInternal _ConfirmMoveUnits_default_instance_;
constexpr PossibleCityBuildTasks::PossibleCityBuildTasks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_(){}
struct PossibleCityBuildTasksDefaultTypeInternal {
  constexpr PossibleCityBuildTasksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PossibleCityBuildTasksDefaultTypeInternal() {}
  union {
    PossibleCityBuildTasks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PossibleCityBuildTasksDefaultTypeInternal _PossibleCityBuildTasks_default_instance_;
constexpr PossibleTechs::PossibleTechs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : techs_(){}
struct PossibleTechsDefaultTypeInternal {
  constexpr PossibleTechsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PossibleTechsDefaultTypeInternal() {}
  union {
    PossibleTechs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PossibleTechsDefaultTypeInternal _PossibleTechs_default_instance_;
constexpr DeleteUnit::DeleteUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unitid_(0){}
struct DeleteUnitDefaultTypeInternal {
  constexpr DeleteUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteUnitDefaultTypeInternal() {}
  union {
    DeleteUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteUnitDefaultTypeInternal _DeleteUnit_default_instance_;
constexpr MoveUnits::MoveUnits(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unitids_()
  , _unitids_cached_byte_size_(0)
  , pathtofollow_(nullptr){}
struct MoveUnitsDefaultTypeInternal {
  constexpr MoveUnitsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveUnitsDefaultTypeInternal() {}
  union {
    MoveUnits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveUnitsDefaultTypeInternal _MoveUnits_default_instance_;
constexpr SetCityBuildTask::SetCityBuildTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_(nullptr)
  , cityid_(0){}
struct SetCityBuildTaskDefaultTypeInternal {
  constexpr SetCityBuildTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetCityBuildTaskDefaultTypeInternal() {}
  union {
    SetCityBuildTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetCityBuildTaskDefaultTypeInternal _SetCityBuildTask_default_instance_;
constexpr SetWorkerTask::SetWorkerTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_(nullptr)
  , workerid_(0){}
struct SetWorkerTaskDefaultTypeInternal {
  constexpr SetWorkerTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetWorkerTaskDefaultTypeInternal() {}
  union {
    SetWorkerTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetWorkerTaskDefaultTypeInternal _SetWorkerTask_default_instance_;
constexpr ComputePath::ComputePath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unitkindid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(nullptr)
  , to_(nullptr){}
struct ComputePathDefaultTypeInternal {
  constexpr ComputePathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComputePathDefaultTypeInternal() {}
  union {
    ComputePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComputePathDefaultTypeInternal _ComputePath_default_instance_;
constexpr SetEconomySettings::SetEconomySettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beakerpercent_(0){}
struct SetEconomySettingsDefaultTypeInternal {
  constexpr SetEconomySettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetEconomySettingsDefaultTypeInternal() {}
  union {
    SetEconomySettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetEconomySettingsDefaultTypeInternal _SetEconomySettings_default_instance_;
constexpr SetResearch::SetResearch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : techid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetResearchDefaultTypeInternal {
  constexpr SetResearchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetResearchDefaultTypeInternal() {}
  union {
    SetResearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetResearchDefaultTypeInternal _SetResearch_default_instance_;
constexpr EndTurn::EndTurn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EndTurnDefaultTypeInternal {
  constexpr EndTurnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndTurnDefaultTypeInternal() {}
  union {
    EndTurn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndTurnDefaultTypeInternal _EndTurn_default_instance_;
constexpr GetBuildTasks::GetBuildTasks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cityid_(0){}
struct GetBuildTasksDefaultTypeInternal {
  constexpr GetBuildTasksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBuildTasksDefaultTypeInternal() {}
  union {
    GetBuildTasks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBuildTasksDefaultTypeInternal _GetBuildTasks_default_instance_;
constexpr GetPossibleTechs::GetPossibleTechs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetPossibleTechsDefaultTypeInternal {
  constexpr GetPossibleTechsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPossibleTechsDefaultTypeInternal() {}
  union {
    GetPossibleTechs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPossibleTechsDefaultTypeInternal _GetPossibleTechs_default_instance_;
constexpr DoUnitAction::DoUnitAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unitid_(0)
  , action_(0)
{}
struct DoUnitActionDefaultTypeInternal {
  constexpr DoUnitActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoUnitActionDefaultTypeInternal() {}
  union {
    DoUnitAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoUnitActionDefaultTypeInternal _DoUnitAction_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_riposte_2eproto[47];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_riposte_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_riposte_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_riposte_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pos, x_),
  PROTOBUF_FIELD_OFFSET(::Pos, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AnyClient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AnyClient, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AnyClient, requestid_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::AnyClient, packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AnyServer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AnyServer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AnyServer, requestid_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::AnyServer, packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientInfo, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerInfo, playerid_),
  PROTOBUF_FIELD_OFFSET(::ServerInfo, currentplayers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KickPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KickPlayer, id_),
  PROTOBUF_FIELD_OFFSET(::KickPlayer, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetLeader, civid_),
  PROTOBUF_FIELD_OFFSET(::SetLeader, leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AdminStartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LobbyError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyError, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, username_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, civid_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, leadername_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, score_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, isadmin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, players_),
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, turn_),
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, era_),
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Improvement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Improvement, id_),
  PROTOBUF_FIELD_OFFSET(::Improvement, cottagelevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Yield, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Yield, hammers_),
  PROTOBUF_FIELD_OFFSET(::Yield, commerce_),
  PROTOBUF_FIELD_OFFSET(::Yield, food_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tile, terrain_),
  PROTOBUF_FIELD_OFFSET(::Tile, forested_),
  PROTOBUF_FIELD_OFFSET(::Tile, hilled_),
  PROTOBUF_FIELD_OFFSET(::Tile, improvements_),
  PROTOBUF_FIELD_OFFSET(::Tile, yield_),
  PROTOBUF_FIELD_OFFSET(::Tile, ownerid_),
  PROTOBUF_FIELD_OFFSET(::Tile, hasowner_),
  PROTOBUF_FIELD_OFFSET(::Tile, isworked_),
  PROTOBUF_FIELD_OFFSET(::Tile, resourceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateMap, width_),
  PROTOBUF_FIELD_OFFSET(::UpdateMap, height_),
  PROTOBUF_FIELD_OFFSET(::UpdateMap, tiles_),
  PROTOBUF_FIELD_OFFSET(::UpdateMap, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnitBuildTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnitBuildTask, unitkindid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildingBuildTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildingBuildTask, buildingname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildTaskKind, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::BuildTaskKind, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::BuildTaskKind, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildTask, kind_),
  PROTOBUF_FIELD_OFFSET(::BuildTask, progress_),
  PROTOBUF_FIELD_OFFSET(::BuildTask, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateCity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateCity, pos_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, name_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, ownerid_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, buildtask_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, yield_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, culture_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, cultureneeded_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, id_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, buildingnames_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, population_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, storedfood_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, foodneededforgrowth_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, consumedfood_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, iscapital_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Path, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FoundCityCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerTaskImprovement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorkerTaskImprovement, improvementid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerTaskKind, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WorkerTaskKind, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::WorkerTaskKind, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorkerTask, name_),
  PROTOBUF_FIELD_OFFSET(::WorkerTask, turnsleft_),
  PROTOBUF_FIELD_OFFSET(::WorkerTask, kind_),
  PROTOBUF_FIELD_OFFSET(::WorkerTask, presentparticiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorkerCapability, currenttask_),
  PROTOBUF_FIELD_OFFSET(::WorkerCapability, possibletasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarryUnitsCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarryUnitsCapability, carryingunitids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Capability, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Capability, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Capability, cap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, pos_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, kindid_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, ownerid_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, health_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, movementleft_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, followingpath_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, capabilities_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, id_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, strength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResearchingTech, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ResearchingTech, techid_),
  PROTOBUF_FIELD_OFFSET(::ResearchingTech, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, id_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, username_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, baserevenue_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, beakerrevenue_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, goldrevenue_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, expenses_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, netgold_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, gold_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, researchingtech_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, capitalcityid_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, unlockedtechids_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, beakerpercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PathComputed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PathComputed, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfirmMoveUnits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfirmMoveUnits, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PossibleCityBuildTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PossibleCityBuildTasks, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PossibleTechs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PossibleTechs, techs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeleteUnit, unitid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MoveUnits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MoveUnits, unitids_),
  PROTOBUF_FIELD_OFFSET(::MoveUnits, pathtofollow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetCityBuildTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetCityBuildTask, cityid_),
  PROTOBUF_FIELD_OFFSET(::SetCityBuildTask, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetWorkerTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetWorkerTask, workerid_),
  PROTOBUF_FIELD_OFFSET(::SetWorkerTask, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ComputePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ComputePath, from_),
  PROTOBUF_FIELD_OFFSET(::ComputePath, to_),
  PROTOBUF_FIELD_OFFSET(::ComputePath, unitkindid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetEconomySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetEconomySettings, beakerpercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetResearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetResearch, techid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EndTurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetBuildTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetBuildTasks, cityid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetPossibleTechs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DoUnitAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DoUnitAction, unitid_),
  PROTOBUF_FIELD_OFFSET(::DoUnitAction, action_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pos)},
  { 7, -1, sizeof(::AnyClient)},
  { 25, -1, sizeof(::AnyServer)},
  { 45, -1, sizeof(::ClientInfo)},
  { 51, -1, sizeof(::ServerInfo)},
  { 58, -1, sizeof(::KickPlayer)},
  { 65, -1, sizeof(::SetLeader)},
  { 72, -1, sizeof(::AdminStartGame)},
  { 77, -1, sizeof(::LobbyError)},
  { 83, -1, sizeof(::StartGame)},
  { 88, -1, sizeof(::PlayerInfo)},
  { 99, -1, sizeof(::UpdateGlobalData)},
  { 108, -1, sizeof(::Improvement)},
  { 115, -1, sizeof(::Yield)},
  { 123, -1, sizeof(::Tile)},
  { 137, -1, sizeof(::UpdateMap)},
  { 146, -1, sizeof(::UnitBuildTask)},
  { 152, -1, sizeof(::BuildingBuildTask)},
  { 158, -1, sizeof(::BuildTaskKind)},
  { 166, -1, sizeof(::BuildTask)},
  { 174, -1, sizeof(::UpdateCity)},
  { 193, -1, sizeof(::Path)},
  { 199, -1, sizeof(::FoundCityCapability)},
  { 204, -1, sizeof(::WorkerTaskImprovement)},
  { 210, -1, sizeof(::WorkerTaskKind)},
  { 217, -1, sizeof(::WorkerTask)},
  { 226, -1, sizeof(::WorkerCapability)},
  { 233, -1, sizeof(::CarryUnitsCapability)},
  { 239, -1, sizeof(::Capability)},
  { 248, -1, sizeof(::UpdateUnit)},
  { 262, -1, sizeof(::ResearchingTech)},
  { 269, -1, sizeof(::UpdatePlayer)},
  { 286, -1, sizeof(::PathComputed)},
  { 292, -1, sizeof(::ConfirmMoveUnits)},
  { 298, -1, sizeof(::PossibleCityBuildTasks)},
  { 304, -1, sizeof(::PossibleTechs)},
  { 310, -1, sizeof(::DeleteUnit)},
  { 316, -1, sizeof(::MoveUnits)},
  { 323, -1, sizeof(::SetCityBuildTask)},
  { 330, -1, sizeof(::SetWorkerTask)},
  { 337, -1, sizeof(::ComputePath)},
  { 345, -1, sizeof(::SetEconomySettings)},
  { 351, -1, sizeof(::SetResearch)},
  { 357, -1, sizeof(::EndTurn)},
  { 362, -1, sizeof(::GetBuildTasks)},
  { 368, -1, sizeof(::GetPossibleTechs)},
  { 373, -1, sizeof(::DoUnitAction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AnyClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AnyServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_KickPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AdminStartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LobbyError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateGlobalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Improvement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Yield_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Tile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnitBuildTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildingBuildTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildTaskKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateCity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FoundCityCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerTaskImprovement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerTaskKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CarryUnitsCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Capability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResearchingTech_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdatePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PathComputed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfirmMoveUnits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PossibleCityBuildTasks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PossibleTechs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MoveUnits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetCityBuildTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetWorkerTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ComputePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetEconomySettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetResearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EndTurn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetBuildTasks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetPossibleTechs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DoUnitAction_default_instance_),
};

const char descriptor_table_protodef_riposte_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rriposte.proto\"\033\n\003Pos\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002"
  " \001(\r\"\335\003\n\tAnyClient\022\021\n\trequestID\030\001 \001(\005\022!\n"
  "\nclientInfo\030\002 \001(\0132\013.ClientInfoH\000\022#\n\013comp"
  "utePath\030\003 \001(\0132\014.ComputePathH\000\022\037\n\tmoveUni"
  "ts\030\004 \001(\0132\n.MoveUnitsH\000\022\033\n\007endTurn\030\005 \001(\0132"
  "\010.EndTurnH\000\022\'\n\rgetBuildTasks\030\006 \001(\0132\016.Get"
  "BuildTasksH\000\022-\n\020setCityBuildTask\030\007 \001(\0132\021"
  ".SetCityBuildTaskH\000\022#\n\013setResearch\030\010 \001(\013"
  "2\014.SetResearchH\000\022-\n\020getPossibleTechs\030\t \001"
  "(\0132\021.GetPossibleTechsH\000\0221\n\022setEconomySet"
  "tings\030\n \001(\0132\023.SetEconomySettingsH\000\022%\n\014do"
  "UnitAction\030\013 \001(\0132\r.DoUnitActionH\000\022\'\n\rset"
  "WorkerTask\030\014 \001(\0132\016.SetWorkerTaskH\000B\010\n\006pa"
  "cket\"\251\004\n\tAnyServer\022\021\n\trequestID\030\001 \001(\005\022!\n"
  "\nserverInfo\030\002 \001(\0132\013.ServerInfoH\000\022\037\n\tstar"
  "tGame\030\003 \001(\0132\n.StartGameH\000\022!\n\nlobbyError\030"
  "\004 \001(\0132\013.LobbyErrorH\000\022-\n\020updateGlobalData"
  "\030\005 \001(\0132\021.UpdateGlobalDataH\000\022\037\n\tupdateMap"
  "\030\006 \001(\0132\n.UpdateMapH\000\022!\n\nupdateCity\030\007 \001(\013"
  "2\013.UpdateCityH\000\022!\n\nupdateUnit\030\010 \001(\0132\013.Up"
  "dateUnitH\000\022%\n\014updatePlayer\030\t \001(\0132\r.Updat"
  "ePlayerH\000\022%\n\014pathComputed\030\n \001(\0132\r.PathCo"
  "mputedH\000\022-\n\020confirmMoveUnits\030\013 \001(\0132\021.Con"
  "firmMoveUnitsH\000\0229\n\026possibleCityBuildTask"
  "s\030\014 \001(\0132\027.PossibleCityBuildTasksH\000\022\'\n\rpo"
  "ssibleTechs\030\r \001(\0132\016.PossibleTechsH\000\022!\n\nd"
  "eleteUnit\030\016 \001(\0132\013.DeleteUnitH\000B\010\n\006packet"
  "\"\036\n\nClientInfo\022\020\n\010username\030\001 \001(\t\"C\n\nServ"
  "erInfo\022\020\n\010playerID\030\001 \001(\005\022#\n\016currentPlaye"
  "rs\030\002 \003(\0132\013.PlayerInfo\"(\n\nKickPlayer\022\n\n\002i"
  "d\030\001 \001(\005\022\016\n\006reason\030\002 \001(\t\"*\n\tSetLeader\022\r\n\005"
  "civID\030\001 \001(\t\022\016\n\006leader\030\002 \001(\t\"\020\n\016AdminStar"
  "tGame\"\035\n\nLobbyError\022\017\n\007message\030\001 \001(\t\"\013\n\t"
  "StartGame\"m\n\nPlayerInfo\022\020\n\010username\030\001 \001("
  "\t\022\r\n\005civID\030\002 \001(\t\022\022\n\nleaderName\030\003 \001(\t\022\r\n\005"
  "score\030\004 \001(\005\022\n\n\002id\030\005 \001(\005\022\017\n\007isAdmin\030\006 \001(\010"
  "\"c\n\020UpdateGlobalData\022\034\n\007players\030\001 \003(\0132\013."
  "PlayerInfo\022\014\n\004turn\030\002 \001(\005\022\021\n\003era\030\003 \001(\0162\004."
  "Era\022\020\n\010playerID\030\004 \001(\005\"/\n\013Improvement\022\n\n\002"
  "id\030\001 \001(\t\022\024\n\014cottageLevel\030\002 \001(\t\"8\n\005Yield\022"
  "\017\n\007hammers\030\001 \001(\005\022\020\n\010commerce\030\002 \001(\005\022\014\n\004fo"
  "od\030\003 \001(\005\"\307\001\n\004Tile\022\031\n\007terrain\030\001 \001(\0162\010.Ter"
  "rain\022\020\n\010forested\030\002 \001(\010\022\016\n\006hilled\030\003 \001(\010\022\""
  "\n\014improvements\030\004 \003(\0132\014.Improvement\022\025\n\005yi"
  "eld\030\005 \001(\0132\006.Yield\022\017\n\007ownerID\030\006 \001(\005\022\020\n\010ha"
  "sOwner\030\007 \001(\010\022\020\n\010isWorked\030\010 \001(\010\022\022\n\nresour"
  "ceID\030\t \001(\t\"a\n\tUpdateMap\022\r\n\005width\030\001 \001(\r\022\016"
  "\n\006height\030\002 \001(\r\022\024\n\005tiles\030\003 \003(\0132\005.Tile\022\037\n\n"
  "visibility\030\004 \003(\0162\013.Visibility\"#\n\rUnitBui"
  "ldTask\022\022\n\nunitKindID\030\001 \001(\t\")\n\021BuildingBu"
  "ildTask\022\024\n\014buildingName\030\001 \001(\t\"_\n\rBuildTa"
  "skKind\022\036\n\004unit\030\001 \001(\0132\016.UnitBuildTaskH\000\022&"
  "\n\010building\030\002 \001(\0132\022.BuildingBuildTaskH\000B\006"
  "\n\004task\"I\n\tBuildTask\022\034\n\004kind\030\001 \001(\0132\016.Buil"
  "dTaskKind\022\020\n\010progress\030\002 \001(\005\022\014\n\004cost\030\003 \001("
  "\005\"\255\002\n\nUpdateCity\022\021\n\003pos\030\001 \001(\0132\004.Pos\022\014\n\004n"
  "ame\030\002 \001(\t\022\017\n\007ownerID\030\003 \001(\005\022\035\n\tbuildTask\030"
  "\004 \001(\0132\n.BuildTask\022\025\n\005yield\030\005 \001(\0132\006.Yield"
  "\022\017\n\007culture\030\006 \001(\005\022\025\n\rcultureNeeded\030\007 \001(\005"
  "\022\n\n\002id\030\010 \001(\005\022\025\n\rbuildingNames\030\t \003(\t\022\022\n\np"
  "opulation\030\n \001(\005\022\022\n\nstoredFood\030\013 \001(\005\022\033\n\023f"
  "oodNeededForGrowth\030\014 \001(\005\022\024\n\014consumedFood"
  "\030\r \001(\005\022\021\n\tisCapital\030\016 \001(\010\"\031\n\004Path\022\021\n\tpos"
  "itions\030\001 \003(\r\"\025\n\023FoundCityCapability\".\n\025W"
  "orkerTaskImprovement\022\025\n\rimprovementID\030\001 "
  "\001(\t\"L\n\016WorkerTaskKind\0222\n\020buildImprovemen"
  "t\030\001 \001(\0132\026.WorkerTaskImprovementH\000B\006\n\004kin"
  "d\"g\n\nWorkerTask\022\014\n\004name\030\001 \001(\t\022\021\n\tturnsLe"
  "ft\030\002 \001(\005\022\035\n\004kind\030\003 \001(\0132\017.WorkerTaskKind\022"
  "\031\n\021presentParticiple\030\004 \001(\t\"X\n\020WorkerCapa"
  "bility\022 \n\013currentTask\030\001 \001(\0132\013.WorkerTask"
  "\022\"\n\rpossibleTasks\030\002 \003(\0132\013.WorkerTask\"/\n\024"
  "CarryUnitsCapability\022\027\n\017carryingUnitIDs\030"
  "\001 \003(\005\"\220\001\n\nCapability\022)\n\tfoundCity\030\001 \001(\0132"
  "\024.FoundCityCapabilityH\000\022#\n\006worker\030\002 \001(\0132"
  "\021.WorkerCapabilityH\000\022+\n\ncarryUnits\030\003 \001(\013"
  "2\025.CarryUnitsCapabilityH\000B\005\n\003cap\"\305\001\n\nUpd"
  "ateUnit\022\021\n\003pos\030\001 \001(\0132\004.Pos\022\016\n\006kindID\030\002 \001"
  "(\t\022\017\n\007ownerID\030\003 \001(\005\022\016\n\006health\030\004 \001(\001\022\024\n\014m"
  "ovementLeft\030\005 \001(\001\022\034\n\rfollowingPath\030\006 \001(\013"
  "2\005.Path\022!\n\014capabilities\030\007 \003(\0132\013.Capabili"
  "ty\022\n\n\002id\030\010 \001(\005\022\020\n\010strength\030\t \001(\001\"3\n\017Rese"
  "archingTech\022\016\n\006techID\030\001 \001(\t\022\020\n\010progress\030"
  "\002 \001(\005\"\220\002\n\014UpdatePlayer\022\n\n\002id\030\001 \001(\005\022\020\n\010us"
  "ername\030\002 \001(\t\022\023\n\013baseRevenue\030\003 \001(\005\022\025\n\rbea"
  "kerRevenue\030\004 \001(\005\022\023\n\013goldRevenue\030\005 \001(\005\022\020\n"
  "\010expenses\030\006 \001(\005\022\017\n\007netGold\030\007 \001(\005\022\014\n\004gold"
  "\030\010 \001(\005\022)\n\017researchingTech\030\t \001(\0132\020.Resear"
  "chingTech\022\025\n\rcapitalCityID\030\n \001(\005\022\027\n\017unlo"
  "ckedTechIDs\030\013 \003(\t\022\025\n\rbeakerPercent\030\014 \001(\005"
  "\"#\n\014PathComputed\022\023\n\004path\030\001 \001(\0132\005.Path\"#\n"
  "\020ConfirmMoveUnits\022\017\n\007success\030\001 \001(\010\"3\n\026Po"
  "ssibleCityBuildTasks\022\031\n\005tasks\030\001 \003(\0132\n.Bu"
  "ildTask\"\036\n\rPossibleTechs\022\r\n\005techs\030\001 \003(\t\""
  "\034\n\nDeleteUnit\022\016\n\006unitID\030\001 \001(\005\"9\n\tMoveUni"
  "ts\022\017\n\007unitIDs\030\001 \003(\005\022\033\n\014pathToFollow\030\002 \001("
  "\0132\005.Path\"@\n\020SetCityBuildTask\022\016\n\006cityID\030\001"
  " \001(\005\022\034\n\004task\030\002 \001(\0132\016.BuildTaskKind\"<\n\rSe"
  "tWorkerTask\022\020\n\010workerID\030\001 \001(\005\022\031\n\004task\030\002 "
  "\001(\0132\013.WorkerTask\"G\n\013ComputePath\022\022\n\004from\030"
  "\001 \001(\0132\004.Pos\022\020\n\002to\030\002 \001(\0132\004.Pos\022\022\n\nunitKin"
  "dID\030\003 \001(\t\"+\n\022SetEconomySettings\022\025\n\rbeake"
  "rPercent\030\001 \001(\005\"\035\n\013SetResearch\022\016\n\006techID\030"
  "\001 \001(\t\"\t\n\007EndTurn\"\037\n\rGetBuildTasks\022\016\n\006cit"
  "yID\030\001 \001(\005\"\022\n\020GetPossibleTechs\";\n\014DoUnitA"
  "ction\022\016\n\006unitID\030\001 \001(\005\022\033\n\006action\030\002 \001(\0162\013."
  "UnitAction*h\n\003Era\022\013\n\007Ancient\020\000\022\r\n\tClassi"
  "cal\020\001\022\014\n\010Medieval\020\002\022\017\n\013Renaissance\020\003\022\016\n\n"
  "Industrial\020\004\022\n\n\006Modern\020\005\022\n\n\006Future\020\006*;\n\007"
  "Terrain\022\r\n\tGrassland\020\000\022\n\n\006Desert\020\001\022\t\n\005Oc"
  "ean\020\002\022\n\n\006Plains\020\003*1\n\nVisibility\022\n\n\006Hidde"
  "n\020\000\022\n\n\006Fogged\020\001\022\013\n\007Visible\020\002*X\n\nUnitActi"
  "on\022\010\n\004Kill\020\000\022\013\n\007Fortify\020\001\022\014\n\010SkipTurn\020\002\022"
  "\026\n\022FortifyUntilHealed\020\003\022\r\n\tFoundCity\020\004b\006"
  "proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_riposte_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_riposte_2eproto = {
  false, false, 4566, descriptor_table_protodef_riposte_2eproto, "riposte.proto", 
  &descriptor_table_riposte_2eproto_once, nullptr, 0, 47,
  schemas, file_default_instances, TableStruct_riposte_2eproto::offsets,
  file_level_metadata_riposte_2eproto, file_level_enum_descriptors_riposte_2eproto, file_level_service_descriptors_riposte_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_riposte_2eproto_getter() {
  return &descriptor_table_riposte_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_riposte_2eproto(&descriptor_table_riposte_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Era_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_riposte_2eproto);
  return file_level_enum_descriptors_riposte_2eproto[0];
}
bool Era_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Terrain_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_riposte_2eproto);
  return file_level_enum_descriptors_riposte_2eproto[1];
}
bool Terrain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_riposte_2eproto);
  return file_level_enum_descriptors_riposte_2eproto[2];
}
bool Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnitAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_riposte_2eproto);
  return file_level_enum_descriptors_riposte_2eproto[3];
}
bool UnitAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Pos::_Internal {
 public:
};

Pos::Pos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Pos)
}
Pos::Pos(const Pos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Pos)
}

inline void Pos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:Pos)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pos::ArenaDtor(void* object) {
  Pos* _this = reinterpret_cast< Pos* >(object);
  (void)_this;
}
void Pos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pos)
  return target;
}

size_t Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  // uint32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pos::GetClassData() const { return &_class_data_; }

void Pos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Pos *>(to)->MergeFrom(
      static_cast<const Pos &>(from));
}


void Pos::MergeFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pos)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pos::CopyFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  return true;
}

void Pos::InternalSwap(Pos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pos, y_)
      + sizeof(Pos::y_)
      - PROTOBUF_FIELD_OFFSET(Pos, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pos::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[0]);
}

// ===================================================================

class AnyClient::_Internal {
 public:
  static const ::ClientInfo& clientinfo(const AnyClient* msg);
  static const ::ComputePath& computepath(const AnyClient* msg);
  static const ::MoveUnits& moveunits(const AnyClient* msg);
  static const ::EndTurn& endturn(const AnyClient* msg);
  static const ::GetBuildTasks& getbuildtasks(const AnyClient* msg);
  static const ::SetCityBuildTask& setcitybuildtask(const AnyClient* msg);
  static const ::SetResearch& setresearch(const AnyClient* msg);
  static const ::GetPossibleTechs& getpossibletechs(const AnyClient* msg);
  static const ::SetEconomySettings& seteconomysettings(const AnyClient* msg);
  static const ::DoUnitAction& dounitaction(const AnyClient* msg);
  static const ::SetWorkerTask& setworkertask(const AnyClient* msg);
};

const ::ClientInfo&
AnyClient::_Internal::clientinfo(const AnyClient* msg) {
  return *msg->packet_.clientinfo_;
}
const ::ComputePath&
AnyClient::_Internal::computepath(const AnyClient* msg) {
  return *msg->packet_.computepath_;
}
const ::MoveUnits&
AnyClient::_Internal::moveunits(const AnyClient* msg) {
  return *msg->packet_.moveunits_;
}
const ::EndTurn&
AnyClient::_Internal::endturn(const AnyClient* msg) {
  return *msg->packet_.endturn_;
}
const ::GetBuildTasks&
AnyClient::_Internal::getbuildtasks(const AnyClient* msg) {
  return *msg->packet_.getbuildtasks_;
}
const ::SetCityBuildTask&
AnyClient::_Internal::setcitybuildtask(const AnyClient* msg) {
  return *msg->packet_.setcitybuildtask_;
}
const ::SetResearch&
AnyClient::_Internal::setresearch(const AnyClient* msg) {
  return *msg->packet_.setresearch_;
}
const ::GetPossibleTechs&
AnyClient::_Internal::getpossibletechs(const AnyClient* msg) {
  return *msg->packet_.getpossibletechs_;
}
const ::SetEconomySettings&
AnyClient::_Internal::seteconomysettings(const AnyClient* msg) {
  return *msg->packet_.seteconomysettings_;
}
const ::DoUnitAction&
AnyClient::_Internal::dounitaction(const AnyClient* msg) {
  return *msg->packet_.dounitaction_;
}
const ::SetWorkerTask&
AnyClient::_Internal::setworkertask(const AnyClient* msg) {
  return *msg->packet_.setworkertask_;
}
void AnyClient::set_allocated_clientinfo(::ClientInfo* clientinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (clientinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientInfo>::GetOwningArena(clientinfo);
    if (message_arena != submessage_arena) {
      clientinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientinfo, submessage_arena);
    }
    set_has_clientinfo();
    packet_.clientinfo_ = clientinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.clientInfo)
}
void AnyClient::set_allocated_computepath(::ComputePath* computepath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (computepath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ComputePath>::GetOwningArena(computepath);
    if (message_arena != submessage_arena) {
      computepath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, computepath, submessage_arena);
    }
    set_has_computepath();
    packet_.computepath_ = computepath;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.computePath)
}
void AnyClient::set_allocated_moveunits(::MoveUnits* moveunits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (moveunits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MoveUnits>::GetOwningArena(moveunits);
    if (message_arena != submessage_arena) {
      moveunits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moveunits, submessage_arena);
    }
    set_has_moveunits();
    packet_.moveunits_ = moveunits;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.moveUnits)
}
void AnyClient::set_allocated_endturn(::EndTurn* endturn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (endturn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EndTurn>::GetOwningArena(endturn);
    if (message_arena != submessage_arena) {
      endturn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endturn, submessage_arena);
    }
    set_has_endturn();
    packet_.endturn_ = endturn;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.endTurn)
}
void AnyClient::set_allocated_getbuildtasks(::GetBuildTasks* getbuildtasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (getbuildtasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GetBuildTasks>::GetOwningArena(getbuildtasks);
    if (message_arena != submessage_arena) {
      getbuildtasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbuildtasks, submessage_arena);
    }
    set_has_getbuildtasks();
    packet_.getbuildtasks_ = getbuildtasks;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.getBuildTasks)
}
void AnyClient::set_allocated_setcitybuildtask(::SetCityBuildTask* setcitybuildtask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (setcitybuildtask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SetCityBuildTask>::GetOwningArena(setcitybuildtask);
    if (message_arena != submessage_arena) {
      setcitybuildtask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcitybuildtask, submessage_arena);
    }
    set_has_setcitybuildtask();
    packet_.setcitybuildtask_ = setcitybuildtask;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.setCityBuildTask)
}
void AnyClient::set_allocated_setresearch(::SetResearch* setresearch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (setresearch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SetResearch>::GetOwningArena(setresearch);
    if (message_arena != submessage_arena) {
      setresearch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setresearch, submessage_arena);
    }
    set_has_setresearch();
    packet_.setresearch_ = setresearch;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.setResearch)
}
void AnyClient::set_allocated_getpossibletechs(::GetPossibleTechs* getpossibletechs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (getpossibletechs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GetPossibleTechs>::GetOwningArena(getpossibletechs);
    if (message_arena != submessage_arena) {
      getpossibletechs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpossibletechs, submessage_arena);
    }
    set_has_getpossibletechs();
    packet_.getpossibletechs_ = getpossibletechs;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.getPossibleTechs)
}
void AnyClient::set_allocated_seteconomysettings(::SetEconomySettings* seteconomysettings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (seteconomysettings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SetEconomySettings>::GetOwningArena(seteconomysettings);
    if (message_arena != submessage_arena) {
      seteconomysettings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seteconomysettings, submessage_arena);
    }
    set_has_seteconomysettings();
    packet_.seteconomysettings_ = seteconomysettings;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.setEconomySettings)
}
void AnyClient::set_allocated_dounitaction(::DoUnitAction* dounitaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (dounitaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DoUnitAction>::GetOwningArena(dounitaction);
    if (message_arena != submessage_arena) {
      dounitaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dounitaction, submessage_arena);
    }
    set_has_dounitaction();
    packet_.dounitaction_ = dounitaction;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.doUnitAction)
}
void AnyClient::set_allocated_setworkertask(::SetWorkerTask* setworkertask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (setworkertask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SetWorkerTask>::GetOwningArena(setworkertask);
    if (message_arena != submessage_arena) {
      setworkertask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setworkertask, submessage_arena);
    }
    set_has_setworkertask();
    packet_.setworkertask_ = setworkertask;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.setWorkerTask)
}
AnyClient::AnyClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AnyClient)
}
AnyClient::AnyClient(const AnyClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_ = from.requestid_;
  clear_has_packet();
  switch (from.packet_case()) {
    case kClientInfo: {
      _internal_mutable_clientinfo()->::ClientInfo::MergeFrom(from._internal_clientinfo());
      break;
    }
    case kComputePath: {
      _internal_mutable_computepath()->::ComputePath::MergeFrom(from._internal_computepath());
      break;
    }
    case kMoveUnits: {
      _internal_mutable_moveunits()->::MoveUnits::MergeFrom(from._internal_moveunits());
      break;
    }
    case kEndTurn: {
      _internal_mutable_endturn()->::EndTurn::MergeFrom(from._internal_endturn());
      break;
    }
    case kGetBuildTasks: {
      _internal_mutable_getbuildtasks()->::GetBuildTasks::MergeFrom(from._internal_getbuildtasks());
      break;
    }
    case kSetCityBuildTask: {
      _internal_mutable_setcitybuildtask()->::SetCityBuildTask::MergeFrom(from._internal_setcitybuildtask());
      break;
    }
    case kSetResearch: {
      _internal_mutable_setresearch()->::SetResearch::MergeFrom(from._internal_setresearch());
      break;
    }
    case kGetPossibleTechs: {
      _internal_mutable_getpossibletechs()->::GetPossibleTechs::MergeFrom(from._internal_getpossibletechs());
      break;
    }
    case kSetEconomySettings: {
      _internal_mutable_seteconomysettings()->::SetEconomySettings::MergeFrom(from._internal_seteconomysettings());
      break;
    }
    case kDoUnitAction: {
      _internal_mutable_dounitaction()->::DoUnitAction::MergeFrom(from._internal_dounitaction());
      break;
    }
    case kSetWorkerTask: {
      _internal_mutable_setworkertask()->::SetWorkerTask::MergeFrom(from._internal_setworkertask());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AnyClient)
}

inline void AnyClient::SharedCtor() {
requestid_ = 0;
clear_has_packet();
}

AnyClient::~AnyClient() {
  // @@protoc_insertion_point(destructor:AnyClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_packet()) {
    clear_packet();
  }
}

void AnyClient::ArenaDtor(void* object) {
  AnyClient* _this = reinterpret_cast< AnyClient* >(object);
  (void)_this;
}
void AnyClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyClient::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:AnyClient)
  switch (packet_case()) {
    case kClientInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.clientinfo_;
      }
      break;
    }
    case kComputePath: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.computepath_;
      }
      break;
    }
    case kMoveUnits: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.moveunits_;
      }
      break;
    }
    case kEndTurn: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.endturn_;
      }
      break;
    }
    case kGetBuildTasks: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.getbuildtasks_;
      }
      break;
    }
    case kSetCityBuildTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.setcitybuildtask_;
      }
      break;
    }
    case kSetResearch: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.setresearch_;
      }
      break;
    }
    case kGetPossibleTechs: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.getpossibletechs_;
      }
      break;
    }
    case kSetEconomySettings: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.seteconomysettings_;
      }
      break;
    }
    case kDoUnitAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.dounitaction_;
      }
      break;
    }
    case kSetWorkerTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.setworkertask_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void AnyClient::Clear() {
// @@protoc_insertion_point(message_clear_start:AnyClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0;
  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 requestID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ClientInfo clientInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ComputePath computePath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_computepath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MoveUnits moveUnits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_moveunits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EndTurn endTurn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_endturn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GetBuildTasks getBuildTasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbuildtasks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SetCityBuildTask setCityBuildTask = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_setcitybuildtask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SetResearch setResearch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_setresearch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GetPossibleTechs getPossibleTechs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpossibletechs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SetEconomySettings setEconomySettings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_seteconomysettings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DoUnitAction doUnitAction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dounitaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SetWorkerTask setWorkerTask = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_setworkertask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnyClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestID = 1;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_requestid(), target);
  }

  // .ClientInfo clientInfo = 2;
  if (_internal_has_clientinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clientinfo(this), target, stream);
  }

  // .ComputePath computePath = 3;
  if (_internal_has_computepath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::computepath(this), target, stream);
  }

  // .MoveUnits moveUnits = 4;
  if (_internal_has_moveunits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::moveunits(this), target, stream);
  }

  // .EndTurn endTurn = 5;
  if (_internal_has_endturn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::endturn(this), target, stream);
  }

  // .GetBuildTasks getBuildTasks = 6;
  if (_internal_has_getbuildtasks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::getbuildtasks(this), target, stream);
  }

  // .SetCityBuildTask setCityBuildTask = 7;
  if (_internal_has_setcitybuildtask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::setcitybuildtask(this), target, stream);
  }

  // .SetResearch setResearch = 8;
  if (_internal_has_setresearch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::setresearch(this), target, stream);
  }

  // .GetPossibleTechs getPossibleTechs = 9;
  if (_internal_has_getpossibletechs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::getpossibletechs(this), target, stream);
  }

  // .SetEconomySettings setEconomySettings = 10;
  if (_internal_has_seteconomysettings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::seteconomysettings(this), target, stream);
  }

  // .DoUnitAction doUnitAction = 11;
  if (_internal_has_dounitaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::dounitaction(this), target, stream);
  }

  // .SetWorkerTask setWorkerTask = 12;
  if (_internal_has_setworkertask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::setworkertask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnyClient)
  return target;
}

size_t AnyClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnyClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 requestID = 1;
  if (this->_internal_requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_requestid());
  }

  switch (packet_case()) {
    // .ClientInfo clientInfo = 2;
    case kClientInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.clientinfo_);
      break;
    }
    // .ComputePath computePath = 3;
    case kComputePath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.computepath_);
      break;
    }
    // .MoveUnits moveUnits = 4;
    case kMoveUnits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.moveunits_);
      break;
    }
    // .EndTurn endTurn = 5;
    case kEndTurn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.endturn_);
      break;
    }
    // .GetBuildTasks getBuildTasks = 6;
    case kGetBuildTasks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.getbuildtasks_);
      break;
    }
    // .SetCityBuildTask setCityBuildTask = 7;
    case kSetCityBuildTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.setcitybuildtask_);
      break;
    }
    // .SetResearch setResearch = 8;
    case kSetResearch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.setresearch_);
      break;
    }
    // .GetPossibleTechs getPossibleTechs = 9;
    case kGetPossibleTechs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.getpossibletechs_);
      break;
    }
    // .SetEconomySettings setEconomySettings = 10;
    case kSetEconomySettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.seteconomysettings_);
      break;
    }
    // .DoUnitAction doUnitAction = 11;
    case kDoUnitAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.dounitaction_);
      break;
    }
    // .SetWorkerTask setWorkerTask = 12;
    case kSetWorkerTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.setworkertask_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnyClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnyClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnyClient::GetClassData() const { return &_class_data_; }

void AnyClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnyClient *>(to)->MergeFrom(
      static_cast<const AnyClient &>(from));
}


void AnyClient::MergeFrom(const AnyClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnyClient)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  switch (from.packet_case()) {
    case kClientInfo: {
      _internal_mutable_clientinfo()->::ClientInfo::MergeFrom(from._internal_clientinfo());
      break;
    }
    case kComputePath: {
      _internal_mutable_computepath()->::ComputePath::MergeFrom(from._internal_computepath());
      break;
    }
    case kMoveUnits: {
      _internal_mutable_moveunits()->::MoveUnits::MergeFrom(from._internal_moveunits());
      break;
    }
    case kEndTurn: {
      _internal_mutable_endturn()->::EndTurn::MergeFrom(from._internal_endturn());
      break;
    }
    case kGetBuildTasks: {
      _internal_mutable_getbuildtasks()->::GetBuildTasks::MergeFrom(from._internal_getbuildtasks());
      break;
    }
    case kSetCityBuildTask: {
      _internal_mutable_setcitybuildtask()->::SetCityBuildTask::MergeFrom(from._internal_setcitybuildtask());
      break;
    }
    case kSetResearch: {
      _internal_mutable_setresearch()->::SetResearch::MergeFrom(from._internal_setresearch());
      break;
    }
    case kGetPossibleTechs: {
      _internal_mutable_getpossibletechs()->::GetPossibleTechs::MergeFrom(from._internal_getpossibletechs());
      break;
    }
    case kSetEconomySettings: {
      _internal_mutable_seteconomysettings()->::SetEconomySettings::MergeFrom(from._internal_seteconomysettings());
      break;
    }
    case kDoUnitAction: {
      _internal_mutable_dounitaction()->::DoUnitAction::MergeFrom(from._internal_dounitaction());
      break;
    }
    case kSetWorkerTask: {
      _internal_mutable_setworkertask()->::SetWorkerTask::MergeFrom(from._internal_setworkertask());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnyClient::CopyFrom(const AnyClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnyClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyClient::IsInitialized() const {
  return true;
}

void AnyClient::InternalSwap(AnyClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(requestid_, other->requestid_);
  swap(packet_, other->packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[1]);
}

// ===================================================================

class AnyServer::_Internal {
 public:
  static const ::ServerInfo& serverinfo(const AnyServer* msg);
  static const ::StartGame& startgame(const AnyServer* msg);
  static const ::LobbyError& lobbyerror(const AnyServer* msg);
  static const ::UpdateGlobalData& updateglobaldata(const AnyServer* msg);
  static const ::UpdateMap& updatemap(const AnyServer* msg);
  static const ::UpdateCity& updatecity(const AnyServer* msg);
  static const ::UpdateUnit& updateunit(const AnyServer* msg);
  static const ::UpdatePlayer& updateplayer(const AnyServer* msg);
  static const ::PathComputed& pathcomputed(const AnyServer* msg);
  static const ::ConfirmMoveUnits& confirmmoveunits(const AnyServer* msg);
  static const ::PossibleCityBuildTasks& possiblecitybuildtasks(const AnyServer* msg);
  static const ::PossibleTechs& possibletechs(const AnyServer* msg);
  static const ::DeleteUnit& deleteunit(const AnyServer* msg);
};

const ::ServerInfo&
AnyServer::_Internal::serverinfo(const AnyServer* msg) {
  return *msg->packet_.serverinfo_;
}
const ::StartGame&
AnyServer::_Internal::startgame(const AnyServer* msg) {
  return *msg->packet_.startgame_;
}
const ::LobbyError&
AnyServer::_Internal::lobbyerror(const AnyServer* msg) {
  return *msg->packet_.lobbyerror_;
}
const ::UpdateGlobalData&
AnyServer::_Internal::updateglobaldata(const AnyServer* msg) {
  return *msg->packet_.updateglobaldata_;
}
const ::UpdateMap&
AnyServer::_Internal::updatemap(const AnyServer* msg) {
  return *msg->packet_.updatemap_;
}
const ::UpdateCity&
AnyServer::_Internal::updatecity(const AnyServer* msg) {
  return *msg->packet_.updatecity_;
}
const ::UpdateUnit&
AnyServer::_Internal::updateunit(const AnyServer* msg) {
  return *msg->packet_.updateunit_;
}
const ::UpdatePlayer&
AnyServer::_Internal::updateplayer(const AnyServer* msg) {
  return *msg->packet_.updateplayer_;
}
const ::PathComputed&
AnyServer::_Internal::pathcomputed(const AnyServer* msg) {
  return *msg->packet_.pathcomputed_;
}
const ::ConfirmMoveUnits&
AnyServer::_Internal::confirmmoveunits(const AnyServer* msg) {
  return *msg->packet_.confirmmoveunits_;
}
const ::PossibleCityBuildTasks&
AnyServer::_Internal::possiblecitybuildtasks(const AnyServer* msg) {
  return *msg->packet_.possiblecitybuildtasks_;
}
const ::PossibleTechs&
AnyServer::_Internal::possibletechs(const AnyServer* msg) {
  return *msg->packet_.possibletechs_;
}
const ::DeleteUnit&
AnyServer::_Internal::deleteunit(const AnyServer* msg) {
  return *msg->packet_.deleteunit_;
}
void AnyServer::set_allocated_serverinfo(::ServerInfo* serverinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (serverinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ServerInfo>::GetOwningArena(serverinfo);
    if (message_arena != submessage_arena) {
      serverinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serverinfo, submessage_arena);
    }
    set_has_serverinfo();
    packet_.serverinfo_ = serverinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.serverInfo)
}
void AnyServer::set_allocated_startgame(::StartGame* startgame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (startgame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StartGame>::GetOwningArena(startgame);
    if (message_arena != submessage_arena) {
      startgame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startgame, submessage_arena);
    }
    set_has_startgame();
    packet_.startgame_ = startgame;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.startGame)
}
void AnyServer::set_allocated_lobbyerror(::LobbyError* lobbyerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (lobbyerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::LobbyError>::GetOwningArena(lobbyerror);
    if (message_arena != submessage_arena) {
      lobbyerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lobbyerror, submessage_arena);
    }
    set_has_lobbyerror();
    packet_.lobbyerror_ = lobbyerror;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.lobbyError)
}
void AnyServer::set_allocated_updateglobaldata(::UpdateGlobalData* updateglobaldata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (updateglobaldata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UpdateGlobalData>::GetOwningArena(updateglobaldata);
    if (message_arena != submessage_arena) {
      updateglobaldata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateglobaldata, submessage_arena);
    }
    set_has_updateglobaldata();
    packet_.updateglobaldata_ = updateglobaldata;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updateGlobalData)
}
void AnyServer::set_allocated_updatemap(::UpdateMap* updatemap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (updatemap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UpdateMap>::GetOwningArena(updatemap);
    if (message_arena != submessage_arena) {
      updatemap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatemap, submessage_arena);
    }
    set_has_updatemap();
    packet_.updatemap_ = updatemap;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updateMap)
}
void AnyServer::set_allocated_updatecity(::UpdateCity* updatecity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (updatecity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UpdateCity>::GetOwningArena(updatecity);
    if (message_arena != submessage_arena) {
      updatecity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecity, submessage_arena);
    }
    set_has_updatecity();
    packet_.updatecity_ = updatecity;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updateCity)
}
void AnyServer::set_allocated_updateunit(::UpdateUnit* updateunit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (updateunit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UpdateUnit>::GetOwningArena(updateunit);
    if (message_arena != submessage_arena) {
      updateunit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateunit, submessage_arena);
    }
    set_has_updateunit();
    packet_.updateunit_ = updateunit;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updateUnit)
}
void AnyServer::set_allocated_updateplayer(::UpdatePlayer* updateplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (updateplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UpdatePlayer>::GetOwningArena(updateplayer);
    if (message_arena != submessage_arena) {
      updateplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateplayer, submessage_arena);
    }
    set_has_updateplayer();
    packet_.updateplayer_ = updateplayer;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updatePlayer)
}
void AnyServer::set_allocated_pathcomputed(::PathComputed* pathcomputed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (pathcomputed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PathComputed>::GetOwningArena(pathcomputed);
    if (message_arena != submessage_arena) {
      pathcomputed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathcomputed, submessage_arena);
    }
    set_has_pathcomputed();
    packet_.pathcomputed_ = pathcomputed;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.pathComputed)
}
void AnyServer::set_allocated_confirmmoveunits(::ConfirmMoveUnits* confirmmoveunits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (confirmmoveunits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ConfirmMoveUnits>::GetOwningArena(confirmmoveunits);
    if (message_arena != submessage_arena) {
      confirmmoveunits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirmmoveunits, submessage_arena);
    }
    set_has_confirmmoveunits();
    packet_.confirmmoveunits_ = confirmmoveunits;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.confirmMoveUnits)
}
void AnyServer::set_allocated_possiblecitybuildtasks(::PossibleCityBuildTasks* possiblecitybuildtasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (possiblecitybuildtasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PossibleCityBuildTasks>::GetOwningArena(possiblecitybuildtasks);
    if (message_arena != submessage_arena) {
      possiblecitybuildtasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, possiblecitybuildtasks, submessage_arena);
    }
    set_has_possiblecitybuildtasks();
    packet_.possiblecitybuildtasks_ = possiblecitybuildtasks;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.possibleCityBuildTasks)
}
void AnyServer::set_allocated_possibletechs(::PossibleTechs* possibletechs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (possibletechs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PossibleTechs>::GetOwningArena(possibletechs);
    if (message_arena != submessage_arena) {
      possibletechs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, possibletechs, submessage_arena);
    }
    set_has_possibletechs();
    packet_.possibletechs_ = possibletechs;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.possibleTechs)
}
void AnyServer::set_allocated_deleteunit(::DeleteUnit* deleteunit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet();
  if (deleteunit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DeleteUnit>::GetOwningArena(deleteunit);
    if (message_arena != submessage_arena) {
      deleteunit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleteunit, submessage_arena);
    }
    set_has_deleteunit();
    packet_.deleteunit_ = deleteunit;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.deleteUnit)
}
AnyServer::AnyServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AnyServer)
}
AnyServer::AnyServer(const AnyServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_ = from.requestid_;
  clear_has_packet();
  switch (from.packet_case()) {
    case kServerInfo: {
      _internal_mutable_serverinfo()->::ServerInfo::MergeFrom(from._internal_serverinfo());
      break;
    }
    case kStartGame: {
      _internal_mutable_startgame()->::StartGame::MergeFrom(from._internal_startgame());
      break;
    }
    case kLobbyError: {
      _internal_mutable_lobbyerror()->::LobbyError::MergeFrom(from._internal_lobbyerror());
      break;
    }
    case kUpdateGlobalData: {
      _internal_mutable_updateglobaldata()->::UpdateGlobalData::MergeFrom(from._internal_updateglobaldata());
      break;
    }
    case kUpdateMap: {
      _internal_mutable_updatemap()->::UpdateMap::MergeFrom(from._internal_updatemap());
      break;
    }
    case kUpdateCity: {
      _internal_mutable_updatecity()->::UpdateCity::MergeFrom(from._internal_updatecity());
      break;
    }
    case kUpdateUnit: {
      _internal_mutable_updateunit()->::UpdateUnit::MergeFrom(from._internal_updateunit());
      break;
    }
    case kUpdatePlayer: {
      _internal_mutable_updateplayer()->::UpdatePlayer::MergeFrom(from._internal_updateplayer());
      break;
    }
    case kPathComputed: {
      _internal_mutable_pathcomputed()->::PathComputed::MergeFrom(from._internal_pathcomputed());
      break;
    }
    case kConfirmMoveUnits: {
      _internal_mutable_confirmmoveunits()->::ConfirmMoveUnits::MergeFrom(from._internal_confirmmoveunits());
      break;
    }
    case kPossibleCityBuildTasks: {
      _internal_mutable_possiblecitybuildtasks()->::PossibleCityBuildTasks::MergeFrom(from._internal_possiblecitybuildtasks());
      break;
    }
    case kPossibleTechs: {
      _internal_mutable_possibletechs()->::PossibleTechs::MergeFrom(from._internal_possibletechs());
      break;
    }
    case kDeleteUnit: {
      _internal_mutable_deleteunit()->::DeleteUnit::MergeFrom(from._internal_deleteunit());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AnyServer)
}

inline void AnyServer::SharedCtor() {
requestid_ = 0;
clear_has_packet();
}

AnyServer::~AnyServer() {
  // @@protoc_insertion_point(destructor:AnyServer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_packet()) {
    clear_packet();
  }
}

void AnyServer::ArenaDtor(void* object) {
  AnyServer* _this = reinterpret_cast< AnyServer* >(object);
  (void)_this;
}
void AnyServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyServer::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:AnyServer)
  switch (packet_case()) {
    case kServerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.serverinfo_;
      }
      break;
    }
    case kStartGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.startgame_;
      }
      break;
    }
    case kLobbyError: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.lobbyerror_;
      }
      break;
    }
    case kUpdateGlobalData: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.updateglobaldata_;
      }
      break;
    }
    case kUpdateMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.updatemap_;
      }
      break;
    }
    case kUpdateCity: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.updatecity_;
      }
      break;
    }
    case kUpdateUnit: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.updateunit_;
      }
      break;
    }
    case kUpdatePlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.updateplayer_;
      }
      break;
    }
    case kPathComputed: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.pathcomputed_;
      }
      break;
    }
    case kConfirmMoveUnits: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.confirmmoveunits_;
      }
      break;
    }
    case kPossibleCityBuildTasks: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.possiblecitybuildtasks_;
      }
      break;
    }
    case kPossibleTechs: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.possibletechs_;
      }
      break;
    }
    case kDeleteUnit: {
      if (GetArenaForAllocation() == nullptr) {
        delete packet_.deleteunit_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void AnyServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AnyServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0;
  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 requestID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerInfo serverInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StartGame startGame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_startgame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LobbyError lobbyError = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobbyerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateGlobalData updateGlobalData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateglobaldata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateMap updateMap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatemap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateCity updateCity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateUnit updateUnit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateunit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdatePlayer updatePlayer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateplayer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PathComputed pathComputed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathcomputed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ConfirmMoveUnits confirmMoveUnits = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmmoveunits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PossibleCityBuildTasks possibleCityBuildTasks = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_possiblecitybuildtasks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PossibleTechs possibleTechs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_possibletechs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DeleteUnit deleteUnit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleteunit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnyServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestID = 1;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_requestid(), target);
  }

  // .ServerInfo serverInfo = 2;
  if (_internal_has_serverinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::serverinfo(this), target, stream);
  }

  // .StartGame startGame = 3;
  if (_internal_has_startgame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::startgame(this), target, stream);
  }

  // .LobbyError lobbyError = 4;
  if (_internal_has_lobbyerror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lobbyerror(this), target, stream);
  }

  // .UpdateGlobalData updateGlobalData = 5;
  if (_internal_has_updateglobaldata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::updateglobaldata(this), target, stream);
  }

  // .UpdateMap updateMap = 6;
  if (_internal_has_updatemap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::updatemap(this), target, stream);
  }

  // .UpdateCity updateCity = 7;
  if (_internal_has_updatecity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::updatecity(this), target, stream);
  }

  // .UpdateUnit updateUnit = 8;
  if (_internal_has_updateunit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::updateunit(this), target, stream);
  }

  // .UpdatePlayer updatePlayer = 9;
  if (_internal_has_updateplayer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::updateplayer(this), target, stream);
  }

  // .PathComputed pathComputed = 10;
  if (_internal_has_pathcomputed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::pathcomputed(this), target, stream);
  }

  // .ConfirmMoveUnits confirmMoveUnits = 11;
  if (_internal_has_confirmmoveunits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::confirmmoveunits(this), target, stream);
  }

  // .PossibleCityBuildTasks possibleCityBuildTasks = 12;
  if (_internal_has_possiblecitybuildtasks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::possiblecitybuildtasks(this), target, stream);
  }

  // .PossibleTechs possibleTechs = 13;
  if (_internal_has_possibletechs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::possibletechs(this), target, stream);
  }

  // .DeleteUnit deleteUnit = 14;
  if (_internal_has_deleteunit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::deleteunit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnyServer)
  return target;
}

size_t AnyServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnyServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 requestID = 1;
  if (this->_internal_requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_requestid());
  }

  switch (packet_case()) {
    // .ServerInfo serverInfo = 2;
    case kServerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.serverinfo_);
      break;
    }
    // .StartGame startGame = 3;
    case kStartGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.startgame_);
      break;
    }
    // .LobbyError lobbyError = 4;
    case kLobbyError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.lobbyerror_);
      break;
    }
    // .UpdateGlobalData updateGlobalData = 5;
    case kUpdateGlobalData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updateglobaldata_);
      break;
    }
    // .UpdateMap updateMap = 6;
    case kUpdateMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updatemap_);
      break;
    }
    // .UpdateCity updateCity = 7;
    case kUpdateCity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updatecity_);
      break;
    }
    // .UpdateUnit updateUnit = 8;
    case kUpdateUnit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updateunit_);
      break;
    }
    // .UpdatePlayer updatePlayer = 9;
    case kUpdatePlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updateplayer_);
      break;
    }
    // .PathComputed pathComputed = 10;
    case kPathComputed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.pathcomputed_);
      break;
    }
    // .ConfirmMoveUnits confirmMoveUnits = 11;
    case kConfirmMoveUnits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.confirmmoveunits_);
      break;
    }
    // .PossibleCityBuildTasks possibleCityBuildTasks = 12;
    case kPossibleCityBuildTasks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.possiblecitybuildtasks_);
      break;
    }
    // .PossibleTechs possibleTechs = 13;
    case kPossibleTechs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.possibletechs_);
      break;
    }
    // .DeleteUnit deleteUnit = 14;
    case kDeleteUnit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.deleteunit_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnyServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnyServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnyServer::GetClassData() const { return &_class_data_; }

void AnyServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnyServer *>(to)->MergeFrom(
      static_cast<const AnyServer &>(from));
}


void AnyServer::MergeFrom(const AnyServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnyServer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  switch (from.packet_case()) {
    case kServerInfo: {
      _internal_mutable_serverinfo()->::ServerInfo::MergeFrom(from._internal_serverinfo());
      break;
    }
    case kStartGame: {
      _internal_mutable_startgame()->::StartGame::MergeFrom(from._internal_startgame());
      break;
    }
    case kLobbyError: {
      _internal_mutable_lobbyerror()->::LobbyError::MergeFrom(from._internal_lobbyerror());
      break;
    }
    case kUpdateGlobalData: {
      _internal_mutable_updateglobaldata()->::UpdateGlobalData::MergeFrom(from._internal_updateglobaldata());
      break;
    }
    case kUpdateMap: {
      _internal_mutable_updatemap()->::UpdateMap::MergeFrom(from._internal_updatemap());
      break;
    }
    case kUpdateCity: {
      _internal_mutable_updatecity()->::UpdateCity::MergeFrom(from._internal_updatecity());
      break;
    }
    case kUpdateUnit: {
      _internal_mutable_updateunit()->::UpdateUnit::MergeFrom(from._internal_updateunit());
      break;
    }
    case kUpdatePlayer: {
      _internal_mutable_updateplayer()->::UpdatePlayer::MergeFrom(from._internal_updateplayer());
      break;
    }
    case kPathComputed: {
      _internal_mutable_pathcomputed()->::PathComputed::MergeFrom(from._internal_pathcomputed());
      break;
    }
    case kConfirmMoveUnits: {
      _internal_mutable_confirmmoveunits()->::ConfirmMoveUnits::MergeFrom(from._internal_confirmmoveunits());
      break;
    }
    case kPossibleCityBuildTasks: {
      _internal_mutable_possiblecitybuildtasks()->::PossibleCityBuildTasks::MergeFrom(from._internal_possiblecitybuildtasks());
      break;
    }
    case kPossibleTechs: {
      _internal_mutable_possibletechs()->::PossibleTechs::MergeFrom(from._internal_possibletechs());
      break;
    }
    case kDeleteUnit: {
      _internal_mutable_deleteunit()->::DeleteUnit::MergeFrom(from._internal_deleteunit());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnyServer::CopyFrom(const AnyServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnyServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyServer::IsInitialized() const {
  return true;
}

void AnyServer::InternalSwap(AnyServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(requestid_, other->requestid_);
  swap(packet_, other->packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[2]);
}

// ===================================================================

class ClientInfo::_Internal {
 public:
};

ClientInfo::ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClientInfo)
}

inline void ClientInfo::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:ClientInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientInfo::ArenaDtor(void* object) {
  ClientInfo* _this = reinterpret_cast< ClientInfo* >(object);
  (void)_this;
}
void ClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientInfo.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientInfo::GetClassData() const { return &_class_data_; }

void ClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ClientInfo *>(to)->MergeFrom(
      static_cast<const ClientInfo &>(from));
}


void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[3]);
}

// ===================================================================

class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  currentplayers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      currentplayers_(from.currentplayers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:ServerInfo)
}

inline void ServerInfo::SharedCtor() {
playerid_ = 0;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:ServerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerInfo::ArenaDtor(void* object) {
  ServerInfo* _this = reinterpret_cast< ServerInfo* >(object);
  (void)_this;
}
void ServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currentplayers_.Clear();
  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlayerInfo currentPlayers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_currentplayers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // repeated .PlayerInfo currentPlayers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_currentplayers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_currentplayers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerInfo currentPlayers = 2;
  total_size += 1UL * this->_internal_currentplayers_size();
  for (const auto& msg : this->currentplayers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerInfo::GetClassData() const { return &_class_data_; }

void ServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerInfo *>(to)->MergeFrom(
      static_cast<const ServerInfo &>(from));
}


void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  currentplayers_.MergeFrom(from.currentplayers_);
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  currentplayers_.InternalSwap(&other->currentplayers_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[4]);
}

// ===================================================================

class KickPlayer::_Internal {
 public:
};

KickPlayer::KickPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KickPlayer)
}
KickPlayer::KickPlayer(const KickPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:KickPlayer)
}

inline void KickPlayer::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0;
}

KickPlayer::~KickPlayer() {
  // @@protoc_insertion_point(destructor:KickPlayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KickPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KickPlayer::ArenaDtor(void* object) {
  KickPlayer* _this = reinterpret_cast< KickPlayer* >(object);
  (void)_this;
}
void KickPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KickPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KickPlayer.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KickPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KickPlayer.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickPlayer)
  return target;
}

size_t KickPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KickPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickPlayer::GetClassData() const { return &_class_data_; }

void KickPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<KickPlayer *>(to)->MergeFrom(
      static_cast<const KickPlayer &>(from));
}


void KickPlayer::MergeFrom(const KickPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickPlayer::CopyFrom(const KickPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayer::IsInitialized() const {
  return true;
}

void KickPlayer::InternalSwap(KickPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reason_, GetArenaForAllocation(),
      &other->reason_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[5]);
}

// ===================================================================

class SetLeader::_Internal {
 public:
};

SetLeader::SetLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetLeader)
}
SetLeader::SetLeader(const SetLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  civid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_civid().empty()) {
    civid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_civid(), 
      GetArenaForAllocation());
  }
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader().empty()) {
    leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leader(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SetLeader)
}

inline void SetLeader::SharedCtor() {
civid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetLeader::~SetLeader() {
  // @@protoc_insertion_point(destructor:SetLeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  civid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetLeader::ArenaDtor(void* object) {
  SetLeader* _this = reinterpret_cast< SetLeader* >(object);
  (void)_this;
}
void SetLeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:SetLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  civid_.ClearToEmpty();
  leader_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string civID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_civid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SetLeader.civID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_leader();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SetLeader.leader"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string civID = 1;
  if (!this->_internal_civid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_civid().data(), static_cast<int>(this->_internal_civid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetLeader.civID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_civid(), target);
  }

  // string leader = 2;
  if (!this->_internal_leader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetLeader.leader");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetLeader)
  return target;
}

size_t SetLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetLeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string civID = 1;
  if (!this->_internal_civid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_civid());
  }

  // string leader = 2;
  if (!this->_internal_leader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetLeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLeader::GetClassData() const { return &_class_data_; }

void SetLeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetLeader *>(to)->MergeFrom(
      static_cast<const SetLeader &>(from));
}


void SetLeader::MergeFrom(const SetLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetLeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_civid().empty()) {
    _internal_set_civid(from._internal_civid());
  }
  if (!from._internal_leader().empty()) {
    _internal_set_leader(from._internal_leader());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLeader::CopyFrom(const SetLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLeader::IsInitialized() const {
  return true;
}

void SetLeader::InternalSwap(SetLeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &civid_, GetArenaForAllocation(),
      &other->civid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leader_, GetArenaForAllocation(),
      &other->leader_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[6]);
}

// ===================================================================

class AdminStartGame::_Internal {
 public:
};

AdminStartGame::AdminStartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AdminStartGame)
}
AdminStartGame::AdminStartGame(const AdminStartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AdminStartGame)
}

inline void AdminStartGame::SharedCtor() {
}

AdminStartGame::~AdminStartGame() {
  // @@protoc_insertion_point(destructor:AdminStartGame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AdminStartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdminStartGame::ArenaDtor(void* object) {
  AdminStartGame* _this = reinterpret_cast< AdminStartGame* >(object);
  (void)_this;
}
void AdminStartGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminStartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdminStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminStartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminStartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminStartGame)
  return target;
}

size_t AdminStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminStartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminStartGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdminStartGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminStartGame::GetClassData() const { return &_class_data_; }

void AdminStartGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AdminStartGame *>(to)->MergeFrom(
      static_cast<const AdminStartGame &>(from));
}


void AdminStartGame::MergeFrom(const AdminStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminStartGame::CopyFrom(const AdminStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminStartGame::IsInitialized() const {
  return true;
}

void AdminStartGame::InternalSwap(AdminStartGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminStartGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[7]);
}

// ===================================================================

class LobbyError::_Internal {
 public:
};

LobbyError::LobbyError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LobbyError)
}
LobbyError::LobbyError(const LobbyError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:LobbyError)
}

inline void LobbyError::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LobbyError::~LobbyError() {
  // @@protoc_insertion_point(destructor:LobbyError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LobbyError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LobbyError::ArenaDtor(void* object) {
  LobbyError* _this = reinterpret_cast< LobbyError* >(object);
  (void)_this;
}
void LobbyError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LobbyError::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LobbyError.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LobbyError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LobbyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LobbyError.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyError)
  return target;
}

size_t LobbyError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LobbyError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyError::GetClassData() const { return &_class_data_; }

void LobbyError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LobbyError *>(to)->MergeFrom(
      static_cast<const LobbyError &>(from));
}


void LobbyError::MergeFrom(const LobbyError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyError::CopyFrom(const LobbyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyError::IsInitialized() const {
  return true;
}

void LobbyError::InternalSwap(LobbyError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[8]);
}

// ===================================================================

class StartGame::_Internal {
 public:
};

StartGame::StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StartGame)
}
StartGame::StartGame(const StartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StartGame)
}

inline void StartGame::SharedCtor() {
}

StartGame::~StartGame() {
  // @@protoc_insertion_point(destructor:StartGame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartGame::ArenaDtor(void* object) {
  StartGame* _this = reinterpret_cast< StartGame* >(object);
  (void)_this;
}
void StartGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:StartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartGame)
  return target;
}

size_t StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartGame::GetClassData() const { return &_class_data_; }

void StartGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StartGame *>(to)->MergeFrom(
      static_cast<const StartGame &>(from));
}


void StartGame::MergeFrom(const StartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartGame::CopyFrom(const StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGame::IsInitialized() const {
  return true;
}

void StartGame::InternalSwap(StartGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[9]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  civid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_civid().empty()) {
    civid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_civid(), 
      GetArenaForAllocation());
  }
  leadername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leadername().empty()) {
    leadername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leadername(), 
      GetArenaForAllocation());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&isadmin_) -
    reinterpret_cast<char*>(&score_)) + sizeof(isadmin_));
  // @@protoc_insertion_point(copy_constructor:PlayerInfo)
}

inline void PlayerInfo::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
civid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
leadername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isadmin_) -
    reinterpret_cast<char*>(&score_)) + sizeof(isadmin_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:PlayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  civid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leadername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfo::ArenaDtor(void* object) {
  PlayerInfo* _this = reinterpret_cast< PlayerInfo* >(object);
  (void)_this;
}
void PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  civid_.ClearToEmpty();
  leadername_.ClearToEmpty();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isadmin_) -
      reinterpret_cast<char*>(&score_)) + sizeof(isadmin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerInfo.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string civID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_civid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerInfo.civID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leaderName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_leadername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerInfo.leaderName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isAdmin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isadmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string civID = 2;
  if (!this->_internal_civid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_civid().data(), static_cast<int>(this->_internal_civid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerInfo.civID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_civid(), target);
  }

  // string leaderName = 3;
  if (!this->_internal_leadername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leadername().data(), static_cast<int>(this->_internal_leadername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerInfo.leaderName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_leadername(), target);
  }

  // int32 score = 4;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_score(), target);
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  // bool isAdmin = 6;
  if (this->_internal_isadmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isadmin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string civID = 2;
  if (!this->_internal_civid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_civid());
  }

  // string leaderName = 3;
  if (!this->_internal_leadername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leadername());
  }

  // int32 score = 4;
  if (this->_internal_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 id = 5;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool isAdmin = 6;
  if (this->_internal_isadmin() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }

void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlayerInfo *>(to)->MergeFrom(
      static_cast<const PlayerInfo &>(from));
}


void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_civid().empty()) {
    _internal_set_civid(from._internal_civid());
  }
  if (!from._internal_leadername().empty()) {
    _internal_set_leadername(from._internal_leadername());
  }
  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_isadmin() != 0) {
    _internal_set_isadmin(from._internal_isadmin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &civid_, GetArenaForAllocation(),
      &other->civid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leadername_, GetArenaForAllocation(),
      &other->leadername_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, isadmin_)
      + sizeof(PlayerInfo::isadmin_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[10]);
}

// ===================================================================

class UpdateGlobalData::_Internal {
 public:
};

UpdateGlobalData::UpdateGlobalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  players_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UpdateGlobalData)
}
UpdateGlobalData::UpdateGlobalData(const UpdateGlobalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turn_, &from.turn_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&turn_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:UpdateGlobalData)
}

inline void UpdateGlobalData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&turn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&turn_)) + sizeof(playerid_));
}

UpdateGlobalData::~UpdateGlobalData() {
  // @@protoc_insertion_point(destructor:UpdateGlobalData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateGlobalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateGlobalData::ArenaDtor(void* object) {
  UpdateGlobalData* _this = reinterpret_cast< UpdateGlobalData* >(object);
  (void)_this;
}
void UpdateGlobalData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateGlobalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateGlobalData::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateGlobalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  ::memset(&turn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&turn_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateGlobalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PlayerInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 turn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Era era = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_era(static_cast<::Era>(val));
        } else goto handle_unusual;
        continue;
      // int32 playerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGlobalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateGlobalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerInfo players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  // int32 turn = 2;
  if (this->_internal_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_turn(), target);
  }

  // .Era era = 3;
  if (this->_internal_era() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_era(), target);
  }

  // int32 playerID = 4;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateGlobalData)
  return target;
}

size_t UpdateGlobalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateGlobalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 turn = 2;
  if (this->_internal_turn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turn());
  }

  // .Era era = 3;
  if (this->_internal_era() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_era());
  }

  // int32 playerID = 4;
  if (this->_internal_playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateGlobalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateGlobalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateGlobalData::GetClassData() const { return &_class_data_; }

void UpdateGlobalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateGlobalData *>(to)->MergeFrom(
      static_cast<const UpdateGlobalData &>(from));
}


void UpdateGlobalData::MergeFrom(const UpdateGlobalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateGlobalData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from._internal_turn() != 0) {
    _internal_set_turn(from._internal_turn());
  }
  if (from._internal_era() != 0) {
    _internal_set_era(from._internal_era());
  }
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateGlobalData::CopyFrom(const UpdateGlobalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateGlobalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGlobalData::IsInitialized() const {
  return true;
}

void UpdateGlobalData::InternalSwap(UpdateGlobalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateGlobalData, playerid_)
      + sizeof(UpdateGlobalData::playerid_)
      - PROTOBUF_FIELD_OFFSET(UpdateGlobalData, turn_)>(
          reinterpret_cast<char*>(&turn_),
          reinterpret_cast<char*>(&other->turn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGlobalData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[11]);
}

// ===================================================================

class Improvement::_Internal {
 public:
};

Improvement::Improvement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Improvement)
}
Improvement::Improvement(const Improvement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  cottagelevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cottagelevel().empty()) {
    cottagelevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cottagelevel(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Improvement)
}

inline void Improvement::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cottagelevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Improvement::~Improvement() {
  // @@protoc_insertion_point(destructor:Improvement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Improvement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cottagelevel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Improvement::ArenaDtor(void* object) {
  Improvement* _this = reinterpret_cast< Improvement* >(object);
  (void)_this;
}
void Improvement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Improvement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Improvement::Clear() {
// @@protoc_insertion_point(message_clear_start:Improvement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  cottagelevel_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Improvement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Improvement.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cottageLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cottagelevel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Improvement.cottageLevel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Improvement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Improvement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Improvement.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string cottageLevel = 2;
  if (!this->_internal_cottagelevel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cottagelevel().data(), static_cast<int>(this->_internal_cottagelevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Improvement.cottageLevel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cottagelevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Improvement)
  return target;
}

size_t Improvement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Improvement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string cottageLevel = 2;
  if (!this->_internal_cottagelevel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cottagelevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Improvement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Improvement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Improvement::GetClassData() const { return &_class_data_; }

void Improvement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Improvement *>(to)->MergeFrom(
      static_cast<const Improvement &>(from));
}


void Improvement::MergeFrom(const Improvement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Improvement)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_cottagelevel().empty()) {
    _internal_set_cottagelevel(from._internal_cottagelevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Improvement::CopyFrom(const Improvement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Improvement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Improvement::IsInitialized() const {
  return true;
}

void Improvement::InternalSwap(Improvement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cottagelevel_, GetArenaForAllocation(),
      &other->cottagelevel_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Improvement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[12]);
}

// ===================================================================

class Yield::_Internal {
 public:
};

Yield::Yield(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Yield)
}
Yield::Yield(const Yield& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hammers_, &from.hammers_,
    static_cast<size_t>(reinterpret_cast<char*>(&food_) -
    reinterpret_cast<char*>(&hammers_)) + sizeof(food_));
  // @@protoc_insertion_point(copy_constructor:Yield)
}

inline void Yield::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hammers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&food_) -
    reinterpret_cast<char*>(&hammers_)) + sizeof(food_));
}

Yield::~Yield() {
  // @@protoc_insertion_point(destructor:Yield)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Yield::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Yield::ArenaDtor(void* object) {
  Yield* _this = reinterpret_cast< Yield* >(object);
  (void)_this;
}
void Yield::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Yield::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Yield::Clear() {
// @@protoc_insertion_point(message_clear_start:Yield)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hammers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&food_) -
      reinterpret_cast<char*>(&hammers_)) + sizeof(food_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Yield::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hammers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hammers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 commerce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          commerce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 food = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          food_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Yield::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Yield)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hammers = 1;
  if (this->_internal_hammers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hammers(), target);
  }

  // int32 commerce = 2;
  if (this->_internal_commerce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_commerce(), target);
  }

  // int32 food = 3;
  if (this->_internal_food() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_food(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Yield)
  return target;
}

size_t Yield::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Yield)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hammers = 1;
  if (this->_internal_hammers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hammers());
  }

  // int32 commerce = 2;
  if (this->_internal_commerce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commerce());
  }

  // int32 food = 3;
  if (this->_internal_food() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_food());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Yield::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Yield::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Yield::GetClassData() const { return &_class_data_; }

void Yield::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Yield *>(to)->MergeFrom(
      static_cast<const Yield &>(from));
}


void Yield::MergeFrom(const Yield& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Yield)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hammers() != 0) {
    _internal_set_hammers(from._internal_hammers());
  }
  if (from._internal_commerce() != 0) {
    _internal_set_commerce(from._internal_commerce());
  }
  if (from._internal_food() != 0) {
    _internal_set_food(from._internal_food());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Yield::CopyFrom(const Yield& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Yield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Yield::IsInitialized() const {
  return true;
}

void Yield::InternalSwap(Yield* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Yield, food_)
      + sizeof(Yield::food_)
      - PROTOBUF_FIELD_OFFSET(Yield, hammers_)>(
          reinterpret_cast<char*>(&hammers_),
          reinterpret_cast<char*>(&other->hammers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Yield::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[13]);
}

// ===================================================================

class Tile::_Internal {
 public:
  static const ::Yield& yield(const Tile* msg);
};

const ::Yield&
Tile::_Internal::yield(const Tile* msg) {
  return *msg->yield_;
}
Tile::Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  improvements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Tile)
}
Tile::Tile(const Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      improvements_(from.improvements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourceid().empty()) {
    resourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resourceid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_yield()) {
    yield_ = new ::Yield(*from.yield_);
  } else {
    yield_ = nullptr;
  }
  ::memcpy(&terrain_, &from.terrain_,
    static_cast<size_t>(reinterpret_cast<char*>(&ownerid_) -
    reinterpret_cast<char*>(&terrain_)) + sizeof(ownerid_));
  // @@protoc_insertion_point(copy_constructor:Tile)
}

inline void Tile::SharedCtor() {
resourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&yield_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ownerid_) -
    reinterpret_cast<char*>(&yield_)) + sizeof(ownerid_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:Tile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  resourceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete yield_;
}

void Tile::ArenaDtor(void* object) {
  Tile* _this = reinterpret_cast< Tile* >(object);
  (void)_this;
}
void Tile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  improvements_.Clear();
  resourceid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && yield_ != nullptr) {
    delete yield_;
  }
  yield_ = nullptr;
  ::memset(&terrain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ownerid_) -
      reinterpret_cast<char*>(&terrain_)) + sizeof(ownerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Terrain terrain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_terrain(static_cast<::Terrain>(val));
        } else goto handle_unusual;
        continue;
      // bool forested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          forested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hilled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Improvement improvements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_improvements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .Yield yield = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ownerID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasOwner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hasowner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isWorked = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          isworked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_resourceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Tile.resourceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Terrain terrain = 1;
  if (this->_internal_terrain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_terrain(), target);
  }

  // bool forested = 2;
  if (this->_internal_forested() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_forested(), target);
  }

  // bool hilled = 3;
  if (this->_internal_hilled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hilled(), target);
  }

  // repeated .Improvement improvements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_improvements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_improvements(i), target, stream);
  }

  // .Yield yield = 5;
  if (this->_internal_has_yield()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::yield(this), target, stream);
  }

  // int32 ownerID = 6;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ownerid(), target);
  }

  // bool hasOwner = 7;
  if (this->_internal_hasowner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hasowner(), target);
  }

  // bool isWorked = 8;
  if (this->_internal_isworked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_isworked(), target);
  }

  // string resourceID = 9;
  if (!this->_internal_resourceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourceid().data(), static_cast<int>(this->_internal_resourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tile.resourceID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_resourceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tile)
  return target;
}

size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Improvement improvements = 4;
  total_size += 1UL * this->_internal_improvements_size();
  for (const auto& msg : this->improvements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string resourceID = 9;
  if (!this->_internal_resourceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourceid());
  }

  // .Yield yield = 5;
  if (this->_internal_has_yield()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yield_);
  }

  // .Terrain terrain = 1;
  if (this->_internal_terrain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_terrain());
  }

  // bool forested = 2;
  if (this->_internal_forested() != 0) {
    total_size += 1 + 1;
  }

  // bool hilled = 3;
  if (this->_internal_hilled() != 0) {
    total_size += 1 + 1;
  }

  // bool hasOwner = 7;
  if (this->_internal_hasowner() != 0) {
    total_size += 1 + 1;
  }

  // bool isWorked = 8;
  if (this->_internal_isworked() != 0) {
    total_size += 1 + 1;
  }

  // int32 ownerID = 6;
  if (this->_internal_ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ownerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tile::GetClassData() const { return &_class_data_; }

void Tile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Tile *>(to)->MergeFrom(
      static_cast<const Tile &>(from));
}


void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  improvements_.MergeFrom(from.improvements_);
  if (!from._internal_resourceid().empty()) {
    _internal_set_resourceid(from._internal_resourceid());
  }
  if (from._internal_has_yield()) {
    _internal_mutable_yield()->::Yield::MergeFrom(from._internal_yield());
  }
  if (from._internal_terrain() != 0) {
    _internal_set_terrain(from._internal_terrain());
  }
  if (from._internal_forested() != 0) {
    _internal_set_forested(from._internal_forested());
  }
  if (from._internal_hilled() != 0) {
    _internal_set_hilled(from._internal_hilled());
  }
  if (from._internal_hasowner() != 0) {
    _internal_set_hasowner(from._internal_hasowner());
  }
  if (from._internal_isworked() != 0) {
    _internal_set_isworked(from._internal_isworked());
  }
  if (from._internal_ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  return true;
}

void Tile::InternalSwap(Tile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  improvements_.InternalSwap(&other->improvements_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resourceid_, GetArenaForAllocation(),
      &other->resourceid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile, ownerid_)
      + sizeof(Tile::ownerid_)
      - PROTOBUF_FIELD_OFFSET(Tile, yield_)>(
          reinterpret_cast<char*>(&yield_),
          reinterpret_cast<char*>(&other->yield_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[14]);
}

// ===================================================================

class UpdateMap::_Internal {
 public:
};

UpdateMap::UpdateMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tiles_(arena),
  visibility_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UpdateMap)
}
UpdateMap::UpdateMap(const UpdateMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tiles_(from.tiles_),
      visibility_(from.visibility_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:UpdateMap)
}

inline void UpdateMap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

UpdateMap::~UpdateMap() {
  // @@protoc_insertion_point(destructor:UpdateMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateMap::ArenaDtor(void* object) {
  UpdateMap* _this = reinterpret_cast< UpdateMap* >(object);
  (void)_this;
}
void UpdateMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateMap::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  visibility_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tile tiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Visibility visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_visibility(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_visibility(static_cast<::Visibility>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // repeated .Tile tiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tiles(i), target, stream);
  }

  // repeated .Visibility visibility = 4;
  {
    int byte_size = _visibility_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, visibility_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateMap)
  return target;
}

size_t UpdateMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tile tiles = 3;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Visibility visibility = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_visibility_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_visibility(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _visibility_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMap::GetClassData() const { return &_class_data_; }

void UpdateMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateMap *>(to)->MergeFrom(
      static_cast<const UpdateMap &>(from));
}


void UpdateMap::MergeFrom(const UpdateMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateMap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  visibility_.MergeFrom(from.visibility_);
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateMap::CopyFrom(const UpdateMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMap::IsInitialized() const {
  return true;
}

void UpdateMap::InternalSwap(UpdateMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
  visibility_.InternalSwap(&other->visibility_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateMap, height_)
      + sizeof(UpdateMap::height_)
      - PROTOBUF_FIELD_OFFSET(UpdateMap, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[15]);
}

// ===================================================================

class UnitBuildTask::_Internal {
 public:
};

UnitBuildTask::UnitBuildTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UnitBuildTask)
}
UnitBuildTask::UnitBuildTask(const UnitBuildTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unitkindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unitkindid().empty()) {
    unitkindid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unitkindid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UnitBuildTask)
}

inline void UnitBuildTask::SharedCtor() {
unitkindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitBuildTask::~UnitBuildTask() {
  // @@protoc_insertion_point(destructor:UnitBuildTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnitBuildTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unitkindid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitBuildTask::ArenaDtor(void* object) {
  UnitBuildTask* _this = reinterpret_cast< UnitBuildTask* >(object);
  (void)_this;
}
void UnitBuildTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitBuildTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnitBuildTask::Clear() {
// @@protoc_insertion_point(message_clear_start:UnitBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unitkindid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitBuildTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unitKindID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unitkindid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnitBuildTask.unitKindID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitBuildTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnitBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string unitKindID = 1;
  if (!this->_internal_unitkindid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unitkindid().data(), static_cast<int>(this->_internal_unitkindid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnitBuildTask.unitKindID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unitkindid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnitBuildTask)
  return target;
}

size_t UnitBuildTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnitBuildTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unitKindID = 1;
  if (!this->_internal_unitkindid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unitkindid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnitBuildTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnitBuildTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnitBuildTask::GetClassData() const { return &_class_data_; }

void UnitBuildTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UnitBuildTask *>(to)->MergeFrom(
      static_cast<const UnitBuildTask &>(from));
}


void UnitBuildTask::MergeFrom(const UnitBuildTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnitBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unitkindid().empty()) {
    _internal_set_unitkindid(from._internal_unitkindid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnitBuildTask::CopyFrom(const UnitBuildTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnitBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitBuildTask::IsInitialized() const {
  return true;
}

void UnitBuildTask::InternalSwap(UnitBuildTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unitkindid_, GetArenaForAllocation(),
      &other->unitkindid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitBuildTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[16]);
}

// ===================================================================

class BuildingBuildTask::_Internal {
 public:
};

BuildingBuildTask::BuildingBuildTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BuildingBuildTask)
}
BuildingBuildTask::BuildingBuildTask(const BuildingBuildTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buildingname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buildingname().empty()) {
    buildingname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buildingname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:BuildingBuildTask)
}

inline void BuildingBuildTask::SharedCtor() {
buildingname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BuildingBuildTask::~BuildingBuildTask() {
  // @@protoc_insertion_point(destructor:BuildingBuildTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildingBuildTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buildingname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuildingBuildTask::ArenaDtor(void* object) {
  BuildingBuildTask* _this = reinterpret_cast< BuildingBuildTask* >(object);
  (void)_this;
}
void BuildingBuildTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildingBuildTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildingBuildTask::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildingBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildingname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildingBuildTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string buildingName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buildingname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BuildingBuildTask.buildingName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildingBuildTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildingBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string buildingName = 1;
  if (!this->_internal_buildingname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buildingname().data(), static_cast<int>(this->_internal_buildingname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildingBuildTask.buildingName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_buildingname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildingBuildTask)
  return target;
}

size_t BuildingBuildTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildingBuildTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string buildingName = 1;
  if (!this->_internal_buildingname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildingname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildingBuildTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildingBuildTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildingBuildTask::GetClassData() const { return &_class_data_; }

void BuildingBuildTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildingBuildTask *>(to)->MergeFrom(
      static_cast<const BuildingBuildTask &>(from));
}


void BuildingBuildTask::MergeFrom(const BuildingBuildTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildingBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buildingname().empty()) {
    _internal_set_buildingname(from._internal_buildingname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildingBuildTask::CopyFrom(const BuildingBuildTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildingBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingBuildTask::IsInitialized() const {
  return true;
}

void BuildingBuildTask::InternalSwap(BuildingBuildTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buildingname_, GetArenaForAllocation(),
      &other->buildingname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildingBuildTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[17]);
}

// ===================================================================

class BuildTaskKind::_Internal {
 public:
  static const ::UnitBuildTask& unit(const BuildTaskKind* msg);
  static const ::BuildingBuildTask& building(const BuildTaskKind* msg);
};

const ::UnitBuildTask&
BuildTaskKind::_Internal::unit(const BuildTaskKind* msg) {
  return *msg->task_.unit_;
}
const ::BuildingBuildTask&
BuildTaskKind::_Internal::building(const BuildTaskKind* msg) {
  return *msg->task_.building_;
}
void BuildTaskKind::set_allocated_unit(::UnitBuildTask* unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UnitBuildTask>::GetOwningArena(unit);
    if (message_arena != submessage_arena) {
      unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    set_has_unit();
    task_.unit_ = unit;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildTaskKind.unit)
}
void BuildTaskKind::set_allocated_building(::BuildingBuildTask* building) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (building) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::BuildingBuildTask>::GetOwningArena(building);
    if (message_arena != submessage_arena) {
      building = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, building, submessage_arena);
    }
    set_has_building();
    task_.building_ = building;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildTaskKind.building)
}
BuildTaskKind::BuildTaskKind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BuildTaskKind)
}
BuildTaskKind::BuildTaskKind(const BuildTaskKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_task();
  switch (from.task_case()) {
    case kUnit: {
      _internal_mutable_unit()->::UnitBuildTask::MergeFrom(from._internal_unit());
      break;
    }
    case kBuilding: {
      _internal_mutable_building()->::BuildingBuildTask::MergeFrom(from._internal_building());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:BuildTaskKind)
}

inline void BuildTaskKind::SharedCtor() {
clear_has_task();
}

BuildTaskKind::~BuildTaskKind() {
  // @@protoc_insertion_point(destructor:BuildTaskKind)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildTaskKind::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_task()) {
    clear_task();
  }
}

void BuildTaskKind::ArenaDtor(void* object) {
  BuildTaskKind* _this = reinterpret_cast< BuildTaskKind* >(object);
  (void)_this;
}
void BuildTaskKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildTaskKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildTaskKind::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:BuildTaskKind)
  switch (task_case()) {
    case kUnit: {
      if (GetArenaForAllocation() == nullptr) {
        delete task_.unit_;
      }
      break;
    }
    case kBuilding: {
      if (GetArenaForAllocation() == nullptr) {
        delete task_.building_;
      }
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void BuildTaskKind::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildTaskKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_task();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildTaskKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UnitBuildTask unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildingBuildTask building = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_building(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildTaskKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildTaskKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UnitBuildTask unit = 1;
  if (_internal_has_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::unit(this), target, stream);
  }

  // .BuildingBuildTask building = 2;
  if (_internal_has_building()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::building(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildTaskKind)
  return target;
}

size_t BuildTaskKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildTaskKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (task_case()) {
    // .UnitBuildTask unit = 1;
    case kUnit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.unit_);
      break;
    }
    // .BuildingBuildTask building = 2;
    case kBuilding: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.building_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildTaskKind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildTaskKind::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildTaskKind::GetClassData() const { return &_class_data_; }

void BuildTaskKind::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildTaskKind *>(to)->MergeFrom(
      static_cast<const BuildTaskKind &>(from));
}


void BuildTaskKind::MergeFrom(const BuildTaskKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildTaskKind)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.task_case()) {
    case kUnit: {
      _internal_mutable_unit()->::UnitBuildTask::MergeFrom(from._internal_unit());
      break;
    }
    case kBuilding: {
      _internal_mutable_building()->::BuildingBuildTask::MergeFrom(from._internal_building());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildTaskKind::CopyFrom(const BuildTaskKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildTaskKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildTaskKind::IsInitialized() const {
  return true;
}

void BuildTaskKind::InternalSwap(BuildTaskKind* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(task_, other->task_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildTaskKind::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[18]);
}

// ===================================================================

class BuildTask::_Internal {
 public:
  static const ::BuildTaskKind& kind(const BuildTask* msg);
};

const ::BuildTaskKind&
BuildTask::_Internal::kind(const BuildTask* msg) {
  return *msg->kind_;
}
BuildTask::BuildTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BuildTask)
}
BuildTask::BuildTask(const BuildTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kind()) {
    kind_ = new ::BuildTaskKind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:BuildTask)
}

inline void BuildTask::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kind_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(cost_));
}

BuildTask::~BuildTask() {
  // @@protoc_insertion_point(destructor:BuildTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuildTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kind_;
}

void BuildTask::ArenaDtor(void* object) {
  BuildTask* _this = reinterpret_cast< BuildTask* >(object);
  (void)_this;
}
void BuildTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuildTask::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BuildTaskKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kind(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BuildTaskKind kind = 1;
  if (this->_internal_has_kind()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kind(this), target, stream);
  }

  // int32 progress = 2;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_progress(), target);
  }

  // int32 cost = 3;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildTask)
  return target;
}

size_t BuildTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BuildTaskKind kind = 1;
  if (this->_internal_has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  // int32 progress = 2;
  if (this->_internal_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress());
  }

  // int32 cost = 3;
  if (this->_internal_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuildTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildTask::GetClassData() const { return &_class_data_; }

void BuildTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuildTask *>(to)->MergeFrom(
      static_cast<const BuildTask &>(from));
}


void BuildTask::MergeFrom(const BuildTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kind()) {
    _internal_mutable_kind()->::BuildTaskKind::MergeFrom(from._internal_kind());
  }
  if (from._internal_progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
  if (from._internal_cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildTask::CopyFrom(const BuildTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildTask::IsInitialized() const {
  return true;
}

void BuildTask::InternalSwap(BuildTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildTask, cost_)
      + sizeof(BuildTask::cost_)
      - PROTOBUF_FIELD_OFFSET(BuildTask, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[19]);
}

// ===================================================================

class UpdateCity::_Internal {
 public:
  static const ::Pos& pos(const UpdateCity* msg);
  static const ::BuildTask& buildtask(const UpdateCity* msg);
  static const ::Yield& yield(const UpdateCity* msg);
};

const ::Pos&
UpdateCity::_Internal::pos(const UpdateCity* msg) {
  return *msg->pos_;
}
const ::BuildTask&
UpdateCity::_Internal::buildtask(const UpdateCity* msg) {
  return *msg->buildtask_;
}
const ::Yield&
UpdateCity::_Internal::yield(const UpdateCity* msg) {
  return *msg->yield_;
}
UpdateCity::UpdateCity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buildingnames_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UpdateCity)
}
UpdateCity::UpdateCity(const UpdateCity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buildingnames_(from.buildingnames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_buildtask()) {
    buildtask_ = new ::BuildTask(*from.buildtask_);
  } else {
    buildtask_ = nullptr;
  }
  if (from._internal_has_yield()) {
    yield_ = new ::Yield(*from.yield_);
  } else {
    yield_ = nullptr;
  }
  ::memcpy(&ownerid_, &from.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscapital_) -
    reinterpret_cast<char*>(&ownerid_)) + sizeof(iscapital_));
  // @@protoc_insertion_point(copy_constructor:UpdateCity)
}

inline void UpdateCity::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iscapital_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(iscapital_));
}

UpdateCity::~UpdateCity() {
  // @@protoc_insertion_point(destructor:UpdateCity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateCity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete buildtask_;
  if (this != internal_default_instance()) delete yield_;
}

void UpdateCity::ArenaDtor(void* object) {
  UpdateCity* _this = reinterpret_cast< UpdateCity* >(object);
  (void)_this;
}
void UpdateCity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateCity::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateCity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildingnames_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && buildtask_ != nullptr) {
    delete buildtask_;
  }
  buildtask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && yield_ != nullptr) {
    delete yield_;
  }
  yield_ = nullptr;
  ::memset(&ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscapital_) -
      reinterpret_cast<char*>(&ownerid_)) + sizeof(iscapital_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateCity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ownerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildTask buildTask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildtask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Yield yield = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 culture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          culture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cultureNeeded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cultureneeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string buildingNames = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buildingnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateCity.buildingNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 population = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          population_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 storedFood = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          storedfood_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 foodNeededForGrowth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          foodneededforgrowth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 consumedFood = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          consumedfood_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isCapital = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          iscapital_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateCity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pos pos = 1;
  if (this->_internal_has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateCity.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 ownerID = 3;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ownerid(), target);
  }

  // .BuildTask buildTask = 4;
  if (this->_internal_has_buildtask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::buildtask(this), target, stream);
  }

  // .Yield yield = 5;
  if (this->_internal_has_yield()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::yield(this), target, stream);
  }

  // int32 culture = 6;
  if (this->_internal_culture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_culture(), target);
  }

  // int32 cultureNeeded = 7;
  if (this->_internal_cultureneeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cultureneeded(), target);
  }

  // int32 id = 8;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_id(), target);
  }

  // repeated string buildingNames = 9;
  for (int i = 0, n = this->_internal_buildingnames_size(); i < n; i++) {
    const auto& s = this->_internal_buildingnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateCity.buildingNames");
    target = stream->WriteString(9, s, target);
  }

  // int32 population = 10;
  if (this->_internal_population() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_population(), target);
  }

  // int32 storedFood = 11;
  if (this->_internal_storedfood() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_storedfood(), target);
  }

  // int32 foodNeededForGrowth = 12;
  if (this->_internal_foodneededforgrowth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_foodneededforgrowth(), target);
  }

  // int32 consumedFood = 13;
  if (this->_internal_consumedfood() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_consumedfood(), target);
  }

  // bool isCapital = 14;
  if (this->_internal_iscapital() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_iscapital(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateCity)
  return target;
}

size_t UpdateCity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateCity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string buildingNames = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buildingnames_.size());
  for (int i = 0, n = buildingnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      buildingnames_.Get(i));
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Pos pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .BuildTask buildTask = 4;
  if (this->_internal_has_buildtask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buildtask_);
  }

  // .Yield yield = 5;
  if (this->_internal_has_yield()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yield_);
  }

  // int32 ownerID = 3;
  if (this->_internal_ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ownerid());
  }

  // int32 culture = 6;
  if (this->_internal_culture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_culture());
  }

  // int32 cultureNeeded = 7;
  if (this->_internal_cultureneeded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cultureneeded());
  }

  // int32 id = 8;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 population = 10;
  if (this->_internal_population() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_population());
  }

  // int32 storedFood = 11;
  if (this->_internal_storedfood() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_storedfood());
  }

  // int32 foodNeededForGrowth = 12;
  if (this->_internal_foodneededforgrowth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_foodneededforgrowth());
  }

  // int32 consumedFood = 13;
  if (this->_internal_consumedfood() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_consumedfood());
  }

  // bool isCapital = 14;
  if (this->_internal_iscapital() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateCity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateCity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateCity::GetClassData() const { return &_class_data_; }

void UpdateCity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateCity *>(to)->MergeFrom(
      static_cast<const UpdateCity &>(from));
}


void UpdateCity::MergeFrom(const UpdateCity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateCity)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildingnames_.MergeFrom(from.buildingnames_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::Pos::MergeFrom(from._internal_pos());
  }
  if (from._internal_has_buildtask()) {
    _internal_mutable_buildtask()->::BuildTask::MergeFrom(from._internal_buildtask());
  }
  if (from._internal_has_yield()) {
    _internal_mutable_yield()->::Yield::MergeFrom(from._internal_yield());
  }
  if (from._internal_ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
  if (from._internal_culture() != 0) {
    _internal_set_culture(from._internal_culture());
  }
  if (from._internal_cultureneeded() != 0) {
    _internal_set_cultureneeded(from._internal_cultureneeded());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_population() != 0) {
    _internal_set_population(from._internal_population());
  }
  if (from._internal_storedfood() != 0) {
    _internal_set_storedfood(from._internal_storedfood());
  }
  if (from._internal_foodneededforgrowth() != 0) {
    _internal_set_foodneededforgrowth(from._internal_foodneededforgrowth());
  }
  if (from._internal_consumedfood() != 0) {
    _internal_set_consumedfood(from._internal_consumedfood());
  }
  if (from._internal_iscapital() != 0) {
    _internal_set_iscapital(from._internal_iscapital());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateCity::CopyFrom(const UpdateCity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateCity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCity::IsInitialized() const {
  return true;
}

void UpdateCity::InternalSwap(UpdateCity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buildingnames_.InternalSwap(&other->buildingnames_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCity, iscapital_)
      + sizeof(UpdateCity::iscapital_)
      - PROTOBUF_FIELD_OFFSET(UpdateCity, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[20]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  positions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Path)
}

inline void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_positions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_positions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 positions = 1;
  {
    int byte_size = _positions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_positions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 positions = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->positions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _positions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Path)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[21]);
}

// ===================================================================

class FoundCityCapability::_Internal {
 public:
};

FoundCityCapability::FoundCityCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FoundCityCapability)
}
FoundCityCapability::FoundCityCapability(const FoundCityCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FoundCityCapability)
}

inline void FoundCityCapability::SharedCtor() {
}

FoundCityCapability::~FoundCityCapability() {
  // @@protoc_insertion_point(destructor:FoundCityCapability)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FoundCityCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FoundCityCapability::ArenaDtor(void* object) {
  FoundCityCapability* _this = reinterpret_cast< FoundCityCapability* >(object);
  (void)_this;
}
void FoundCityCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FoundCityCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FoundCityCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:FoundCityCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FoundCityCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FoundCityCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FoundCityCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FoundCityCapability)
  return target;
}

size_t FoundCityCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FoundCityCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FoundCityCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FoundCityCapability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FoundCityCapability::GetClassData() const { return &_class_data_; }

void FoundCityCapability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FoundCityCapability *>(to)->MergeFrom(
      static_cast<const FoundCityCapability &>(from));
}


void FoundCityCapability::MergeFrom(const FoundCityCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FoundCityCapability)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FoundCityCapability::CopyFrom(const FoundCityCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FoundCityCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoundCityCapability::IsInitialized() const {
  return true;
}

void FoundCityCapability::InternalSwap(FoundCityCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FoundCityCapability::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[22]);
}

// ===================================================================

class WorkerTaskImprovement::_Internal {
 public:
};

WorkerTaskImprovement::WorkerTaskImprovement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WorkerTaskImprovement)
}
WorkerTaskImprovement::WorkerTaskImprovement(const WorkerTaskImprovement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  improvementid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_improvementid().empty()) {
    improvementid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_improvementid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:WorkerTaskImprovement)
}

inline void WorkerTaskImprovement::SharedCtor() {
improvementid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkerTaskImprovement::~WorkerTaskImprovement() {
  // @@protoc_insertion_point(destructor:WorkerTaskImprovement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkerTaskImprovement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  improvementid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkerTaskImprovement::ArenaDtor(void* object) {
  WorkerTaskImprovement* _this = reinterpret_cast< WorkerTaskImprovement* >(object);
  (void)_this;
}
void WorkerTaskImprovement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerTaskImprovement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerTaskImprovement::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerTaskImprovement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  improvementid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerTaskImprovement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string improvementID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_improvementid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerTaskImprovement.improvementID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerTaskImprovement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerTaskImprovement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string improvementID = 1;
  if (!this->_internal_improvementid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_improvementid().data(), static_cast<int>(this->_internal_improvementid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerTaskImprovement.improvementID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_improvementid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerTaskImprovement)
  return target;
}

size_t WorkerTaskImprovement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerTaskImprovement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string improvementID = 1;
  if (!this->_internal_improvementid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_improvementid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerTaskImprovement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkerTaskImprovement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerTaskImprovement::GetClassData() const { return &_class_data_; }

void WorkerTaskImprovement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkerTaskImprovement *>(to)->MergeFrom(
      static_cast<const WorkerTaskImprovement &>(from));
}


void WorkerTaskImprovement::MergeFrom(const WorkerTaskImprovement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerTaskImprovement)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_improvementid().empty()) {
    _internal_set_improvementid(from._internal_improvementid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerTaskImprovement::CopyFrom(const WorkerTaskImprovement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerTaskImprovement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTaskImprovement::IsInitialized() const {
  return true;
}

void WorkerTaskImprovement::InternalSwap(WorkerTaskImprovement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &improvementid_, GetArenaForAllocation(),
      &other->improvementid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerTaskImprovement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[23]);
}

// ===================================================================

class WorkerTaskKind::_Internal {
 public:
  static const ::WorkerTaskImprovement& buildimprovement(const WorkerTaskKind* msg);
};

const ::WorkerTaskImprovement&
WorkerTaskKind::_Internal::buildimprovement(const WorkerTaskKind* msg) {
  return *msg->kind_.buildimprovement_;
}
void WorkerTaskKind::set_allocated_buildimprovement(::WorkerTaskImprovement* buildimprovement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (buildimprovement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::WorkerTaskImprovement>::GetOwningArena(buildimprovement);
    if (message_arena != submessage_arena) {
      buildimprovement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buildimprovement, submessage_arena);
    }
    set_has_buildimprovement();
    kind_.buildimprovement_ = buildimprovement;
  }
  // @@protoc_insertion_point(field_set_allocated:WorkerTaskKind.buildImprovement)
}
WorkerTaskKind::WorkerTaskKind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WorkerTaskKind)
}
WorkerTaskKind::WorkerTaskKind(const WorkerTaskKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kBuildImprovement: {
      _internal_mutable_buildimprovement()->::WorkerTaskImprovement::MergeFrom(from._internal_buildimprovement());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WorkerTaskKind)
}

inline void WorkerTaskKind::SharedCtor() {
clear_has_kind();
}

WorkerTaskKind::~WorkerTaskKind() {
  // @@protoc_insertion_point(destructor:WorkerTaskKind)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkerTaskKind::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void WorkerTaskKind::ArenaDtor(void* object) {
  WorkerTaskKind* _this = reinterpret_cast< WorkerTaskKind* >(object);
  (void)_this;
}
void WorkerTaskKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerTaskKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerTaskKind::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:WorkerTaskKind)
  switch (kind_case()) {
    case kBuildImprovement: {
      if (GetArenaForAllocation() == nullptr) {
        delete kind_.buildimprovement_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void WorkerTaskKind::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerTaskKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerTaskKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .WorkerTaskImprovement buildImprovement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildimprovement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerTaskKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerTaskKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WorkerTaskImprovement buildImprovement = 1;
  if (_internal_has_buildimprovement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::buildimprovement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerTaskKind)
  return target;
}

size_t WorkerTaskKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerTaskKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .WorkerTaskImprovement buildImprovement = 1;
    case kBuildImprovement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.buildimprovement_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerTaskKind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkerTaskKind::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerTaskKind::GetClassData() const { return &_class_data_; }

void WorkerTaskKind::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkerTaskKind *>(to)->MergeFrom(
      static_cast<const WorkerTaskKind &>(from));
}


void WorkerTaskKind::MergeFrom(const WorkerTaskKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerTaskKind)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kBuildImprovement: {
      _internal_mutable_buildimprovement()->::WorkerTaskImprovement::MergeFrom(from._internal_buildimprovement());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerTaskKind::CopyFrom(const WorkerTaskKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerTaskKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTaskKind::IsInitialized() const {
  return true;
}

void WorkerTaskKind::InternalSwap(WorkerTaskKind* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerTaskKind::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[24]);
}

// ===================================================================

class WorkerTask::_Internal {
 public:
  static const ::WorkerTaskKind& kind(const WorkerTask* msg);
};

const ::WorkerTaskKind&
WorkerTask::_Internal::kind(const WorkerTask* msg) {
  return *msg->kind_;
}
WorkerTask::WorkerTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WorkerTask)
}
WorkerTask::WorkerTask(const WorkerTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  presentparticiple_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_presentparticiple().empty()) {
    presentparticiple_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_presentparticiple(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_kind()) {
    kind_ = new ::WorkerTaskKind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  turnsleft_ = from.turnsleft_;
  // @@protoc_insertion_point(copy_constructor:WorkerTask)
}

inline void WorkerTask::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
presentparticiple_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kind_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&turnsleft_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(turnsleft_));
}

WorkerTask::~WorkerTask() {
  // @@protoc_insertion_point(destructor:WorkerTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkerTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  presentparticiple_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kind_;
}

void WorkerTask::ArenaDtor(void* object) {
  WorkerTask* _this = reinterpret_cast< WorkerTask* >(object);
  (void)_this;
}
void WorkerTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerTask::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  presentparticiple_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  turnsleft_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerTask.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 turnsLeft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          turnsleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WorkerTaskKind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kind(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string presentParticiple = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_presentparticiple();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerTask.presentParticiple"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerTask.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 turnsLeft = 2;
  if (this->_internal_turnsleft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_turnsleft(), target);
  }

  // .WorkerTaskKind kind = 3;
  if (this->_internal_has_kind()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kind(this), target, stream);
  }

  // string presentParticiple = 4;
  if (!this->_internal_presentparticiple().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_presentparticiple().data(), static_cast<int>(this->_internal_presentparticiple().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerTask.presentParticiple");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_presentparticiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerTask)
  return target;
}

size_t WorkerTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string presentParticiple = 4;
  if (!this->_internal_presentparticiple().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_presentparticiple());
  }

  // .WorkerTaskKind kind = 3;
  if (this->_internal_has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  // int32 turnsLeft = 2;
  if (this->_internal_turnsleft() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turnsleft());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkerTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerTask::GetClassData() const { return &_class_data_; }

void WorkerTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkerTask *>(to)->MergeFrom(
      static_cast<const WorkerTask &>(from));
}


void WorkerTask::MergeFrom(const WorkerTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerTask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_presentparticiple().empty()) {
    _internal_set_presentparticiple(from._internal_presentparticiple());
  }
  if (from._internal_has_kind()) {
    _internal_mutable_kind()->::WorkerTaskKind::MergeFrom(from._internal_kind());
  }
  if (from._internal_turnsleft() != 0) {
    _internal_set_turnsleft(from._internal_turnsleft());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerTask::CopyFrom(const WorkerTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTask::IsInitialized() const {
  return true;
}

void WorkerTask::InternalSwap(WorkerTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &presentparticiple_, GetArenaForAllocation(),
      &other->presentparticiple_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerTask, turnsleft_)
      + sizeof(WorkerTask::turnsleft_)
      - PROTOBUF_FIELD_OFFSET(WorkerTask, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[25]);
}

// ===================================================================

class WorkerCapability::_Internal {
 public:
  static const ::WorkerTask& currenttask(const WorkerCapability* msg);
};

const ::WorkerTask&
WorkerCapability::_Internal::currenttask(const WorkerCapability* msg) {
  return *msg->currenttask_;
}
WorkerCapability::WorkerCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  possibletasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WorkerCapability)
}
WorkerCapability::WorkerCapability(const WorkerCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      possibletasks_(from.possibletasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currenttask()) {
    currenttask_ = new ::WorkerTask(*from.currenttask_);
  } else {
    currenttask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:WorkerCapability)
}

inline void WorkerCapability::SharedCtor() {
currenttask_ = nullptr;
}

WorkerCapability::~WorkerCapability() {
  // @@protoc_insertion_point(destructor:WorkerCapability)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkerCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete currenttask_;
}

void WorkerCapability::ArenaDtor(void* object) {
  WorkerCapability* _this = reinterpret_cast< WorkerCapability* >(object);
  (void)_this;
}
void WorkerCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  possibletasks_.Clear();
  if (GetArenaForAllocation() == nullptr && currenttask_ != nullptr) {
    delete currenttask_;
  }
  currenttask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .WorkerTask currentTask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currenttask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .WorkerTask possibleTasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_possibletasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WorkerTask currentTask = 1;
  if (this->_internal_has_currenttask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::currenttask(this), target, stream);
  }

  // repeated .WorkerTask possibleTasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_possibletasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_possibletasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerCapability)
  return target;
}

size_t WorkerCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WorkerTask possibleTasks = 2;
  total_size += 1UL * this->_internal_possibletasks_size();
  for (const auto& msg : this->possibletasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .WorkerTask currentTask = 1;
  if (this->_internal_has_currenttask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currenttask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkerCapability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerCapability::GetClassData() const { return &_class_data_; }

void WorkerCapability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkerCapability *>(to)->MergeFrom(
      static_cast<const WorkerCapability &>(from));
}


void WorkerCapability::MergeFrom(const WorkerCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerCapability)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  possibletasks_.MergeFrom(from.possibletasks_);
  if (from._internal_has_currenttask()) {
    _internal_mutable_currenttask()->::WorkerTask::MergeFrom(from._internal_currenttask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerCapability::CopyFrom(const WorkerCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerCapability::IsInitialized() const {
  return true;
}

void WorkerCapability::InternalSwap(WorkerCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  possibletasks_.InternalSwap(&other->possibletasks_);
  swap(currenttask_, other->currenttask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerCapability::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[26]);
}

// ===================================================================

class CarryUnitsCapability::_Internal {
 public:
};

CarryUnitsCapability::CarryUnitsCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  carryingunitids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CarryUnitsCapability)
}
CarryUnitsCapability::CarryUnitsCapability(const CarryUnitsCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      carryingunitids_(from.carryingunitids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CarryUnitsCapability)
}

inline void CarryUnitsCapability::SharedCtor() {
}

CarryUnitsCapability::~CarryUnitsCapability() {
  // @@protoc_insertion_point(destructor:CarryUnitsCapability)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CarryUnitsCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CarryUnitsCapability::ArenaDtor(void* object) {
  CarryUnitsCapability* _this = reinterpret_cast< CarryUnitsCapability* >(object);
  (void)_this;
}
void CarryUnitsCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarryUnitsCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CarryUnitsCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:CarryUnitsCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  carryingunitids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarryUnitsCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 carryingUnitIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_carryingunitids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_carryingunitids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarryUnitsCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarryUnitsCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 carryingUnitIDs = 1;
  {
    int byte_size = _carryingunitids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_carryingunitids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarryUnitsCapability)
  return target;
}

size_t CarryUnitsCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarryUnitsCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 carryingUnitIDs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->carryingunitids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _carryingunitids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarryUnitsCapability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CarryUnitsCapability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarryUnitsCapability::GetClassData() const { return &_class_data_; }

void CarryUnitsCapability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CarryUnitsCapability *>(to)->MergeFrom(
      static_cast<const CarryUnitsCapability &>(from));
}


void CarryUnitsCapability::MergeFrom(const CarryUnitsCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarryUnitsCapability)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  carryingunitids_.MergeFrom(from.carryingunitids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarryUnitsCapability::CopyFrom(const CarryUnitsCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarryUnitsCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarryUnitsCapability::IsInitialized() const {
  return true;
}

void CarryUnitsCapability::InternalSwap(CarryUnitsCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  carryingunitids_.InternalSwap(&other->carryingunitids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarryUnitsCapability::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[27]);
}

// ===================================================================

class Capability::_Internal {
 public:
  static const ::FoundCityCapability& foundcity(const Capability* msg);
  static const ::WorkerCapability& worker(const Capability* msg);
  static const ::CarryUnitsCapability& carryunits(const Capability* msg);
};

const ::FoundCityCapability&
Capability::_Internal::foundcity(const Capability* msg) {
  return *msg->cap_.foundcity_;
}
const ::WorkerCapability&
Capability::_Internal::worker(const Capability* msg) {
  return *msg->cap_.worker_;
}
const ::CarryUnitsCapability&
Capability::_Internal::carryunits(const Capability* msg) {
  return *msg->cap_.carryunits_;
}
void Capability::set_allocated_foundcity(::FoundCityCapability* foundcity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cap();
  if (foundcity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FoundCityCapability>::GetOwningArena(foundcity);
    if (message_arena != submessage_arena) {
      foundcity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foundcity, submessage_arena);
    }
    set_has_foundcity();
    cap_.foundcity_ = foundcity;
  }
  // @@protoc_insertion_point(field_set_allocated:Capability.foundCity)
}
void Capability::set_allocated_worker(::WorkerCapability* worker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cap();
  if (worker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::WorkerCapability>::GetOwningArena(worker);
    if (message_arena != submessage_arena) {
      worker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worker, submessage_arena);
    }
    set_has_worker();
    cap_.worker_ = worker;
  }
  // @@protoc_insertion_point(field_set_allocated:Capability.worker)
}
void Capability::set_allocated_carryunits(::CarryUnitsCapability* carryunits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cap();
  if (carryunits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CarryUnitsCapability>::GetOwningArena(carryunits);
    if (message_arena != submessage_arena) {
      carryunits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carryunits, submessage_arena);
    }
    set_has_carryunits();
    cap_.carryunits_ = carryunits;
  }
  // @@protoc_insertion_point(field_set_allocated:Capability.carryUnits)
}
Capability::Capability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Capability)
}
Capability::Capability(const Capability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_cap();
  switch (from.cap_case()) {
    case kFoundCity: {
      _internal_mutable_foundcity()->::FoundCityCapability::MergeFrom(from._internal_foundcity());
      break;
    }
    case kWorker: {
      _internal_mutable_worker()->::WorkerCapability::MergeFrom(from._internal_worker());
      break;
    }
    case kCarryUnits: {
      _internal_mutable_carryunits()->::CarryUnitsCapability::MergeFrom(from._internal_carryunits());
      break;
    }
    case CAP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Capability)
}

inline void Capability::SharedCtor() {
clear_has_cap();
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:Capability)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Capability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_cap()) {
    clear_cap();
  }
}

void Capability::ArenaDtor(void* object) {
  Capability* _this = reinterpret_cast< Capability* >(object);
  (void)_this;
}
void Capability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Capability::clear_cap() {
// @@protoc_insertion_point(one_of_clear_start:Capability)
  switch (cap_case()) {
    case kFoundCity: {
      if (GetArenaForAllocation() == nullptr) {
        delete cap_.foundcity_;
      }
      break;
    }
    case kWorker: {
      if (GetArenaForAllocation() == nullptr) {
        delete cap_.worker_;
      }
      break;
    }
    case kCarryUnits: {
      if (GetArenaForAllocation() == nullptr) {
        delete cap_.carryunits_;
      }
      break;
    }
    case CAP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CAP_NOT_SET;
}


void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_cap();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FoundCityCapability foundCity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_foundcity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WorkerCapability worker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CarryUnitsCapability carryUnits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_carryunits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FoundCityCapability foundCity = 1;
  if (_internal_has_foundcity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::foundcity(this), target, stream);
  }

  // .WorkerCapability worker = 2;
  if (_internal_has_worker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::worker(this), target, stream);
  }

  // .CarryUnitsCapability carryUnits = 3;
  if (_internal_has_carryunits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::carryunits(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Capability)
  return target;
}

size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Capability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (cap_case()) {
    // .FoundCityCapability foundCity = 1;
    case kFoundCity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cap_.foundcity_);
      break;
    }
    // .WorkerCapability worker = 2;
    case kWorker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cap_.worker_);
      break;
    }
    // .CarryUnitsCapability carryUnits = 3;
    case kCarryUnits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cap_.carryunits_);
      break;
    }
    case CAP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Capability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Capability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Capability::GetClassData() const { return &_class_data_; }

void Capability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Capability *>(to)->MergeFrom(
      static_cast<const Capability &>(from));
}


void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Capability)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.cap_case()) {
    case kFoundCity: {
      _internal_mutable_foundcity()->::FoundCityCapability::MergeFrom(from._internal_foundcity());
      break;
    }
    case kWorker: {
      _internal_mutable_worker()->::WorkerCapability::MergeFrom(from._internal_worker());
      break;
    }
    case kCarryUnits: {
      _internal_mutable_carryunits()->::CarryUnitsCapability::MergeFrom(from._internal_carryunits());
      break;
    }
    case CAP_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  return true;
}

void Capability::InternalSwap(Capability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cap_, other->cap_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capability::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[28]);
}

// ===================================================================

class UpdateUnit::_Internal {
 public:
  static const ::Pos& pos(const UpdateUnit* msg);
  static const ::Path& followingpath(const UpdateUnit* msg);
};

const ::Pos&
UpdateUnit::_Internal::pos(const UpdateUnit* msg) {
  return *msg->pos_;
}
const ::Path&
UpdateUnit::_Internal::followingpath(const UpdateUnit* msg) {
  return *msg->followingpath_;
}
UpdateUnit::UpdateUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  capabilities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UpdateUnit)
}
UpdateUnit::UpdateUnit(const UpdateUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kindid().empty()) {
    kindid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kindid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_followingpath()) {
    followingpath_ = new ::Path(*from.followingpath_);
  } else {
    followingpath_ = nullptr;
  }
  ::memcpy(&health_, &from.health_,
    static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
    reinterpret_cast<char*>(&health_)) + sizeof(strength_));
  // @@protoc_insertion_point(copy_constructor:UpdateUnit)
}

inline void UpdateUnit::SharedCtor() {
kindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(strength_));
}

UpdateUnit::~UpdateUnit() {
  // @@protoc_insertion_point(destructor:UpdateUnit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kindid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete followingpath_;
}

void UpdateUnit::ArenaDtor(void* object) {
  UpdateUnit* _this = reinterpret_cast< UpdateUnit* >(object);
  (void)_this;
}
void UpdateUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  kindid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && followingpath_ != nullptr) {
    delete followingpath_;
  }
  followingpath_ = nullptr;
  ::memset(&health_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&health_)) + sizeof(strength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kindID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_kindid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateUnit.kindID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ownerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          health_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double movementLeft = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          movementleft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Path followingPath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_followingpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Capability capabilities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double strength = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pos pos = 1;
  if (this->_internal_has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // string kindID = 2;
  if (!this->_internal_kindid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kindid().data(), static_cast<int>(this->_internal_kindid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateUnit.kindID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kindid(), target);
  }

  // int32 ownerID = 3;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ownerid(), target);
  }

  // double health = 4;
  if (!(this->_internal_health() <= 0 && this->_internal_health() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_health(), target);
  }

  // double movementLeft = 5;
  if (!(this->_internal_movementleft() <= 0 && this->_internal_movementleft() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_movementleft(), target);
  }

  // .Path followingPath = 6;
  if (this->_internal_has_followingpath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::followingpath(this), target, stream);
  }

  // repeated .Capability capabilities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_capabilities(i), target, stream);
  }

  // int32 id = 8;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_id(), target);
  }

  // double strength = 9;
  if (!(this->_internal_strength() <= 0 && this->_internal_strength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateUnit)
  return target;
}

size_t UpdateUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Capability capabilities = 7;
  total_size += 1UL * this->_internal_capabilities_size();
  for (const auto& msg : this->capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string kindID = 2;
  if (!this->_internal_kindid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kindid());
  }

  // .Pos pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .Path followingPath = 6;
  if (this->_internal_has_followingpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *followingpath_);
  }

  // double health = 4;
  if (!(this->_internal_health() <= 0 && this->_internal_health() >= 0)) {
    total_size += 1 + 8;
  }

  // double movementLeft = 5;
  if (!(this->_internal_movementleft() <= 0 && this->_internal_movementleft() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 ownerID = 3;
  if (this->_internal_ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ownerid());
  }

  // int32 id = 8;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // double strength = 9;
  if (!(this->_internal_strength() <= 0 && this->_internal_strength() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUnit::GetClassData() const { return &_class_data_; }

void UpdateUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateUnit *>(to)->MergeFrom(
      static_cast<const UpdateUnit &>(from));
}


void UpdateUnit::MergeFrom(const UpdateUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateUnit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
  if (!from._internal_kindid().empty()) {
    _internal_set_kindid(from._internal_kindid());
  }
  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::Pos::MergeFrom(from._internal_pos());
  }
  if (from._internal_has_followingpath()) {
    _internal_mutable_followingpath()->::Path::MergeFrom(from._internal_followingpath());
  }
  if (!(from._internal_health() <= 0 && from._internal_health() >= 0)) {
    _internal_set_health(from._internal_health());
  }
  if (!(from._internal_movementleft() <= 0 && from._internal_movementleft() >= 0)) {
    _internal_set_movementleft(from._internal_movementleft());
  }
  if (from._internal_ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from._internal_strength() <= 0 && from._internal_strength() >= 0)) {
    _internal_set_strength(from._internal_strength());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUnit::CopyFrom(const UpdateUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUnit::IsInitialized() const {
  return true;
}

void UpdateUnit::InternalSwap(UpdateUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  capabilities_.InternalSwap(&other->capabilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kindid_, GetArenaForAllocation(),
      &other->kindid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateUnit, strength_)
      + sizeof(UpdateUnit::strength_)
      - PROTOBUF_FIELD_OFFSET(UpdateUnit, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUnit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[29]);
}

// ===================================================================

class ResearchingTech::_Internal {
 public:
};

ResearchingTech::ResearchingTech(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ResearchingTech)
}
ResearchingTech::ResearchingTech(const ResearchingTech& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  techid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_techid().empty()) {
    techid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_techid(), 
      GetArenaForAllocation());
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:ResearchingTech)
}

inline void ResearchingTech::SharedCtor() {
techid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
progress_ = 0;
}

ResearchingTech::~ResearchingTech() {
  // @@protoc_insertion_point(destructor:ResearchingTech)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResearchingTech::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  techid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResearchingTech::ArenaDtor(void* object) {
  ResearchingTech* _this = reinterpret_cast< ResearchingTech* >(object);
  (void)_this;
}
void ResearchingTech::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResearchingTech::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResearchingTech::Clear() {
// @@protoc_insertion_point(message_clear_start:ResearchingTech)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techid_.ClearToEmpty();
  progress_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResearchingTech::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string techID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_techid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ResearchingTech.techID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResearchingTech::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResearchingTech)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string techID = 1;
  if (!this->_internal_techid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_techid().data(), static_cast<int>(this->_internal_techid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResearchingTech.techID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_techid(), target);
  }

  // int32 progress = 2;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResearchingTech)
  return target;
}

size_t ResearchingTech::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResearchingTech)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string techID = 1;
  if (!this->_internal_techid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_techid());
  }

  // int32 progress = 2;
  if (this->_internal_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResearchingTech::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResearchingTech::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResearchingTech::GetClassData() const { return &_class_data_; }

void ResearchingTech::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResearchingTech *>(to)->MergeFrom(
      static_cast<const ResearchingTech &>(from));
}


void ResearchingTech::MergeFrom(const ResearchingTech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResearchingTech)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_techid().empty()) {
    _internal_set_techid(from._internal_techid());
  }
  if (from._internal_progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResearchingTech::CopyFrom(const ResearchingTech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResearchingTech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResearchingTech::IsInitialized() const {
  return true;
}

void ResearchingTech::InternalSwap(ResearchingTech* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &techid_, GetArenaForAllocation(),
      &other->techid_, other->GetArenaForAllocation()
  );
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResearchingTech::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[30]);
}

// ===================================================================

class UpdatePlayer::_Internal {
 public:
  static const ::ResearchingTech& researchingtech(const UpdatePlayer* msg);
};

const ::ResearchingTech&
UpdatePlayer::_Internal::researchingtech(const UpdatePlayer* msg) {
  return *msg->researchingtech_;
}
UpdatePlayer::UpdatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unlockedtechids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UpdatePlayer)
}
UpdatePlayer::UpdatePlayer(const UpdatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unlockedtechids_(from.unlockedtechids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_researchingtech()) {
    researchingtech_ = new ::ResearchingTech(*from.researchingtech_);
  } else {
    researchingtech_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&beakerpercent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(beakerpercent_));
  // @@protoc_insertion_point(copy_constructor:UpdatePlayer)
}

inline void UpdatePlayer::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&researchingtech_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&beakerpercent_) -
    reinterpret_cast<char*>(&researchingtech_)) + sizeof(beakerpercent_));
}

UpdatePlayer::~UpdatePlayer() {
  // @@protoc_insertion_point(destructor:UpdatePlayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete researchingtech_;
}

void UpdatePlayer::ArenaDtor(void* object) {
  UpdatePlayer* _this = reinterpret_cast< UpdatePlayer* >(object);
  (void)_this;
}
void UpdatePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlockedtechids_.Clear();
  username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && researchingtech_ != nullptr) {
    delete researchingtech_;
  }
  researchingtech_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beakerpercent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(beakerpercent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdatePlayer.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 baseRevenue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          baserevenue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beakerRevenue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          beakerrevenue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goldRevenue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          goldrevenue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expenses = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expenses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 netGold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          netgold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ResearchingTech researchingTech = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_researchingtech(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 capitalCityID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          capitalcityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string unlockedTechIDs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unlockedtechids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdatePlayer.unlockedTechIDs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 beakerPercent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          beakerpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdatePlayer.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // int32 baseRevenue = 3;
  if (this->_internal_baserevenue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_baserevenue(), target);
  }

  // int32 beakerRevenue = 4;
  if (this->_internal_beakerrevenue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_beakerrevenue(), target);
  }

  // int32 goldRevenue = 5;
  if (this->_internal_goldrevenue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_goldrevenue(), target);
  }

  // int32 expenses = 6;
  if (this->_internal_expenses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_expenses(), target);
  }

  // int32 netGold = 7;
  if (this->_internal_netgold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_netgold(), target);
  }

  // int32 gold = 8;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_gold(), target);
  }

  // .ResearchingTech researchingTech = 9;
  if (this->_internal_has_researchingtech()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::researchingtech(this), target, stream);
  }

  // int32 capitalCityID = 10;
  if (this->_internal_capitalcityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_capitalcityid(), target);
  }

  // repeated string unlockedTechIDs = 11;
  for (int i = 0, n = this->_internal_unlockedtechids_size(); i < n; i++) {
    const auto& s = this->_internal_unlockedtechids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdatePlayer.unlockedTechIDs");
    target = stream->WriteString(11, s, target);
  }

  // int32 beakerPercent = 12;
  if (this->_internal_beakerpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_beakerpercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdatePlayer)
  return target;
}

size_t UpdatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdatePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string unlockedTechIDs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unlockedtechids_.size());
  for (int i = 0, n = unlockedtechids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unlockedtechids_.Get(i));
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .ResearchingTech researchingTech = 9;
  if (this->_internal_has_researchingtech()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *researchingtech_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 baseRevenue = 3;
  if (this->_internal_baserevenue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_baserevenue());
  }

  // int32 beakerRevenue = 4;
  if (this->_internal_beakerrevenue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beakerrevenue());
  }

  // int32 goldRevenue = 5;
  if (this->_internal_goldrevenue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goldrevenue());
  }

  // int32 expenses = 6;
  if (this->_internal_expenses() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expenses());
  }

  // int32 netGold = 7;
  if (this->_internal_netgold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_netgold());
  }

  // int32 gold = 8;
  if (this->_internal_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  // int32 capitalCityID = 10;
  if (this->_internal_capitalcityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capitalcityid());
  }

  // int32 beakerPercent = 12;
  if (this->_internal_beakerpercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beakerpercent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePlayer::GetClassData() const { return &_class_data_; }

void UpdatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdatePlayer *>(to)->MergeFrom(
      static_cast<const UpdatePlayer &>(from));
}


void UpdatePlayer::MergeFrom(const UpdatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlockedtechids_.MergeFrom(from.unlockedtechids_);
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (from._internal_has_researchingtech()) {
    _internal_mutable_researchingtech()->::ResearchingTech::MergeFrom(from._internal_researchingtech());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_baserevenue() != 0) {
    _internal_set_baserevenue(from._internal_baserevenue());
  }
  if (from._internal_beakerrevenue() != 0) {
    _internal_set_beakerrevenue(from._internal_beakerrevenue());
  }
  if (from._internal_goldrevenue() != 0) {
    _internal_set_goldrevenue(from._internal_goldrevenue());
  }
  if (from._internal_expenses() != 0) {
    _internal_set_expenses(from._internal_expenses());
  }
  if (from._internal_netgold() != 0) {
    _internal_set_netgold(from._internal_netgold());
  }
  if (from._internal_gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from._internal_capitalcityid() != 0) {
    _internal_set_capitalcityid(from._internal_capitalcityid());
  }
  if (from._internal_beakerpercent() != 0) {
    _internal_set_beakerpercent(from._internal_beakerpercent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePlayer::CopyFrom(const UpdatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayer::IsInitialized() const {
  return true;
}

void UpdatePlayer::InternalSwap(UpdatePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unlockedtechids_.InternalSwap(&other->unlockedtechids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayer, beakerpercent_)
      + sizeof(UpdatePlayer::beakerpercent_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayer, researchingtech_)>(
          reinterpret_cast<char*>(&researchingtech_),
          reinterpret_cast<char*>(&other->researchingtech_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[31]);
}

// ===================================================================

class PathComputed::_Internal {
 public:
  static const ::Path& path(const PathComputed* msg);
};

const ::Path&
PathComputed::_Internal::path(const PathComputed* msg) {
  return *msg->path_;
}
PathComputed::PathComputed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PathComputed)
}
PathComputed::PathComputed(const PathComputed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PathComputed)
}

inline void PathComputed::SharedCtor() {
path_ = nullptr;
}

PathComputed::~PathComputed() {
  // @@protoc_insertion_point(destructor:PathComputed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathComputed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void PathComputed::ArenaDtor(void* object) {
  PathComputed* _this = reinterpret_cast< PathComputed* >(object);
  (void)_this;
}
void PathComputed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathComputed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathComputed::Clear() {
// @@protoc_insertion_point(message_clear_start:PathComputed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathComputed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathComputed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathComputed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Path path = 1;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathComputed)
  return target;
}

size_t PathComputed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathComputed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Path path = 1;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathComputed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathComputed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathComputed::GetClassData() const { return &_class_data_; }

void PathComputed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PathComputed *>(to)->MergeFrom(
      static_cast<const PathComputed &>(from));
}


void PathComputed::MergeFrom(const PathComputed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathComputed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::Path::MergeFrom(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathComputed::CopyFrom(const PathComputed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathComputed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathComputed::IsInitialized() const {
  return true;
}

void PathComputed::InternalSwap(PathComputed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(path_, other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathComputed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[32]);
}

// ===================================================================

class ConfirmMoveUnits::_Internal {
 public:
};

ConfirmMoveUnits::ConfirmMoveUnits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConfirmMoveUnits)
}
ConfirmMoveUnits::ConfirmMoveUnits(const ConfirmMoveUnits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ConfirmMoveUnits)
}

inline void ConfirmMoveUnits::SharedCtor() {
success_ = false;
}

ConfirmMoveUnits::~ConfirmMoveUnits() {
  // @@protoc_insertion_point(destructor:ConfirmMoveUnits)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfirmMoveUnits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfirmMoveUnits::ArenaDtor(void* object) {
  ConfirmMoveUnits* _this = reinterpret_cast< ConfirmMoveUnits* >(object);
  (void)_this;
}
void ConfirmMoveUnits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfirmMoveUnits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfirmMoveUnits::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfirmMoveUnits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmMoveUnits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfirmMoveUnits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfirmMoveUnits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfirmMoveUnits)
  return target;
}

size_t ConfirmMoveUnits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfirmMoveUnits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmMoveUnits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfirmMoveUnits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmMoveUnits::GetClassData() const { return &_class_data_; }

void ConfirmMoveUnits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConfirmMoveUnits *>(to)->MergeFrom(
      static_cast<const ConfirmMoveUnits &>(from));
}


void ConfirmMoveUnits::MergeFrom(const ConfirmMoveUnits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfirmMoveUnits)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmMoveUnits::CopyFrom(const ConfirmMoveUnits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfirmMoveUnits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmMoveUnits::IsInitialized() const {
  return true;
}

void ConfirmMoveUnits::InternalSwap(ConfirmMoveUnits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmMoveUnits::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[33]);
}

// ===================================================================

class PossibleCityBuildTasks::_Internal {
 public:
};

PossibleCityBuildTasks::PossibleCityBuildTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PossibleCityBuildTasks)
}
PossibleCityBuildTasks::PossibleCityBuildTasks(const PossibleCityBuildTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PossibleCityBuildTasks)
}

inline void PossibleCityBuildTasks::SharedCtor() {
}

PossibleCityBuildTasks::~PossibleCityBuildTasks() {
  // @@protoc_insertion_point(destructor:PossibleCityBuildTasks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PossibleCityBuildTasks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PossibleCityBuildTasks::ArenaDtor(void* object) {
  PossibleCityBuildTasks* _this = reinterpret_cast< PossibleCityBuildTasks* >(object);
  (void)_this;
}
void PossibleCityBuildTasks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PossibleCityBuildTasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PossibleCityBuildTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:PossibleCityBuildTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PossibleCityBuildTasks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .BuildTask tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PossibleCityBuildTasks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PossibleCityBuildTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BuildTask tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PossibleCityBuildTasks)
  return target;
}

size_t PossibleCityBuildTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PossibleCityBuildTasks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BuildTask tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PossibleCityBuildTasks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PossibleCityBuildTasks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PossibleCityBuildTasks::GetClassData() const { return &_class_data_; }

void PossibleCityBuildTasks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PossibleCityBuildTasks *>(to)->MergeFrom(
      static_cast<const PossibleCityBuildTasks &>(from));
}


void PossibleCityBuildTasks::MergeFrom(const PossibleCityBuildTasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PossibleCityBuildTasks)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PossibleCityBuildTasks::CopyFrom(const PossibleCityBuildTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PossibleCityBuildTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PossibleCityBuildTasks::IsInitialized() const {
  return true;
}

void PossibleCityBuildTasks::InternalSwap(PossibleCityBuildTasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PossibleCityBuildTasks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[34]);
}

// ===================================================================

class PossibleTechs::_Internal {
 public:
};

PossibleTechs::PossibleTechs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  techs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PossibleTechs)
}
PossibleTechs::PossibleTechs(const PossibleTechs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      techs_(from.techs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PossibleTechs)
}

inline void PossibleTechs::SharedCtor() {
}

PossibleTechs::~PossibleTechs() {
  // @@protoc_insertion_point(destructor:PossibleTechs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PossibleTechs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PossibleTechs::ArenaDtor(void* object) {
  PossibleTechs* _this = reinterpret_cast< PossibleTechs* >(object);
  (void)_this;
}
void PossibleTechs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PossibleTechs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PossibleTechs::Clear() {
// @@protoc_insertion_point(message_clear_start:PossibleTechs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PossibleTechs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string techs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_techs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PossibleTechs.techs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PossibleTechs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PossibleTechs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string techs = 1;
  for (int i = 0, n = this->_internal_techs_size(); i < n; i++) {
    const auto& s = this->_internal_techs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PossibleTechs.techs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PossibleTechs)
  return target;
}

size_t PossibleTechs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PossibleTechs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string techs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(techs_.size());
  for (int i = 0, n = techs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      techs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PossibleTechs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PossibleTechs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PossibleTechs::GetClassData() const { return &_class_data_; }

void PossibleTechs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PossibleTechs *>(to)->MergeFrom(
      static_cast<const PossibleTechs &>(from));
}


void PossibleTechs::MergeFrom(const PossibleTechs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PossibleTechs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  techs_.MergeFrom(from.techs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PossibleTechs::CopyFrom(const PossibleTechs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PossibleTechs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PossibleTechs::IsInitialized() const {
  return true;
}

void PossibleTechs::InternalSwap(PossibleTechs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  techs_.InternalSwap(&other->techs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PossibleTechs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[35]);
}

// ===================================================================

class DeleteUnit::_Internal {
 public:
};

DeleteUnit::DeleteUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DeleteUnit)
}
DeleteUnit::DeleteUnit(const DeleteUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unitid_ = from.unitid_;
  // @@protoc_insertion_point(copy_constructor:DeleteUnit)
}

inline void DeleteUnit::SharedCtor() {
unitid_ = 0;
}

DeleteUnit::~DeleteUnit() {
  // @@protoc_insertion_point(destructor:DeleteUnit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteUnit::ArenaDtor(void* object) {
  DeleteUnit* _this = reinterpret_cast< DeleteUnit* >(object);
  (void)_this;
}
void DeleteUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unitid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unitID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unitID = 1;
  if (this->_internal_unitid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unitid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteUnit)
  return target;
}

size_t DeleteUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 unitID = 1;
  if (this->_internal_unitid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unitid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteUnit::GetClassData() const { return &_class_data_; }

void DeleteUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteUnit *>(to)->MergeFrom(
      static_cast<const DeleteUnit &>(from));
}


void DeleteUnit::MergeFrom(const DeleteUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteUnit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unitid() != 0) {
    _internal_set_unitid(from._internal_unitid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteUnit::CopyFrom(const DeleteUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUnit::IsInitialized() const {
  return true;
}

void DeleteUnit::InternalSwap(DeleteUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(unitid_, other->unitid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUnit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[36]);
}

// ===================================================================

class MoveUnits::_Internal {
 public:
  static const ::Path& pathtofollow(const MoveUnits* msg);
};

const ::Path&
MoveUnits::_Internal::pathtofollow(const MoveUnits* msg) {
  return *msg->pathtofollow_;
}
MoveUnits::MoveUnits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unitids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MoveUnits)
}
MoveUnits::MoveUnits(const MoveUnits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unitids_(from.unitids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pathtofollow()) {
    pathtofollow_ = new ::Path(*from.pathtofollow_);
  } else {
    pathtofollow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MoveUnits)
}

inline void MoveUnits::SharedCtor() {
pathtofollow_ = nullptr;
}

MoveUnits::~MoveUnits() {
  // @@protoc_insertion_point(destructor:MoveUnits)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveUnits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pathtofollow_;
}

void MoveUnits::ArenaDtor(void* object) {
  MoveUnits* _this = reinterpret_cast< MoveUnits* >(object);
  (void)_this;
}
void MoveUnits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveUnits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveUnits::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveUnits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unitids_.Clear();
  if (GetArenaForAllocation() == nullptr && pathtofollow_ != nullptr) {
    delete pathtofollow_;
  }
  pathtofollow_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveUnits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 unitIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unitids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_unitids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Path pathToFollow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathtofollow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveUnits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MoveUnits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 unitIDs = 1;
  {
    int byte_size = _unitids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_unitids(), byte_size, target);
    }
  }

  // .Path pathToFollow = 2;
  if (this->_internal_has_pathtofollow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pathtofollow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MoveUnits)
  return target;
}

size_t MoveUnits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MoveUnits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 unitIDs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unitids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _unitids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Path pathToFollow = 2;
  if (this->_internal_has_pathtofollow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathtofollow_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveUnits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveUnits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveUnits::GetClassData() const { return &_class_data_; }

void MoveUnits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MoveUnits *>(to)->MergeFrom(
      static_cast<const MoveUnits &>(from));
}


void MoveUnits::MergeFrom(const MoveUnits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MoveUnits)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unitids_.MergeFrom(from.unitids_);
  if (from._internal_has_pathtofollow()) {
    _internal_mutable_pathtofollow()->::Path::MergeFrom(from._internal_pathtofollow());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveUnits::CopyFrom(const MoveUnits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveUnits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveUnits::IsInitialized() const {
  return true;
}

void MoveUnits::InternalSwap(MoveUnits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unitids_.InternalSwap(&other->unitids_);
  swap(pathtofollow_, other->pathtofollow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveUnits::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[37]);
}

// ===================================================================

class SetCityBuildTask::_Internal {
 public:
  static const ::BuildTaskKind& task(const SetCityBuildTask* msg);
};

const ::BuildTaskKind&
SetCityBuildTask::_Internal::task(const SetCityBuildTask* msg) {
  return *msg->task_;
}
SetCityBuildTask::SetCityBuildTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetCityBuildTask)
}
SetCityBuildTask::SetCityBuildTask(const SetCityBuildTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::BuildTaskKind(*from.task_);
  } else {
    task_ = nullptr;
  }
  cityid_ = from.cityid_;
  // @@protoc_insertion_point(copy_constructor:SetCityBuildTask)
}

inline void SetCityBuildTask::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cityid_) -
    reinterpret_cast<char*>(&task_)) + sizeof(cityid_));
}

SetCityBuildTask::~SetCityBuildTask() {
  // @@protoc_insertion_point(destructor:SetCityBuildTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetCityBuildTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete task_;
}

void SetCityBuildTask::ArenaDtor(void* object) {
  SetCityBuildTask* _this = reinterpret_cast< SetCityBuildTask* >(object);
  (void)_this;
}
void SetCityBuildTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCityBuildTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCityBuildTask::Clear() {
// @@protoc_insertion_point(message_clear_start:SetCityBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  cityid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCityBuildTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildTaskKind task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCityBuildTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetCityBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cityID = 1;
  if (this->_internal_cityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cityid(), target);
  }

  // .BuildTaskKind task = 2;
  if (this->_internal_has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetCityBuildTask)
  return target;
}

size_t SetCityBuildTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetCityBuildTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BuildTaskKind task = 2;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // int32 cityID = 1;
  if (this->_internal_cityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCityBuildTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetCityBuildTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCityBuildTask::GetClassData() const { return &_class_data_; }

void SetCityBuildTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetCityBuildTask *>(to)->MergeFrom(
      static_cast<const SetCityBuildTask &>(from));
}


void SetCityBuildTask::MergeFrom(const SetCityBuildTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetCityBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task()) {
    _internal_mutable_task()->::BuildTaskKind::MergeFrom(from._internal_task());
  }
  if (from._internal_cityid() != 0) {
    _internal_set_cityid(from._internal_cityid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCityBuildTask::CopyFrom(const SetCityBuildTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetCityBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCityBuildTask::IsInitialized() const {
  return true;
}

void SetCityBuildTask::InternalSwap(SetCityBuildTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetCityBuildTask, cityid_)
      + sizeof(SetCityBuildTask::cityid_)
      - PROTOBUF_FIELD_OFFSET(SetCityBuildTask, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCityBuildTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[38]);
}

// ===================================================================

class SetWorkerTask::_Internal {
 public:
  static const ::WorkerTask& task(const SetWorkerTask* msg);
};

const ::WorkerTask&
SetWorkerTask::_Internal::task(const SetWorkerTask* msg) {
  return *msg->task_;
}
SetWorkerTask::SetWorkerTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetWorkerTask)
}
SetWorkerTask::SetWorkerTask(const SetWorkerTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::WorkerTask(*from.task_);
  } else {
    task_ = nullptr;
  }
  workerid_ = from.workerid_;
  // @@protoc_insertion_point(copy_constructor:SetWorkerTask)
}

inline void SetWorkerTask::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&workerid_) -
    reinterpret_cast<char*>(&task_)) + sizeof(workerid_));
}

SetWorkerTask::~SetWorkerTask() {
  // @@protoc_insertion_point(destructor:SetWorkerTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetWorkerTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete task_;
}

void SetWorkerTask::ArenaDtor(void* object) {
  SetWorkerTask* _this = reinterpret_cast< SetWorkerTask* >(object);
  (void)_this;
}
void SetWorkerTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetWorkerTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetWorkerTask::Clear() {
// @@protoc_insertion_point(message_clear_start:SetWorkerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  workerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetWorkerTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 workerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          workerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WorkerTask task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetWorkerTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetWorkerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 workerID = 1;
  if (this->_internal_workerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_workerid(), target);
  }

  // .WorkerTask task = 2;
  if (this->_internal_has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetWorkerTask)
  return target;
}

size_t SetWorkerTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetWorkerTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .WorkerTask task = 2;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // int32 workerID = 1;
  if (this->_internal_workerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_workerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetWorkerTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetWorkerTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetWorkerTask::GetClassData() const { return &_class_data_; }

void SetWorkerTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetWorkerTask *>(to)->MergeFrom(
      static_cast<const SetWorkerTask &>(from));
}


void SetWorkerTask::MergeFrom(const SetWorkerTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetWorkerTask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task()) {
    _internal_mutable_task()->::WorkerTask::MergeFrom(from._internal_task());
  }
  if (from._internal_workerid() != 0) {
    _internal_set_workerid(from._internal_workerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetWorkerTask::CopyFrom(const SetWorkerTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetWorkerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWorkerTask::IsInitialized() const {
  return true;
}

void SetWorkerTask::InternalSwap(SetWorkerTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetWorkerTask, workerid_)
      + sizeof(SetWorkerTask::workerid_)
      - PROTOBUF_FIELD_OFFSET(SetWorkerTask, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetWorkerTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[39]);
}

// ===================================================================

class ComputePath::_Internal {
 public:
  static const ::Pos& from(const ComputePath* msg);
  static const ::Pos& to(const ComputePath* msg);
};

const ::Pos&
ComputePath::_Internal::from(const ComputePath* msg) {
  return *msg->from_;
}
const ::Pos&
ComputePath::_Internal::to(const ComputePath* msg) {
  return *msg->to_;
}
ComputePath::ComputePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ComputePath)
}
ComputePath::ComputePath(const ComputePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unitkindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unitkindid().empty()) {
    unitkindid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unitkindid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    from_ = new ::Pos(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::Pos(*from.to_);
  } else {
    to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ComputePath)
}

inline void ComputePath::SharedCtor() {
unitkindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

ComputePath::~ComputePath() {
  // @@protoc_insertion_point(destructor:ComputePath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ComputePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unitkindid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void ComputePath::ArenaDtor(void* object) {
  ComputePath* _this = reinterpret_cast< ComputePath* >(object);
  (void)_this;
}
void ComputePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComputePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComputePath::Clear() {
// @@protoc_insertion_point(message_clear_start:ComputePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unitkindid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Pos from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Pos to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unitKindID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unitkindid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ComputePath.unitKindID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComputePath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComputePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pos from = 1;
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from(this), target, stream);
  }

  // .Pos to = 2;
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::to(this), target, stream);
  }

  // string unitKindID = 3;
  if (!this->_internal_unitkindid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unitkindid().data(), static_cast<int>(this->_internal_unitkindid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ComputePath.unitKindID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unitkindid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComputePath)
  return target;
}

size_t ComputePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComputePath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unitKindID = 3;
  if (!this->_internal_unitkindid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unitkindid());
  }

  // .Pos from = 1;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .Pos to = 2;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComputePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComputePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComputePath::GetClassData() const { return &_class_data_; }

void ComputePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ComputePath *>(to)->MergeFrom(
      static_cast<const ComputePath &>(from));
}


void ComputePath::MergeFrom(const ComputePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ComputePath)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unitkindid().empty()) {
    _internal_set_unitkindid(from._internal_unitkindid());
  }
  if (from._internal_has_from()) {
    _internal_mutable_from()->::Pos::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::Pos::MergeFrom(from._internal_to());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComputePath::CopyFrom(const ComputePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComputePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputePath::IsInitialized() const {
  return true;
}

void ComputePath::InternalSwap(ComputePath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unitkindid_, GetArenaForAllocation(),
      &other->unitkindid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputePath, to_)
      + sizeof(ComputePath::to_)
      - PROTOBUF_FIELD_OFFSET(ComputePath, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputePath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[40]);
}

// ===================================================================

class SetEconomySettings::_Internal {
 public:
};

SetEconomySettings::SetEconomySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetEconomySettings)
}
SetEconomySettings::SetEconomySettings(const SetEconomySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beakerpercent_ = from.beakerpercent_;
  // @@protoc_insertion_point(copy_constructor:SetEconomySettings)
}

inline void SetEconomySettings::SharedCtor() {
beakerpercent_ = 0;
}

SetEconomySettings::~SetEconomySettings() {
  // @@protoc_insertion_point(destructor:SetEconomySettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetEconomySettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetEconomySettings::ArenaDtor(void* object) {
  SetEconomySettings* _this = reinterpret_cast< SetEconomySettings* >(object);
  (void)_this;
}
void SetEconomySettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetEconomySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetEconomySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:SetEconomySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beakerpercent_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEconomySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 beakerPercent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          beakerpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEconomySettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetEconomySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 beakerPercent = 1;
  if (this->_internal_beakerpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_beakerpercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetEconomySettings)
  return target;
}

size_t SetEconomySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetEconomySettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 beakerPercent = 1;
  if (this->_internal_beakerpercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beakerpercent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetEconomySettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetEconomySettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetEconomySettings::GetClassData() const { return &_class_data_; }

void SetEconomySettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetEconomySettings *>(to)->MergeFrom(
      static_cast<const SetEconomySettings &>(from));
}


void SetEconomySettings::MergeFrom(const SetEconomySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetEconomySettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_beakerpercent() != 0) {
    _internal_set_beakerpercent(from._internal_beakerpercent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetEconomySettings::CopyFrom(const SetEconomySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetEconomySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEconomySettings::IsInitialized() const {
  return true;
}

void SetEconomySettings::InternalSwap(SetEconomySettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(beakerpercent_, other->beakerpercent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEconomySettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[41]);
}

// ===================================================================

class SetResearch::_Internal {
 public:
};

SetResearch::SetResearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetResearch)
}
SetResearch::SetResearch(const SetResearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  techid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_techid().empty()) {
    techid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_techid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SetResearch)
}

inline void SetResearch::SharedCtor() {
techid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetResearch::~SetResearch() {
  // @@protoc_insertion_point(destructor:SetResearch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetResearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  techid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetResearch::ArenaDtor(void* object) {
  SetResearch* _this = reinterpret_cast< SetResearch* >(object);
  (void)_this;
}
void SetResearch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetResearch::Clear() {
// @@protoc_insertion_point(message_clear_start:SetResearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string techID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_techid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SetResearch.techID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetResearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string techID = 1;
  if (!this->_internal_techid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_techid().data(), static_cast<int>(this->_internal_techid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetResearch.techID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_techid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetResearch)
  return target;
}

size_t SetResearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetResearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string techID = 1;
  if (!this->_internal_techid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_techid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetResearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetResearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetResearch::GetClassData() const { return &_class_data_; }

void SetResearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetResearch *>(to)->MergeFrom(
      static_cast<const SetResearch &>(from));
}


void SetResearch::MergeFrom(const SetResearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetResearch)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_techid().empty()) {
    _internal_set_techid(from._internal_techid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetResearch::CopyFrom(const SetResearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetResearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResearch::IsInitialized() const {
  return true;
}

void SetResearch::InternalSwap(SetResearch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &techid_, GetArenaForAllocation(),
      &other->techid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResearch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[42]);
}

// ===================================================================

class EndTurn::_Internal {
 public:
};

EndTurn::EndTurn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EndTurn)
}
EndTurn::EndTurn(const EndTurn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EndTurn)
}

inline void EndTurn::SharedCtor() {
}

EndTurn::~EndTurn() {
  // @@protoc_insertion_point(destructor:EndTurn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndTurn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EndTurn::ArenaDtor(void* object) {
  EndTurn* _this = reinterpret_cast< EndTurn* >(object);
  (void)_this;
}
void EndTurn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndTurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:EndTurn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndTurn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndTurn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndTurn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndTurn)
  return target;
}

size_t EndTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndTurn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndTurn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndTurn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndTurn::GetClassData() const { return &_class_data_; }

void EndTurn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EndTurn *>(to)->MergeFrom(
      static_cast<const EndTurn &>(from));
}


void EndTurn::MergeFrom(const EndTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndTurn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndTurn::CopyFrom(const EndTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndTurn::IsInitialized() const {
  return true;
}

void EndTurn::InternalSwap(EndTurn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndTurn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[43]);
}

// ===================================================================

class GetBuildTasks::_Internal {
 public:
};

GetBuildTasks::GetBuildTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GetBuildTasks)
}
GetBuildTasks::GetBuildTasks(const GetBuildTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cityid_ = from.cityid_;
  // @@protoc_insertion_point(copy_constructor:GetBuildTasks)
}

inline void GetBuildTasks::SharedCtor() {
cityid_ = 0;
}

GetBuildTasks::~GetBuildTasks() {
  // @@protoc_insertion_point(destructor:GetBuildTasks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBuildTasks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBuildTasks::ArenaDtor(void* object) {
  GetBuildTasks* _this = reinterpret_cast< GetBuildTasks* >(object);
  (void)_this;
}
void GetBuildTasks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBuildTasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBuildTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:GetBuildTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cityid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBuildTasks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBuildTasks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetBuildTasks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cityID = 1;
  if (this->_internal_cityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cityid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetBuildTasks)
  return target;
}

size_t GetBuildTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetBuildTasks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cityID = 1;
  if (this->_internal_cityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBuildTasks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBuildTasks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBuildTasks::GetClassData() const { return &_class_data_; }

void GetBuildTasks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetBuildTasks *>(to)->MergeFrom(
      static_cast<const GetBuildTasks &>(from));
}


void GetBuildTasks::MergeFrom(const GetBuildTasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetBuildTasks)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cityid() != 0) {
    _internal_set_cityid(from._internal_cityid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBuildTasks::CopyFrom(const GetBuildTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetBuildTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBuildTasks::IsInitialized() const {
  return true;
}

void GetBuildTasks::InternalSwap(GetBuildTasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cityid_, other->cityid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBuildTasks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[44]);
}

// ===================================================================

class GetPossibleTechs::_Internal {
 public:
};

GetPossibleTechs::GetPossibleTechs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GetPossibleTechs)
}
GetPossibleTechs::GetPossibleTechs(const GetPossibleTechs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetPossibleTechs)
}

inline void GetPossibleTechs::SharedCtor() {
}

GetPossibleTechs::~GetPossibleTechs() {
  // @@protoc_insertion_point(destructor:GetPossibleTechs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPossibleTechs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetPossibleTechs::ArenaDtor(void* object) {
  GetPossibleTechs* _this = reinterpret_cast< GetPossibleTechs* >(object);
  (void)_this;
}
void GetPossibleTechs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPossibleTechs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPossibleTechs::Clear() {
// @@protoc_insertion_point(message_clear_start:GetPossibleTechs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPossibleTechs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPossibleTechs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetPossibleTechs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetPossibleTechs)
  return target;
}

size_t GetPossibleTechs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetPossibleTechs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPossibleTechs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPossibleTechs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPossibleTechs::GetClassData() const { return &_class_data_; }

void GetPossibleTechs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetPossibleTechs *>(to)->MergeFrom(
      static_cast<const GetPossibleTechs &>(from));
}


void GetPossibleTechs::MergeFrom(const GetPossibleTechs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetPossibleTechs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPossibleTechs::CopyFrom(const GetPossibleTechs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetPossibleTechs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPossibleTechs::IsInitialized() const {
  return true;
}

void GetPossibleTechs::InternalSwap(GetPossibleTechs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPossibleTechs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[45]);
}

// ===================================================================

class DoUnitAction::_Internal {
 public:
};

DoUnitAction::DoUnitAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DoUnitAction)
}
DoUnitAction::DoUnitAction(const DoUnitAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unitid_, &from.unitid_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&unitid_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:DoUnitAction)
}

inline void DoUnitAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unitid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&unitid_)) + sizeof(action_));
}

DoUnitAction::~DoUnitAction() {
  // @@protoc_insertion_point(destructor:DoUnitAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DoUnitAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DoUnitAction::ArenaDtor(void* object) {
  DoUnitAction* _this = reinterpret_cast< DoUnitAction* >(object);
  (void)_this;
}
void DoUnitAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoUnitAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoUnitAction::Clear() {
// @@protoc_insertion_point(message_clear_start:DoUnitAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unitid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&unitid_)) + sizeof(action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoUnitAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unitID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UnitAction action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::UnitAction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoUnitAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DoUnitAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unitID = 1;
  if (this->_internal_unitid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unitid(), target);
  }

  // .UnitAction action = 2;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DoUnitAction)
  return target;
}

size_t DoUnitAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DoUnitAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 unitID = 1;
  if (this->_internal_unitid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unitid());
  }

  // .UnitAction action = 2;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoUnitAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DoUnitAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoUnitAction::GetClassData() const { return &_class_data_; }

void DoUnitAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DoUnitAction *>(to)->MergeFrom(
      static_cast<const DoUnitAction &>(from));
}


void DoUnitAction::MergeFrom(const DoUnitAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DoUnitAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unitid() != 0) {
    _internal_set_unitid(from._internal_unitid());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoUnitAction::CopyFrom(const DoUnitAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DoUnitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoUnitAction::IsInitialized() const {
  return true;
}

void DoUnitAction::InternalSwap(DoUnitAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoUnitAction, action_)
      + sizeof(DoUnitAction::action_)
      - PROTOBUF_FIELD_OFFSET(DoUnitAction, unitid_)>(
          reinterpret_cast<char*>(&unitid_),
          reinterpret_cast<char*>(&other->unitid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoUnitAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_riposte_2eproto_getter, &descriptor_table_riposte_2eproto_once,
      file_level_metadata_riposte_2eproto[46]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Pos* Arena::CreateMaybeMessage< ::Pos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pos >(arena);
}
template<> PROTOBUF_NOINLINE ::AnyClient* Arena::CreateMaybeMessage< ::AnyClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnyClient >(arena);
}
template<> PROTOBUF_NOINLINE ::AnyServer* Arena::CreateMaybeMessage< ::AnyServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnyServer >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientInfo* Arena::CreateMaybeMessage< ::ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerInfo* Arena::CreateMaybeMessage< ::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KickPlayer* Arena::CreateMaybeMessage< ::KickPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KickPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::SetLeader* Arena::CreateMaybeMessage< ::SetLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminStartGame* Arena::CreateMaybeMessage< ::AdminStartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminStartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyError* Arena::CreateMaybeMessage< ::LobbyError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LobbyError >(arena);
}
template<> PROTOBUF_NOINLINE ::StartGame* Arena::CreateMaybeMessage< ::StartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfo* Arena::CreateMaybeMessage< ::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateGlobalData* Arena::CreateMaybeMessage< ::UpdateGlobalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateGlobalData >(arena);
}
template<> PROTOBUF_NOINLINE ::Improvement* Arena::CreateMaybeMessage< ::Improvement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Improvement >(arena);
}
template<> PROTOBUF_NOINLINE ::Yield* Arena::CreateMaybeMessage< ::Yield >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yield >(arena);
}
template<> PROTOBUF_NOINLINE ::Tile* Arena::CreateMaybeMessage< ::Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateMap* Arena::CreateMaybeMessage< ::UpdateMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateMap >(arena);
}
template<> PROTOBUF_NOINLINE ::UnitBuildTask* Arena::CreateMaybeMessage< ::UnitBuildTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnitBuildTask >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildingBuildTask* Arena::CreateMaybeMessage< ::BuildingBuildTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildingBuildTask >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildTaskKind* Arena::CreateMaybeMessage< ::BuildTaskKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildTaskKind >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildTask* Arena::CreateMaybeMessage< ::BuildTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildTask >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateCity* Arena::CreateMaybeMessage< ::UpdateCity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateCity >(arena);
}
template<> PROTOBUF_NOINLINE ::Path* Arena::CreateMaybeMessage< ::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::FoundCityCapability* Arena::CreateMaybeMessage< ::FoundCityCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FoundCityCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerTaskImprovement* Arena::CreateMaybeMessage< ::WorkerTaskImprovement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerTaskImprovement >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerTaskKind* Arena::CreateMaybeMessage< ::WorkerTaskKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerTaskKind >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerTask* Arena::CreateMaybeMessage< ::WorkerTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerTask >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerCapability* Arena::CreateMaybeMessage< ::WorkerCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::CarryUnitsCapability* Arena::CreateMaybeMessage< ::CarryUnitsCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarryUnitsCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::Capability* Arena::CreateMaybeMessage< ::Capability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Capability >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateUnit* Arena::CreateMaybeMessage< ::UpdateUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::ResearchingTech* Arena::CreateMaybeMessage< ::ResearchingTech >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResearchingTech >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdatePlayer* Arena::CreateMaybeMessage< ::UpdatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::PathComputed* Arena::CreateMaybeMessage< ::PathComputed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PathComputed >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfirmMoveUnits* Arena::CreateMaybeMessage< ::ConfirmMoveUnits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfirmMoveUnits >(arena);
}
template<> PROTOBUF_NOINLINE ::PossibleCityBuildTasks* Arena::CreateMaybeMessage< ::PossibleCityBuildTasks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PossibleCityBuildTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::PossibleTechs* Arena::CreateMaybeMessage< ::PossibleTechs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PossibleTechs >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteUnit* Arena::CreateMaybeMessage< ::DeleteUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeleteUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::MoveUnits* Arena::CreateMaybeMessage< ::MoveUnits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MoveUnits >(arena);
}
template<> PROTOBUF_NOINLINE ::SetCityBuildTask* Arena::CreateMaybeMessage< ::SetCityBuildTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetCityBuildTask >(arena);
}
template<> PROTOBUF_NOINLINE ::SetWorkerTask* Arena::CreateMaybeMessage< ::SetWorkerTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetWorkerTask >(arena);
}
template<> PROTOBUF_NOINLINE ::ComputePath* Arena::CreateMaybeMessage< ::ComputePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComputePath >(arena);
}
template<> PROTOBUF_NOINLINE ::SetEconomySettings* Arena::CreateMaybeMessage< ::SetEconomySettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetEconomySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::SetResearch* Arena::CreateMaybeMessage< ::SetResearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetResearch >(arena);
}
template<> PROTOBUF_NOINLINE ::EndTurn* Arena::CreateMaybeMessage< ::EndTurn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EndTurn >(arena);
}
template<> PROTOBUF_NOINLINE ::GetBuildTasks* Arena::CreateMaybeMessage< ::GetBuildTasks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetBuildTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::GetPossibleTechs* Arena::CreateMaybeMessage< ::GetPossibleTechs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetPossibleTechs >(arena);
}
template<> PROTOBUF_NOINLINE ::DoUnitAction* Arena::CreateMaybeMessage< ::DoUnitAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DoUnitAction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
