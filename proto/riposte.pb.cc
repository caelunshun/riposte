// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riposte.proto

#include "riposte.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildTask_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BuildTaskKind_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildingBuildTask_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Capability_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarryUnitsCapability_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientInfo_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FoundCityCapability_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Improvement_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LobbyError_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathComputed_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResearchingTech_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfo_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartGame_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Tile_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitBuildTask_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateCity_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateGlobalData_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateMap_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePlayer_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateUnit_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerCapability_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerTask_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerTaskImprovement_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerTaskKind_riposte_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_riposte_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Yield_riposte_2eproto;
class PosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pos> _instance;
} _Pos_default_instance_;
class AnyClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyClient> _instance;
  const ::ClientInfo* clientinfo_;
} _AnyClient_default_instance_;
class AnyServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyServer> _instance;
  const ::ServerInfo* serverinfo_;
  const ::StartGame* startgame_;
  const ::LobbyError* lobbyerror_;
  const ::UpdateGlobalData* updateglobaldata_;
  const ::UpdateMap* updatemap_;
  const ::UpdateCity* updatecity_;
  const ::UpdateUnit* updateunit_;
  const ::UpdatePlayer* updateplayer_;
  const ::PathComputed* pathcomputed_;
} _AnyServer_default_instance_;
class ClientInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientInfo> _instance;
} _ClientInfo_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfo> _instance;
} _ServerInfo_default_instance_;
class KickPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickPlayer> _instance;
} _KickPlayer_default_instance_;
class SetLeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLeader> _instance;
} _SetLeader_default_instance_;
class AdminStartGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminStartGame> _instance;
} _AdminStartGame_default_instance_;
class LobbyErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LobbyError> _instance;
} _LobbyError_default_instance_;
class StartGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartGame> _instance;
} _StartGame_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
class UpdateGlobalDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateGlobalData> _instance;
} _UpdateGlobalData_default_instance_;
class ImprovementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Improvement> _instance;
} _Improvement_default_instance_;
class YieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Yield> _instance;
} _Yield_default_instance_;
class TileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tile> _instance;
} _Tile_default_instance_;
class UpdateMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMap> _instance;
} _UpdateMap_default_instance_;
class UnitBuildTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitBuildTask> _instance;
} _UnitBuildTask_default_instance_;
class BuildingBuildTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildingBuildTask> _instance;
} _BuildingBuildTask_default_instance_;
class BuildTaskKindDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildTaskKind> _instance;
  const ::UnitBuildTask* unit_;
  const ::BuildingBuildTask* building_;
} _BuildTaskKind_default_instance_;
class BuildTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildTask> _instance;
} _BuildTask_default_instance_;
class UpdateCityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCity> _instance;
} _UpdateCity_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class FoundCityCapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FoundCityCapability> _instance;
} _FoundCityCapability_default_instance_;
class WorkerTaskImprovementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerTaskImprovement> _instance;
} _WorkerTaskImprovement_default_instance_;
class WorkerTaskKindDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerTaskKind> _instance;
  const ::WorkerTaskImprovement* buildimprovement_;
} _WorkerTaskKind_default_instance_;
class WorkerTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerTask> _instance;
} _WorkerTask_default_instance_;
class WorkerCapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerCapability> _instance;
} _WorkerCapability_default_instance_;
class CarryUnitsCapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarryUnitsCapability> _instance;
} _CarryUnitsCapability_default_instance_;
class CapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capability> _instance;
  const ::FoundCityCapability* foundcity_;
  const ::WorkerCapability* worker_;
  const ::CarryUnitsCapability* carryunits_;
} _Capability_default_instance_;
class UpdateUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateUnit> _instance;
} _UpdateUnit_default_instance_;
class ResearchingTechDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResearchingTech> _instance;
} _ResearchingTech_default_instance_;
class UpdatePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlayer> _instance;
} _UpdatePlayer_default_instance_;
class PathComputedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathComputed> _instance;
} _PathComputed_default_instance_;
class MoveUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveUnit> _instance;
} _MoveUnit_default_instance_;
class SetCityBuildTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCityBuildTask> _instance;
} _SetCityBuildTask_default_instance_;
class SetWorkerTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetWorkerTask> _instance;
} _SetWorkerTask_default_instance_;
class ComputePathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComputePath> _instance;
} _ComputePath_default_instance_;
class SetEconomySettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEconomySettings> _instance;
} _SetEconomySettings_default_instance_;
class SetResearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResearch> _instance;
} _SetResearch_default_instance_;
static void InitDefaultsscc_info_AdminStartGame_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminStartGame_default_instance_;
    new (ptr) ::AdminStartGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminStartGame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminStartGame_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminStartGame_riposte_2eproto}, {}};

static void InitDefaultsscc_info_AnyClient_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnyClient_default_instance_;
    new (ptr) ::AnyClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnyClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnyClient_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnyClient_riposte_2eproto}, {
      &scc_info_ClientInfo_riposte_2eproto.base,}};

static void InitDefaultsscc_info_AnyServer_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnyServer_default_instance_;
    new (ptr) ::AnyServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnyServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_AnyServer_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_AnyServer_riposte_2eproto}, {
      &scc_info_ServerInfo_riposte_2eproto.base,
      &scc_info_StartGame_riposte_2eproto.base,
      &scc_info_LobbyError_riposte_2eproto.base,
      &scc_info_UpdateGlobalData_riposte_2eproto.base,
      &scc_info_UpdateMap_riposte_2eproto.base,
      &scc_info_UpdateCity_riposte_2eproto.base,
      &scc_info_UpdateUnit_riposte_2eproto.base,
      &scc_info_UpdatePlayer_riposte_2eproto.base,
      &scc_info_PathComputed_riposte_2eproto.base,}};

static void InitDefaultsscc_info_BuildTask_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildTask_default_instance_;
    new (ptr) ::BuildTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BuildTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildTask_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildTask_riposte_2eproto}, {
      &scc_info_BuildTaskKind_riposte_2eproto.base,}};

static void InitDefaultsscc_info_BuildTaskKind_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildTaskKind_default_instance_;
    new (ptr) ::BuildTaskKind();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BuildTaskKind::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BuildTaskKind_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BuildTaskKind_riposte_2eproto}, {
      &scc_info_UnitBuildTask_riposte_2eproto.base,
      &scc_info_BuildingBuildTask_riposte_2eproto.base,}};

static void InitDefaultsscc_info_BuildingBuildTask_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildingBuildTask_default_instance_;
    new (ptr) ::BuildingBuildTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BuildingBuildTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildingBuildTask_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildingBuildTask_riposte_2eproto}, {}};

static void InitDefaultsscc_info_Capability_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Capability_default_instance_;
    new (ptr) ::Capability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Capability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Capability_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Capability_riposte_2eproto}, {
      &scc_info_FoundCityCapability_riposte_2eproto.base,
      &scc_info_WorkerCapability_riposte_2eproto.base,
      &scc_info_CarryUnitsCapability_riposte_2eproto.base,}};

static void InitDefaultsscc_info_CarryUnitsCapability_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CarryUnitsCapability_default_instance_;
    new (ptr) ::CarryUnitsCapability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CarryUnitsCapability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarryUnitsCapability_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CarryUnitsCapability_riposte_2eproto}, {}};

static void InitDefaultsscc_info_ClientInfo_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientInfo_default_instance_;
    new (ptr) ::ClientInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientInfo_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientInfo_riposte_2eproto}, {}};

static void InitDefaultsscc_info_ComputePath_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ComputePath_default_instance_;
    new (ptr) ::ComputePath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ComputePath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ComputePath_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ComputePath_riposte_2eproto}, {
      &scc_info_Pos_riposte_2eproto.base,}};

static void InitDefaultsscc_info_FoundCityCapability_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FoundCityCapability_default_instance_;
    new (ptr) ::FoundCityCapability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FoundCityCapability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FoundCityCapability_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FoundCityCapability_riposte_2eproto}, {}};

static void InitDefaultsscc_info_Improvement_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Improvement_default_instance_;
    new (ptr) ::Improvement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Improvement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Improvement_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Improvement_riposte_2eproto}, {}};

static void InitDefaultsscc_info_KickPlayer_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KickPlayer_default_instance_;
    new (ptr) ::KickPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KickPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KickPlayer_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KickPlayer_riposte_2eproto}, {}};

static void InitDefaultsscc_info_LobbyError_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LobbyError_default_instance_;
    new (ptr) ::LobbyError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LobbyError_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LobbyError_riposte_2eproto}, {}};

static void InitDefaultsscc_info_MoveUnit_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MoveUnit_default_instance_;
    new (ptr) ::MoveUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MoveUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveUnit_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveUnit_riposte_2eproto}, {
      &scc_info_Pos_riposte_2eproto.base,}};

static void InitDefaultsscc_info_Path_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Path_default_instance_;
    new (ptr) ::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Path_riposte_2eproto}, {}};

static void InitDefaultsscc_info_PathComputed_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PathComputed_default_instance_;
    new (ptr) ::PathComputed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PathComputed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathComputed_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PathComputed_riposte_2eproto}, {
      &scc_info_Path_riposte_2eproto.base,}};

static void InitDefaultsscc_info_PlayerInfo_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfo_default_instance_;
    new (ptr) ::PlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInfo_riposte_2eproto}, {}};

static void InitDefaultsscc_info_Pos_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Pos_default_instance_;
    new (ptr) ::Pos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pos_riposte_2eproto}, {}};

static void InitDefaultsscc_info_ResearchingTech_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResearchingTech_default_instance_;
    new (ptr) ::ResearchingTech();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResearchingTech::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResearchingTech_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResearchingTech_riposte_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfo_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerInfo_default_instance_;
    new (ptr) ::ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfo_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerInfo_riposte_2eproto}, {
      &scc_info_PlayerInfo_riposte_2eproto.base,}};

static void InitDefaultsscc_info_SetCityBuildTask_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetCityBuildTask_default_instance_;
    new (ptr) ::SetCityBuildTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetCityBuildTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetCityBuildTask_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetCityBuildTask_riposte_2eproto}, {
      &scc_info_BuildTaskKind_riposte_2eproto.base,}};

static void InitDefaultsscc_info_SetEconomySettings_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetEconomySettings_default_instance_;
    new (ptr) ::SetEconomySettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetEconomySettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetEconomySettings_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetEconomySettings_riposte_2eproto}, {}};

static void InitDefaultsscc_info_SetLeader_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetLeader_default_instance_;
    new (ptr) ::SetLeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetLeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetLeader_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetLeader_riposte_2eproto}, {}};

static void InitDefaultsscc_info_SetResearch_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetResearch_default_instance_;
    new (ptr) ::SetResearch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetResearch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResearch_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetResearch_riposte_2eproto}, {}};

static void InitDefaultsscc_info_SetWorkerTask_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetWorkerTask_default_instance_;
    new (ptr) ::SetWorkerTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetWorkerTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetWorkerTask_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetWorkerTask_riposte_2eproto}, {
      &scc_info_WorkerTask_riposte_2eproto.base,}};

static void InitDefaultsscc_info_StartGame_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartGame_default_instance_;
    new (ptr) ::StartGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartGame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartGame_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartGame_riposte_2eproto}, {}};

static void InitDefaultsscc_info_Tile_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Tile_default_instance_;
    new (ptr) ::Tile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Tile_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Tile_riposte_2eproto}, {
      &scc_info_Improvement_riposte_2eproto.base,
      &scc_info_Yield_riposte_2eproto.base,}};

static void InitDefaultsscc_info_UnitBuildTask_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnitBuildTask_default_instance_;
    new (ptr) ::UnitBuildTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnitBuildTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitBuildTask_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitBuildTask_riposte_2eproto}, {}};

static void InitDefaultsscc_info_UpdateCity_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateCity_default_instance_;
    new (ptr) ::UpdateCity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateCity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateCity_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateCity_riposte_2eproto}, {
      &scc_info_Pos_riposte_2eproto.base,
      &scc_info_BuildTask_riposte_2eproto.base,}};

static void InitDefaultsscc_info_UpdateGlobalData_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateGlobalData_default_instance_;
    new (ptr) ::UpdateGlobalData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateGlobalData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateGlobalData_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateGlobalData_riposte_2eproto}, {
      &scc_info_PlayerInfo_riposte_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMap_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateMap_default_instance_;
    new (ptr) ::UpdateMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateMap_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateMap_riposte_2eproto}, {
      &scc_info_Tile_riposte_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePlayer_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdatePlayer_default_instance_;
    new (ptr) ::UpdatePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdatePlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePlayer_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePlayer_riposte_2eproto}, {
      &scc_info_ResearchingTech_riposte_2eproto.base,}};

static void InitDefaultsscc_info_UpdateUnit_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateUnit_default_instance_;
    new (ptr) ::UpdateUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateUnit_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateUnit_riposte_2eproto}, {
      &scc_info_Pos_riposte_2eproto.base,
      &scc_info_Path_riposte_2eproto.base,
      &scc_info_Capability_riposte_2eproto.base,}};

static void InitDefaultsscc_info_WorkerCapability_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorkerCapability_default_instance_;
    new (ptr) ::WorkerCapability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorkerCapability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerCapability_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkerCapability_riposte_2eproto}, {
      &scc_info_WorkerTask_riposte_2eproto.base,}};

static void InitDefaultsscc_info_WorkerTask_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorkerTask_default_instance_;
    new (ptr) ::WorkerTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorkerTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerTask_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkerTask_riposte_2eproto}, {
      &scc_info_WorkerTaskKind_riposte_2eproto.base,}};

static void InitDefaultsscc_info_WorkerTaskImprovement_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorkerTaskImprovement_default_instance_;
    new (ptr) ::WorkerTaskImprovement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorkerTaskImprovement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerTaskImprovement_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkerTaskImprovement_riposte_2eproto}, {}};

static void InitDefaultsscc_info_WorkerTaskKind_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorkerTaskKind_default_instance_;
    new (ptr) ::WorkerTaskKind();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorkerTaskKind::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerTaskKind_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkerTaskKind_riposte_2eproto}, {
      &scc_info_WorkerTaskImprovement_riposte_2eproto.base,}};

static void InitDefaultsscc_info_Yield_riposte_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Yield_default_instance_;
    new (ptr) ::Yield();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Yield::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Yield_riposte_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Yield_riposte_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_riposte_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_riposte_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_riposte_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_riposte_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pos, x_),
  PROTOBUF_FIELD_OFFSET(::Pos, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AnyClient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AnyClient, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::AnyClientDefaultTypeInternal, clientinfo_),
  PROTOBUF_FIELD_OFFSET(::AnyClient, packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AnyServer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AnyServer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::AnyServerDefaultTypeInternal, serverinfo_),
  offsetof(::AnyServerDefaultTypeInternal, startgame_),
  offsetof(::AnyServerDefaultTypeInternal, lobbyerror_),
  offsetof(::AnyServerDefaultTypeInternal, updateglobaldata_),
  offsetof(::AnyServerDefaultTypeInternal, updatemap_),
  offsetof(::AnyServerDefaultTypeInternal, updatecity_),
  offsetof(::AnyServerDefaultTypeInternal, updateunit_),
  offsetof(::AnyServerDefaultTypeInternal, updateplayer_),
  offsetof(::AnyServerDefaultTypeInternal, pathcomputed_),
  PROTOBUF_FIELD_OFFSET(::AnyServer, packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientInfo, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerInfo, playerid_),
  PROTOBUF_FIELD_OFFSET(::ServerInfo, currentplayers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KickPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KickPlayer, id_),
  PROTOBUF_FIELD_OFFSET(::KickPlayer, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetLeader, civid_),
  PROTOBUF_FIELD_OFFSET(::SetLeader, leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AdminStartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LobbyError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyError, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, username_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, civid_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, leadername_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, score_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PlayerInfo, isadmin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, players_),
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, turn_),
  PROTOBUF_FIELD_OFFSET(::UpdateGlobalData, era_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Improvement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Improvement, id_),
  PROTOBUF_FIELD_OFFSET(::Improvement, cottagelevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Yield, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Yield, hammers_),
  PROTOBUF_FIELD_OFFSET(::Yield, commerce_),
  PROTOBUF_FIELD_OFFSET(::Yield, food_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tile, terrain_),
  PROTOBUF_FIELD_OFFSET(::Tile, forested_),
  PROTOBUF_FIELD_OFFSET(::Tile, hilled_),
  PROTOBUF_FIELD_OFFSET(::Tile, improvements_),
  PROTOBUF_FIELD_OFFSET(::Tile, yield_),
  PROTOBUF_FIELD_OFFSET(::Tile, ownerid_),
  PROTOBUF_FIELD_OFFSET(::Tile, hasowner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateMap, width_),
  PROTOBUF_FIELD_OFFSET(::UpdateMap, height_),
  PROTOBUF_FIELD_OFFSET(::UpdateMap, tiles_),
  PROTOBUF_FIELD_OFFSET(::UpdateMap, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnitBuildTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnitBuildTask, unitkindid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildingBuildTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildingBuildTask, buildingid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildTaskKind, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::BuildTaskKind, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::BuildTaskKindDefaultTypeInternal, unit_),
  offsetof(::BuildTaskKindDefaultTypeInternal, building_),
  PROTOBUF_FIELD_OFFSET(::BuildTaskKind, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildTask, kind_),
  PROTOBUF_FIELD_OFFSET(::BuildTask, progress_),
  PROTOBUF_FIELD_OFFSET(::BuildTask, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateCity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateCity, pos_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, name_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, ownerid_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, buildtask_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, hammersperturn_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, culture_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, cultureneeded_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, id_),
  PROTOBUF_FIELD_OFFSET(::UpdateCity, buildingnames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Path, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FoundCityCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerTaskImprovement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorkerTaskImprovement, improvementid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerTaskKind, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WorkerTaskKind, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::WorkerTaskKindDefaultTypeInternal, buildimprovement_),
  PROTOBUF_FIELD_OFFSET(::WorkerTaskKind, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorkerTask, name_),
  PROTOBUF_FIELD_OFFSET(::WorkerTask, turnsleft_),
  PROTOBUF_FIELD_OFFSET(::WorkerTask, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorkerCapability, currenttask_),
  PROTOBUF_FIELD_OFFSET(::WorkerCapability, possibletasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarryUnitsCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarryUnitsCapability, carryingunitids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Capability, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Capability, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::CapabilityDefaultTypeInternal, foundcity_),
  offsetof(::CapabilityDefaultTypeInternal, worker_),
  offsetof(::CapabilityDefaultTypeInternal, carryunits_),
  PROTOBUF_FIELD_OFFSET(::Capability, cap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, pos_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, kindid_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, ownerid_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, health_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, movementleft_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, followingpath_),
  PROTOBUF_FIELD_OFFSET(::UpdateUnit, capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResearchingTech, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ResearchingTech, techid_),
  PROTOBUF_FIELD_OFFSET(::ResearchingTech, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, id_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, username_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, baserevenue_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, beakerrevenue_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, goldrevenue_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, expenses_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, netgold_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, gold_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, researchingtech_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, capitalcityid_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, unlockedtechids_),
  PROTOBUF_FIELD_OFFSET(::UpdatePlayer, possibleresearches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PathComputed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PathComputed, pathid_),
  PROTOBUF_FIELD_OFFSET(::PathComputed, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MoveUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MoveUnit, unitid_),
  PROTOBUF_FIELD_OFFSET(::MoveUnit, newpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetCityBuildTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetCityBuildTask, cityid_),
  PROTOBUF_FIELD_OFFSET(::SetCityBuildTask, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetWorkerTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetWorkerTask, workerid_),
  PROTOBUF_FIELD_OFFSET(::SetWorkerTask, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ComputePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ComputePath, unitid_),
  PROTOBUF_FIELD_OFFSET(::ComputePath, from_),
  PROTOBUF_FIELD_OFFSET(::ComputePath, to_),
  PROTOBUF_FIELD_OFFSET(::ComputePath, pathid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetEconomySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetEconomySettings, beakerpercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetResearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetResearch, techid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pos)},
  { 7, -1, sizeof(::AnyClient)},
  { 14, -1, sizeof(::AnyServer)},
  { 29, -1, sizeof(::ClientInfo)},
  { 35, -1, sizeof(::ServerInfo)},
  { 42, -1, sizeof(::KickPlayer)},
  { 49, -1, sizeof(::SetLeader)},
  { 56, -1, sizeof(::AdminStartGame)},
  { 61, -1, sizeof(::LobbyError)},
  { 67, -1, sizeof(::StartGame)},
  { 72, -1, sizeof(::PlayerInfo)},
  { 83, -1, sizeof(::UpdateGlobalData)},
  { 91, -1, sizeof(::Improvement)},
  { 98, -1, sizeof(::Yield)},
  { 106, -1, sizeof(::Tile)},
  { 118, -1, sizeof(::UpdateMap)},
  { 127, -1, sizeof(::UnitBuildTask)},
  { 133, -1, sizeof(::BuildingBuildTask)},
  { 139, -1, sizeof(::BuildTaskKind)},
  { 147, -1, sizeof(::BuildTask)},
  { 155, -1, sizeof(::UpdateCity)},
  { 169, -1, sizeof(::Path)},
  { 175, -1, sizeof(::FoundCityCapability)},
  { 180, -1, sizeof(::WorkerTaskImprovement)},
  { 186, -1, sizeof(::WorkerTaskKind)},
  { 193, -1, sizeof(::WorkerTask)},
  { 201, -1, sizeof(::WorkerCapability)},
  { 208, -1, sizeof(::CarryUnitsCapability)},
  { 214, -1, sizeof(::Capability)},
  { 223, -1, sizeof(::UpdateUnit)},
  { 235, -1, sizeof(::ResearchingTech)},
  { 242, -1, sizeof(::UpdatePlayer)},
  { 259, -1, sizeof(::PathComputed)},
  { 266, -1, sizeof(::MoveUnit)},
  { 273, -1, sizeof(::SetCityBuildTask)},
  { 280, -1, sizeof(::SetWorkerTask)},
  { 287, -1, sizeof(::ComputePath)},
  { 296, -1, sizeof(::SetEconomySettings)},
  { 302, -1, sizeof(::SetResearch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AnyClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AnyServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_KickPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AdminStartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LobbyError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateGlobalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Improvement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Yield_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Tile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnitBuildTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildingBuildTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildTaskKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateCity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FoundCityCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerTaskImprovement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerTaskKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CarryUnitsCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Capability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResearchingTech_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdatePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PathComputed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MoveUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetCityBuildTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetWorkerTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ComputePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetEconomySettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetResearch_default_instance_),
};

const char descriptor_table_protodef_riposte_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rriposte.proto\"\033\n\003Pos\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002"
  " \001(\r\"8\n\tAnyClient\022!\n\nclientInfo\030\001 \001(\0132\013."
  "ClientInfoH\000B\010\n\006packet\"\340\002\n\tAnyServer\022!\n\n"
  "serverInfo\030\001 \001(\0132\013.ServerInfoH\000\022\037\n\tstart"
  "Game\030\002 \001(\0132\n.StartGameH\000\022!\n\nlobbyError\030\003"
  " \001(\0132\013.LobbyErrorH\000\022-\n\020updateGlobalData\030"
  "\004 \001(\0132\021.UpdateGlobalDataH\000\022\037\n\tupdateMap\030"
  "\005 \001(\0132\n.UpdateMapH\000\022!\n\nupdateCity\030\006 \001(\0132"
  "\013.UpdateCityH\000\022!\n\nupdateUnit\030\007 \001(\0132\013.Upd"
  "ateUnitH\000\022%\n\014updatePlayer\030\010 \001(\0132\r.Update"
  "PlayerH\000\022%\n\014pathComputed\030\t \001(\0132\r.PathCom"
  "putedH\000B\010\n\006packet\"\036\n\nClientInfo\022\020\n\010usern"
  "ame\030\001 \001(\t\"C\n\nServerInfo\022\020\n\010playerID\030\001 \001("
  "\005\022#\n\016currentPlayers\030\002 \003(\0132\013.PlayerInfo\"("
  "\n\nKickPlayer\022\n\n\002ID\030\001 \001(\005\022\016\n\006reason\030\002 \001(\t"
  "\"*\n\tSetLeader\022\r\n\005civID\030\001 \001(\t\022\016\n\006leader\030\002"
  " \001(\t\"\020\n\016AdminStartGame\"\035\n\nLobbyError\022\017\n\007"
  "message\030\001 \001(\t\"\013\n\tStartGame\"m\n\nPlayerInfo"
  "\022\020\n\010username\030\001 \001(\t\022\r\n\005civID\030\002 \001(\t\022\022\n\nlea"
  "derName\030\003 \001(\t\022\r\n\005score\030\004 \001(\005\022\n\n\002id\030\005 \001(\005"
  "\022\017\n\007isAdmin\030\006 \001(\010\"Q\n\020UpdateGlobalData\022\034\n"
  "\007players\030\001 \003(\0132\013.PlayerInfo\022\014\n\004turn\030\002 \001("
  "\005\022\021\n\003era\030\003 \001(\0162\004.Era\"/\n\013Improvement\022\n\n\002i"
  "d\030\001 \001(\t\022\024\n\014cottageLevel\030\002 \001(\t\"8\n\005Yield\022\017"
  "\n\007hammers\030\001 \001(\005\022\020\n\010commerce\030\002 \001(\005\022\014\n\004foo"
  "d\030\003 \001(\005\"\241\001\n\004Tile\022\031\n\007terrain\030\001 \001(\0162\010.Terr"
  "ain\022\020\n\010forested\030\002 \001(\010\022\016\n\006hilled\030\003 \001(\010\022\"\n"
  "\014improvements\030\004 \003(\0132\014.Improvement\022\025\n\005yie"
  "ld\030\005 \001(\0132\006.Yield\022\017\n\007ownerID\030\006 \001(\005\022\020\n\010has"
  "Owner\030\007 \001(\010\"a\n\tUpdateMap\022\r\n\005width\030\001 \001(\r\022"
  "\016\n\006height\030\002 \001(\r\022\024\n\005tiles\030\003 \003(\0132\005.Tile\022\037\n"
  "\nvisibility\030\004 \003(\0162\013.Visibility\"#\n\rUnitBu"
  "ildTask\022\022\n\nunitKindID\030\001 \001(\t\"\'\n\021BuildingB"
  "uildTask\022\022\n\nbuildingID\030\001 \001(\t\"_\n\rBuildTas"
  "kKind\022\036\n\004unit\030\001 \001(\0132\016.UnitBuildTaskH\000\022&\n"
  "\010building\030\002 \001(\0132\022.BuildingBuildTaskH\000B\006\n"
  "\004task\"I\n\tBuildTask\022\034\n\004kind\030\001 \001(\0132\016.Build"
  "TaskKind\022\020\n\010progress\030\002 \001(\005\022\014\n\004cost\030\003 \001(\005"
  "\"\300\001\n\nUpdateCity\022\021\n\003pos\030\001 \001(\0132\004.Pos\022\014\n\004na"
  "me\030\002 \001(\t\022\017\n\007ownerID\030\003 \001(\005\022\035\n\tbuildTask\030\004"
  " \001(\0132\n.BuildTask\022\026\n\016hammersPerTurn\030\005 \001(\005"
  "\022\017\n\007culture\030\006 \001(\005\022\025\n\rcultureNeeded\030\007 \001(\005"
  "\022\n\n\002ID\030\010 \001(\005\022\025\n\rbuildingNames\030\t \003(\t\"\031\n\004P"
  "ath\022\021\n\tpositions\030\001 \003(\r\"\025\n\023FoundCityCapab"
  "ility\".\n\025WorkerTaskImprovement\022\025\n\rimprov"
  "ementID\030\001 \001(\t\"L\n\016WorkerTaskKind\0222\n\020build"
  "Improvement\030\001 \001(\0132\026.WorkerTaskImprovemen"
  "tH\000B\006\n\004kind\"L\n\nWorkerTask\022\014\n\004name\030\001 \001(\t\022"
  "\021\n\tturnsLeft\030\002 \001(\005\022\035\n\004kind\030\003 \001(\0132\017.Worke"
  "rTaskKind\"X\n\020WorkerCapability\022 \n\013current"
  "Task\030\001 \001(\0132\013.WorkerTask\022\"\n\rpossibleTasks"
  "\030\002 \003(\0132\013.WorkerTask\"/\n\024CarryUnitsCapabil"
  "ity\022\027\n\017carryingUnitIDs\030\001 \003(\005\"\220\001\n\nCapabil"
  "ity\022)\n\tfoundCity\030\001 \001(\0132\024.FoundCityCapabi"
  "lityH\000\022#\n\006worker\030\002 \001(\0132\021.WorkerCapabilit"
  "yH\000\022+\n\ncarryUnits\030\003 \001(\0132\025.CarryUnitsCapa"
  "bilityH\000B\005\n\003cap\"\247\001\n\nUpdateUnit\022\021\n\003pos\030\001 "
  "\001(\0132\004.Pos\022\016\n\006kindID\030\002 \001(\t\022\017\n\007ownerID\030\003 \001"
  "(\005\022\016\n\006health\030\004 \001(\001\022\024\n\014movementLeft\030\005 \001(\001"
  "\022\034\n\rfollowingPath\030\006 \001(\0132\005.Path\022!\n\014capabi"
  "lities\030\007 \003(\0132\013.Capability\"3\n\017Researching"
  "Tech\022\016\n\006techID\030\001 \001(\t\022\020\n\010progress\030\002 \001(\005\"\225"
  "\002\n\014UpdatePlayer\022\n\n\002ID\030\001 \001(\005\022\020\n\010username\030"
  "\002 \001(\t\022\023\n\013baseRevenue\030\003 \001(\005\022\025\n\rbeakerReve"
  "nue\030\004 \001(\005\022\023\n\013goldRevenue\030\005 \001(\005\022\020\n\010expens"
  "es\030\006 \001(\005\022\017\n\007netGold\030\007 \001(\005\022\014\n\004gold\030\010 \001(\005\022"
  ")\n\017researchingTech\030\t \001(\0132\020.ResearchingTe"
  "ch\022\025\n\rcapitalCityID\030\n \001(\005\022\027\n\017unlockedTec"
  "hIDs\030\013 \003(\t\022\032\n\022possibleResearches\030\014 \003(\t\"3"
  "\n\014PathComputed\022\016\n\006pathID\030\001 \001(\005\022\023\n\004path\030\002"
  " \001(\0132\005.Path\"0\n\010MoveUnit\022\016\n\006unitID\030\001 \001(\005\022"
  "\024\n\006newPos\030\002 \001(\0132\004.Pos\"@\n\020SetCityBuildTas"
  "k\022\016\n\006cityID\030\001 \001(\005\022\034\n\004task\030\002 \001(\0132\016.BuildT"
  "askKind\"<\n\rSetWorkerTask\022\020\n\010workerID\030\001 \001"
  "(\005\022\031\n\004task\030\002 \001(\0132\013.WorkerTask\"S\n\013Compute"
  "Path\022\016\n\006unitID\030\001 \001(\005\022\022\n\004from\030\002 \001(\0132\004.Pos"
  "\022\020\n\002to\030\003 \001(\0132\004.Pos\022\016\n\006pathID\030\004 \001(\005\"+\n\022Se"
  "tEconomySettings\022\025\n\rbeakerPercent\030\001 \001(\005\""
  "\035\n\013SetResearch\022\016\n\006techID\030\001 \001(\t*h\n\003Era\022\013\n"
  "\007Ancient\020\000\022\r\n\tClassical\020\001\022\014\n\010Medieval\020\002\022"
  "\017\n\013Renaissance\020\003\022\016\n\nIndustrial\020\004\022\n\n\006Mode"
  "rn\020\005\022\n\n\006Future\020\006*;\n\007Terrain\022\r\n\tGrassland"
  "\020\000\022\n\n\006Desert\020\001\022\t\n\005Ocean\020\002\022\n\n\006Plains\020\003*1\n"
  "\nVisibility\022\013\n\007Visible\020\000\022\n\n\006Fogged\020\001\022\n\n\006"
  "Hidden\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_riposte_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_riposte_2eproto_sccs[39] = {
  &scc_info_AdminStartGame_riposte_2eproto.base,
  &scc_info_AnyClient_riposte_2eproto.base,
  &scc_info_AnyServer_riposte_2eproto.base,
  &scc_info_BuildTask_riposte_2eproto.base,
  &scc_info_BuildTaskKind_riposte_2eproto.base,
  &scc_info_BuildingBuildTask_riposte_2eproto.base,
  &scc_info_Capability_riposte_2eproto.base,
  &scc_info_CarryUnitsCapability_riposte_2eproto.base,
  &scc_info_ClientInfo_riposte_2eproto.base,
  &scc_info_ComputePath_riposte_2eproto.base,
  &scc_info_FoundCityCapability_riposte_2eproto.base,
  &scc_info_Improvement_riposte_2eproto.base,
  &scc_info_KickPlayer_riposte_2eproto.base,
  &scc_info_LobbyError_riposte_2eproto.base,
  &scc_info_MoveUnit_riposte_2eproto.base,
  &scc_info_Path_riposte_2eproto.base,
  &scc_info_PathComputed_riposte_2eproto.base,
  &scc_info_PlayerInfo_riposte_2eproto.base,
  &scc_info_Pos_riposte_2eproto.base,
  &scc_info_ResearchingTech_riposte_2eproto.base,
  &scc_info_ServerInfo_riposte_2eproto.base,
  &scc_info_SetCityBuildTask_riposte_2eproto.base,
  &scc_info_SetEconomySettings_riposte_2eproto.base,
  &scc_info_SetLeader_riposte_2eproto.base,
  &scc_info_SetResearch_riposte_2eproto.base,
  &scc_info_SetWorkerTask_riposte_2eproto.base,
  &scc_info_StartGame_riposte_2eproto.base,
  &scc_info_Tile_riposte_2eproto.base,
  &scc_info_UnitBuildTask_riposte_2eproto.base,
  &scc_info_UpdateCity_riposte_2eproto.base,
  &scc_info_UpdateGlobalData_riposte_2eproto.base,
  &scc_info_UpdateMap_riposte_2eproto.base,
  &scc_info_UpdatePlayer_riposte_2eproto.base,
  &scc_info_UpdateUnit_riposte_2eproto.base,
  &scc_info_WorkerCapability_riposte_2eproto.base,
  &scc_info_WorkerTask_riposte_2eproto.base,
  &scc_info_WorkerTaskImprovement_riposte_2eproto.base,
  &scc_info_WorkerTaskKind_riposte_2eproto.base,
  &scc_info_Yield_riposte_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_riposte_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_riposte_2eproto = {
  false, false, descriptor_table_protodef_riposte_2eproto, "riposte.proto", 3376,
  &descriptor_table_riposte_2eproto_once, descriptor_table_riposte_2eproto_sccs, descriptor_table_riposte_2eproto_deps, 39, 0,
  schemas, file_default_instances, TableStruct_riposte_2eproto::offsets,
  file_level_metadata_riposte_2eproto, 39, file_level_enum_descriptors_riposte_2eproto, file_level_service_descriptors_riposte_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_riposte_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_riposte_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Era_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_riposte_2eproto);
  return file_level_enum_descriptors_riposte_2eproto[0];
}
bool Era_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Terrain_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_riposte_2eproto);
  return file_level_enum_descriptors_riposte_2eproto[1];
}
bool Terrain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_riposte_2eproto);
  return file_level_enum_descriptors_riposte_2eproto[2];
}
bool Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Pos::InitAsDefaultInstance() {
}
class Pos::_Internal {
 public:
};

Pos::Pos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Pos)
}
Pos::Pos(const Pos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Pos)
}

void Pos::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:Pos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pos::ArenaDtor(void* object) {
  Pos* _this = reinterpret_cast< Pos* >(object);
  (void)_this;
}
void Pos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pos& Pos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pos_riposte_2eproto.base);
  return *internal_default_instance();
}


void Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pos)
  return target;
}

size_t Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pos)
  GOOGLE_DCHECK_NE(&from, this);
  const Pos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pos)
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void Pos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  return true;
}

void Pos::InternalSwap(Pos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pos, y_)
      + sizeof(Pos::y_)
      - PROTOBUF_FIELD_OFFSET(Pos, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyClient::InitAsDefaultInstance() {
  ::_AnyClient_default_instance_.clientinfo_ = const_cast< ::ClientInfo*>(
      ::ClientInfo::internal_default_instance());
}
class AnyClient::_Internal {
 public:
  static const ::ClientInfo& clientinfo(const AnyClient* msg);
};

const ::ClientInfo&
AnyClient::_Internal::clientinfo(const AnyClient* msg) {
  return *msg->packet_.clientinfo_;
}
void AnyClient::set_allocated_clientinfo(::ClientInfo* clientinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (clientinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clientinfo);
    if (message_arena != submessage_arena) {
      clientinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientinfo, submessage_arena);
    }
    set_has_clientinfo();
    packet_.clientinfo_ = clientinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyClient.clientInfo)
}
AnyClient::AnyClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AnyClient)
}
AnyClient::AnyClient(const AnyClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_packet();
  switch (from.packet_case()) {
    case kClientInfo: {
      _internal_mutable_clientinfo()->::ClientInfo::MergeFrom(from._internal_clientinfo());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AnyClient)
}

void AnyClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyClient_riposte_2eproto.base);
  clear_has_packet();
}

AnyClient::~AnyClient() {
  // @@protoc_insertion_point(destructor:AnyClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_packet()) {
    clear_packet();
  }
}

void AnyClient::ArenaDtor(void* object) {
  AnyClient* _this = reinterpret_cast< AnyClient* >(object);
  (void)_this;
}
void AnyClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyClient& AnyClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyClient_riposte_2eproto.base);
  return *internal_default_instance();
}


void AnyClient::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:AnyClient)
  switch (packet_case()) {
    case kClientInfo: {
      if (GetArena() == nullptr) {
        delete packet_.clientinfo_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void AnyClient::Clear() {
// @@protoc_insertion_point(message_clear_start:AnyClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientInfo clientInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnyClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientInfo clientInfo = 1;
  if (_internal_has_clientinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clientinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnyClient)
  return target;
}

size_t AnyClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnyClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (packet_case()) {
    // .ClientInfo clientInfo = 1;
    case kClientInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.clientinfo_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnyClient)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnyClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnyClient)
    MergeFrom(*source);
  }
}

void AnyClient::MergeFrom(const AnyClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnyClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.packet_case()) {
    case kClientInfo: {
      _internal_mutable_clientinfo()->::ClientInfo::MergeFrom(from._internal_clientinfo());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
}

void AnyClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnyClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyClient::CopyFrom(const AnyClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnyClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyClient::IsInitialized() const {
  return true;
}

void AnyClient::InternalSwap(AnyClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(packet_, other->packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyServer::InitAsDefaultInstance() {
  ::_AnyServer_default_instance_.serverinfo_ = const_cast< ::ServerInfo*>(
      ::ServerInfo::internal_default_instance());
  ::_AnyServer_default_instance_.startgame_ = const_cast< ::StartGame*>(
      ::StartGame::internal_default_instance());
  ::_AnyServer_default_instance_.lobbyerror_ = const_cast< ::LobbyError*>(
      ::LobbyError::internal_default_instance());
  ::_AnyServer_default_instance_.updateglobaldata_ = const_cast< ::UpdateGlobalData*>(
      ::UpdateGlobalData::internal_default_instance());
  ::_AnyServer_default_instance_.updatemap_ = const_cast< ::UpdateMap*>(
      ::UpdateMap::internal_default_instance());
  ::_AnyServer_default_instance_.updatecity_ = const_cast< ::UpdateCity*>(
      ::UpdateCity::internal_default_instance());
  ::_AnyServer_default_instance_.updateunit_ = const_cast< ::UpdateUnit*>(
      ::UpdateUnit::internal_default_instance());
  ::_AnyServer_default_instance_.updateplayer_ = const_cast< ::UpdatePlayer*>(
      ::UpdatePlayer::internal_default_instance());
  ::_AnyServer_default_instance_.pathcomputed_ = const_cast< ::PathComputed*>(
      ::PathComputed::internal_default_instance());
}
class AnyServer::_Internal {
 public:
  static const ::ServerInfo& serverinfo(const AnyServer* msg);
  static const ::StartGame& startgame(const AnyServer* msg);
  static const ::LobbyError& lobbyerror(const AnyServer* msg);
  static const ::UpdateGlobalData& updateglobaldata(const AnyServer* msg);
  static const ::UpdateMap& updatemap(const AnyServer* msg);
  static const ::UpdateCity& updatecity(const AnyServer* msg);
  static const ::UpdateUnit& updateunit(const AnyServer* msg);
  static const ::UpdatePlayer& updateplayer(const AnyServer* msg);
  static const ::PathComputed& pathcomputed(const AnyServer* msg);
};

const ::ServerInfo&
AnyServer::_Internal::serverinfo(const AnyServer* msg) {
  return *msg->packet_.serverinfo_;
}
const ::StartGame&
AnyServer::_Internal::startgame(const AnyServer* msg) {
  return *msg->packet_.startgame_;
}
const ::LobbyError&
AnyServer::_Internal::lobbyerror(const AnyServer* msg) {
  return *msg->packet_.lobbyerror_;
}
const ::UpdateGlobalData&
AnyServer::_Internal::updateglobaldata(const AnyServer* msg) {
  return *msg->packet_.updateglobaldata_;
}
const ::UpdateMap&
AnyServer::_Internal::updatemap(const AnyServer* msg) {
  return *msg->packet_.updatemap_;
}
const ::UpdateCity&
AnyServer::_Internal::updatecity(const AnyServer* msg) {
  return *msg->packet_.updatecity_;
}
const ::UpdateUnit&
AnyServer::_Internal::updateunit(const AnyServer* msg) {
  return *msg->packet_.updateunit_;
}
const ::UpdatePlayer&
AnyServer::_Internal::updateplayer(const AnyServer* msg) {
  return *msg->packet_.updateplayer_;
}
const ::PathComputed&
AnyServer::_Internal::pathcomputed(const AnyServer* msg) {
  return *msg->packet_.pathcomputed_;
}
void AnyServer::set_allocated_serverinfo(::ServerInfo* serverinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (serverinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(serverinfo);
    if (message_arena != submessage_arena) {
      serverinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serverinfo, submessage_arena);
    }
    set_has_serverinfo();
    packet_.serverinfo_ = serverinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.serverInfo)
}
void AnyServer::set_allocated_startgame(::StartGame* startgame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (startgame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(startgame);
    if (message_arena != submessage_arena) {
      startgame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startgame, submessage_arena);
    }
    set_has_startgame();
    packet_.startgame_ = startgame;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.startGame)
}
void AnyServer::set_allocated_lobbyerror(::LobbyError* lobbyerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (lobbyerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lobbyerror);
    if (message_arena != submessage_arena) {
      lobbyerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lobbyerror, submessage_arena);
    }
    set_has_lobbyerror();
    packet_.lobbyerror_ = lobbyerror;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.lobbyError)
}
void AnyServer::set_allocated_updateglobaldata(::UpdateGlobalData* updateglobaldata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (updateglobaldata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateglobaldata);
    if (message_arena != submessage_arena) {
      updateglobaldata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateglobaldata, submessage_arena);
    }
    set_has_updateglobaldata();
    packet_.updateglobaldata_ = updateglobaldata;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updateGlobalData)
}
void AnyServer::set_allocated_updatemap(::UpdateMap* updatemap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (updatemap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updatemap);
    if (message_arena != submessage_arena) {
      updatemap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatemap, submessage_arena);
    }
    set_has_updatemap();
    packet_.updatemap_ = updatemap;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updateMap)
}
void AnyServer::set_allocated_updatecity(::UpdateCity* updatecity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (updatecity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updatecity);
    if (message_arena != submessage_arena) {
      updatecity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecity, submessage_arena);
    }
    set_has_updatecity();
    packet_.updatecity_ = updatecity;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updateCity)
}
void AnyServer::set_allocated_updateunit(::UpdateUnit* updateunit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (updateunit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateunit);
    if (message_arena != submessage_arena) {
      updateunit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateunit, submessage_arena);
    }
    set_has_updateunit();
    packet_.updateunit_ = updateunit;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updateUnit)
}
void AnyServer::set_allocated_updateplayer(::UpdatePlayer* updateplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (updateplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateplayer);
    if (message_arena != submessage_arena) {
      updateplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateplayer, submessage_arena);
    }
    set_has_updateplayer();
    packet_.updateplayer_ = updateplayer;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.updatePlayer)
}
void AnyServer::set_allocated_pathcomputed(::PathComputed* pathcomputed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (pathcomputed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pathcomputed);
    if (message_arena != submessage_arena) {
      pathcomputed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pathcomputed, submessage_arena);
    }
    set_has_pathcomputed();
    packet_.pathcomputed_ = pathcomputed;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyServer.pathComputed)
}
AnyServer::AnyServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AnyServer)
}
AnyServer::AnyServer(const AnyServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_packet();
  switch (from.packet_case()) {
    case kServerInfo: {
      _internal_mutable_serverinfo()->::ServerInfo::MergeFrom(from._internal_serverinfo());
      break;
    }
    case kStartGame: {
      _internal_mutable_startgame()->::StartGame::MergeFrom(from._internal_startgame());
      break;
    }
    case kLobbyError: {
      _internal_mutable_lobbyerror()->::LobbyError::MergeFrom(from._internal_lobbyerror());
      break;
    }
    case kUpdateGlobalData: {
      _internal_mutable_updateglobaldata()->::UpdateGlobalData::MergeFrom(from._internal_updateglobaldata());
      break;
    }
    case kUpdateMap: {
      _internal_mutable_updatemap()->::UpdateMap::MergeFrom(from._internal_updatemap());
      break;
    }
    case kUpdateCity: {
      _internal_mutable_updatecity()->::UpdateCity::MergeFrom(from._internal_updatecity());
      break;
    }
    case kUpdateUnit: {
      _internal_mutable_updateunit()->::UpdateUnit::MergeFrom(from._internal_updateunit());
      break;
    }
    case kUpdatePlayer: {
      _internal_mutable_updateplayer()->::UpdatePlayer::MergeFrom(from._internal_updateplayer());
      break;
    }
    case kPathComputed: {
      _internal_mutable_pathcomputed()->::PathComputed::MergeFrom(from._internal_pathcomputed());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AnyServer)
}

void AnyServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyServer_riposte_2eproto.base);
  clear_has_packet();
}

AnyServer::~AnyServer() {
  // @@protoc_insertion_point(destructor:AnyServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_packet()) {
    clear_packet();
  }
}

void AnyServer::ArenaDtor(void* object) {
  AnyServer* _this = reinterpret_cast< AnyServer* >(object);
  (void)_this;
}
void AnyServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyServer& AnyServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyServer_riposte_2eproto.base);
  return *internal_default_instance();
}


void AnyServer::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:AnyServer)
  switch (packet_case()) {
    case kServerInfo: {
      if (GetArena() == nullptr) {
        delete packet_.serverinfo_;
      }
      break;
    }
    case kStartGame: {
      if (GetArena() == nullptr) {
        delete packet_.startgame_;
      }
      break;
    }
    case kLobbyError: {
      if (GetArena() == nullptr) {
        delete packet_.lobbyerror_;
      }
      break;
    }
    case kUpdateGlobalData: {
      if (GetArena() == nullptr) {
        delete packet_.updateglobaldata_;
      }
      break;
    }
    case kUpdateMap: {
      if (GetArena() == nullptr) {
        delete packet_.updatemap_;
      }
      break;
    }
    case kUpdateCity: {
      if (GetArena() == nullptr) {
        delete packet_.updatecity_;
      }
      break;
    }
    case kUpdateUnit: {
      if (GetArena() == nullptr) {
        delete packet_.updateunit_;
      }
      break;
    }
    case kUpdatePlayer: {
      if (GetArena() == nullptr) {
        delete packet_.updateplayer_;
      }
      break;
    }
    case kPathComputed: {
      if (GetArena() == nullptr) {
        delete packet_.pathcomputed_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void AnyServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AnyServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServerInfo serverInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StartGame startGame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_startgame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LobbyError lobbyError = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobbyerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateGlobalData updateGlobalData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateglobaldata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateMap updateMap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatemap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateCity updateCity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateUnit updateUnit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateunit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdatePlayer updatePlayer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateplayer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PathComputed pathComputed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathcomputed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnyServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerInfo serverInfo = 1;
  if (_internal_has_serverinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::serverinfo(this), target, stream);
  }

  // .StartGame startGame = 2;
  if (_internal_has_startgame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::startgame(this), target, stream);
  }

  // .LobbyError lobbyError = 3;
  if (_internal_has_lobbyerror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lobbyerror(this), target, stream);
  }

  // .UpdateGlobalData updateGlobalData = 4;
  if (_internal_has_updateglobaldata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::updateglobaldata(this), target, stream);
  }

  // .UpdateMap updateMap = 5;
  if (_internal_has_updatemap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::updatemap(this), target, stream);
  }

  // .UpdateCity updateCity = 6;
  if (_internal_has_updatecity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::updatecity(this), target, stream);
  }

  // .UpdateUnit updateUnit = 7;
  if (_internal_has_updateunit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::updateunit(this), target, stream);
  }

  // .UpdatePlayer updatePlayer = 8;
  if (_internal_has_updateplayer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::updateplayer(this), target, stream);
  }

  // .PathComputed pathComputed = 9;
  if (_internal_has_pathcomputed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::pathcomputed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnyServer)
  return target;
}

size_t AnyServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnyServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (packet_case()) {
    // .ServerInfo serverInfo = 1;
    case kServerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.serverinfo_);
      break;
    }
    // .StartGame startGame = 2;
    case kStartGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.startgame_);
      break;
    }
    // .LobbyError lobbyError = 3;
    case kLobbyError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.lobbyerror_);
      break;
    }
    // .UpdateGlobalData updateGlobalData = 4;
    case kUpdateGlobalData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updateglobaldata_);
      break;
    }
    // .UpdateMap updateMap = 5;
    case kUpdateMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updatemap_);
      break;
    }
    // .UpdateCity updateCity = 6;
    case kUpdateCity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updatecity_);
      break;
    }
    // .UpdateUnit updateUnit = 7;
    case kUpdateUnit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updateunit_);
      break;
    }
    // .UpdatePlayer updatePlayer = 8;
    case kUpdatePlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updateplayer_);
      break;
    }
    // .PathComputed pathComputed = 9;
    case kPathComputed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.pathcomputed_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnyServer)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnyServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnyServer)
    MergeFrom(*source);
  }
}

void AnyServer::MergeFrom(const AnyServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnyServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.packet_case()) {
    case kServerInfo: {
      _internal_mutable_serverinfo()->::ServerInfo::MergeFrom(from._internal_serverinfo());
      break;
    }
    case kStartGame: {
      _internal_mutable_startgame()->::StartGame::MergeFrom(from._internal_startgame());
      break;
    }
    case kLobbyError: {
      _internal_mutable_lobbyerror()->::LobbyError::MergeFrom(from._internal_lobbyerror());
      break;
    }
    case kUpdateGlobalData: {
      _internal_mutable_updateglobaldata()->::UpdateGlobalData::MergeFrom(from._internal_updateglobaldata());
      break;
    }
    case kUpdateMap: {
      _internal_mutable_updatemap()->::UpdateMap::MergeFrom(from._internal_updatemap());
      break;
    }
    case kUpdateCity: {
      _internal_mutable_updatecity()->::UpdateCity::MergeFrom(from._internal_updatecity());
      break;
    }
    case kUpdateUnit: {
      _internal_mutable_updateunit()->::UpdateUnit::MergeFrom(from._internal_updateunit());
      break;
    }
    case kUpdatePlayer: {
      _internal_mutable_updateplayer()->::UpdatePlayer::MergeFrom(from._internal_updateplayer());
      break;
    }
    case kPathComputed: {
      _internal_mutable_pathcomputed()->::PathComputed::MergeFrom(from._internal_pathcomputed());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
}

void AnyServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnyServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyServer::CopyFrom(const AnyServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnyServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyServer::IsInitialized() const {
  return true;
}

void AnyServer::InternalSwap(AnyServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(packet_, other->packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientInfo::InitAsDefaultInstance() {
}
class ClientInfo::_Internal {
 public:
};

ClientInfo::ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ClientInfo)
}

void ClientInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientInfo_riposte_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:ClientInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientInfo::ArenaDtor(void* object) {
  ClientInfo* _this = reinterpret_cast< ClientInfo* >(object);
  (void)_this;
}
void ClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientInfo& ClientInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientInfo_riposte_2eproto.base);
  return *internal_default_instance();
}


void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientInfo.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientInfo)
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
}

void ClientInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  currentplayers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      currentplayers_(from.currentplayers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfo_riposte_2eproto.base);
  playerid_ = 0;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:ServerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerInfo::ArenaDtor(void* object) {
  ServerInfo* _this = reinterpret_cast< ServerInfo* >(object);
  (void)_this;
}
void ServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfo& ServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfo_riposte_2eproto.base);
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currentplayers_.Clear();
  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlayerInfo currentPlayers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_currentplayers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // repeated .PlayerInfo currentPlayers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_currentplayers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_currentplayers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerInfo currentPlayers = 2;
  total_size += 1UL * this->_internal_currentplayers_size();
  for (const auto& msg : this->currentplayers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  currentplayers_.MergeFrom(from.currentplayers_);
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  currentplayers_.InternalSwap(&other->currentplayers_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickPlayer::InitAsDefaultInstance() {
}
class KickPlayer::_Internal {
 public:
};

KickPlayer::KickPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KickPlayer)
}
KickPlayer::KickPlayer(const KickPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:KickPlayer)
}

void KickPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickPlayer_riposte_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

KickPlayer::~KickPlayer() {
  // @@protoc_insertion_point(destructor:KickPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KickPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KickPlayer::ArenaDtor(void* object) {
  KickPlayer* _this = reinterpret_cast< KickPlayer* >(object);
  (void)_this;
}
void KickPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickPlayer& KickPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickPlayer_riposte_2eproto.base);
  return *internal_default_instance();
}


void KickPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KickPlayer.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KickPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KickPlayer.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickPlayer)
  return target;
}

size_t KickPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const KickPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KickPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KickPlayer)
    MergeFrom(*source);
  }
}

void KickPlayer::MergeFrom(const KickPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void KickPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPlayer::CopyFrom(const KickPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayer::IsInitialized() const {
  return true;
}

void KickPlayer::InternalSwap(KickPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetLeader::InitAsDefaultInstance() {
}
class SetLeader::_Internal {
 public:
};

SetLeader::SetLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetLeader)
}
SetLeader::SetLeader(const SetLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  civid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_civid().empty()) {
    civid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_civid(),
      GetArena());
  }
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader().empty()) {
    leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SetLeader)
}

void SetLeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetLeader_riposte_2eproto.base);
  civid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetLeader::~SetLeader() {
  // @@protoc_insertion_point(destructor:SetLeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  civid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetLeader::ArenaDtor(void* object) {
  SetLeader* _this = reinterpret_cast< SetLeader* >(object);
  (void)_this;
}
void SetLeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLeader& SetLeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLeader_riposte_2eproto.base);
  return *internal_default_instance();
}


void SetLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:SetLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  civid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leader_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string civID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_civid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SetLeader.civID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_leader();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SetLeader.leader"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string civID = 1;
  if (this->civid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_civid().data(), static_cast<int>(this->_internal_civid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetLeader.civID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_civid(), target);
  }

  // string leader = 2;
  if (this->leader().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetLeader.leader");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetLeader)
  return target;
}

size_t SetLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetLeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string civID = 1;
  if (this->civid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_civid());
  }

  // string leader = 2;
  if (this->leader().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetLeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetLeader)
    MergeFrom(*source);
  }
}

void SetLeader::MergeFrom(const SetLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.civid().size() > 0) {
    _internal_set_civid(from._internal_civid());
  }
  if (from.leader().size() > 0) {
    _internal_set_leader(from._internal_leader());
  }
}

void SetLeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLeader::CopyFrom(const SetLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLeader::IsInitialized() const {
  return true;
}

void SetLeader::InternalSwap(SetLeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  civid_.Swap(&other->civid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leader_.Swap(&other->leader_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminStartGame::InitAsDefaultInstance() {
}
class AdminStartGame::_Internal {
 public:
};

AdminStartGame::AdminStartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AdminStartGame)
}
AdminStartGame::AdminStartGame(const AdminStartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AdminStartGame)
}

void AdminStartGame::SharedCtor() {
}

AdminStartGame::~AdminStartGame() {
  // @@protoc_insertion_point(destructor:AdminStartGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdminStartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdminStartGame::ArenaDtor(void* object) {
  AdminStartGame* _this = reinterpret_cast< AdminStartGame* >(object);
  (void)_this;
}
void AdminStartGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminStartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminStartGame& AdminStartGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminStartGame_riposte_2eproto.base);
  return *internal_default_instance();
}


void AdminStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminStartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminStartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdminStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdminStartGame)
  return target;
}

size_t AdminStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminStartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminStartGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AdminStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminStartGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminStartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AdminStartGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AdminStartGame)
    MergeFrom(*source);
  }
}

void AdminStartGame::MergeFrom(const AdminStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AdminStartGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AdminStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminStartGame::CopyFrom(const AdminStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminStartGame::IsInitialized() const {
  return true;
}

void AdminStartGame::InternalSwap(AdminStartGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminStartGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LobbyError::InitAsDefaultInstance() {
}
class LobbyError::_Internal {
 public:
};

LobbyError::LobbyError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LobbyError)
}
LobbyError::LobbyError(const LobbyError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LobbyError)
}

void LobbyError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LobbyError_riposte_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LobbyError::~LobbyError() {
  // @@protoc_insertion_point(destructor:LobbyError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LobbyError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LobbyError::ArenaDtor(void* object) {
  LobbyError* _this = reinterpret_cast< LobbyError* >(object);
  (void)_this;
}
void LobbyError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LobbyError& LobbyError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LobbyError_riposte_2eproto.base);
  return *internal_default_instance();
}


void LobbyError::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LobbyError.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LobbyError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LobbyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LobbyError.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyError)
  return target;
}

size_t LobbyError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LobbyError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyError)
  GOOGLE_DCHECK_NE(&from, this);
  const LobbyError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LobbyError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyError)
    MergeFrom(*source);
  }
}

void LobbyError::MergeFrom(const LobbyError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void LobbyError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyError::CopyFrom(const LobbyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyError::IsInitialized() const {
  return true;
}

void LobbyError::InternalSwap(LobbyError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartGame::InitAsDefaultInstance() {
}
class StartGame::_Internal {
 public:
};

StartGame::StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StartGame)
}
StartGame::StartGame(const StartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StartGame)
}

void StartGame::SharedCtor() {
}

StartGame::~StartGame() {
  // @@protoc_insertion_point(destructor:StartGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartGame::ArenaDtor(void* object) {
  StartGame* _this = reinterpret_cast< StartGame* >(object);
  (void)_this;
}
void StartGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartGame& StartGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartGame_riposte_2eproto.base);
  return *internal_default_instance();
}


void StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:StartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartGame)
  return target;
}

size_t StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const StartGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartGame)
    MergeFrom(*source);
  }
}

void StartGame::MergeFrom(const StartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGame::CopyFrom(const StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGame::IsInitialized() const {
  return true;
}

void StartGame::InternalSwap(StartGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
}
class PlayerInfo::_Internal {
 public:
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  civid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_civid().empty()) {
    civid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_civid(),
      GetArena());
  }
  leadername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leadername().empty()) {
    leadername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leadername(),
      GetArena());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&isadmin_) -
    reinterpret_cast<char*>(&score_)) + sizeof(isadmin_));
  // @@protoc_insertion_point(copy_constructor:PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfo_riposte_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  civid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leadername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isadmin_) -
      reinterpret_cast<char*>(&score_)) + sizeof(isadmin_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:PlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  civid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leadername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfo::ArenaDtor(void* object) {
  PlayerInfo* _this = reinterpret_cast< PlayerInfo* >(object);
  (void)_this;
}
void PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfo_riposte_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  civid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leadername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isadmin_) -
      reinterpret_cast<char*>(&score_)) + sizeof(isadmin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerInfo.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string civID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_civid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerInfo.civID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leaderName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_leadername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerInfo.leaderName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isAdmin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isadmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string civID = 2;
  if (this->civid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_civid().data(), static_cast<int>(this->_internal_civid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerInfo.civID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_civid(), target);
  }

  // string leaderName = 3;
  if (this->leadername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leadername().data(), static_cast<int>(this->_internal_leadername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerInfo.leaderName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_leadername(), target);
  }

  // int32 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_score(), target);
  }

  // int32 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  // bool isAdmin = 6;
  if (this->isadmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isadmin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string civID = 2;
  if (this->civid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_civid());
  }

  // string leaderName = 3;
  if (this->leadername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leadername());
  }

  // int32 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool isAdmin = 6;
  if (this->isadmin() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.civid().size() > 0) {
    _internal_set_civid(from._internal_civid());
  }
  if (from.leadername().size() > 0) {
    _internal_set_leadername(from._internal_leadername());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.isadmin() != 0) {
    _internal_set_isadmin(from._internal_isadmin());
  }
}

void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  civid_.Swap(&other->civid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leadername_.Swap(&other->leadername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, isadmin_)
      + sizeof(PlayerInfo::isadmin_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateGlobalData::InitAsDefaultInstance() {
}
class UpdateGlobalData::_Internal {
 public:
};

UpdateGlobalData::UpdateGlobalData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateGlobalData)
}
UpdateGlobalData::UpdateGlobalData(const UpdateGlobalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turn_, &from.turn_,
    static_cast<size_t>(reinterpret_cast<char*>(&era_) -
    reinterpret_cast<char*>(&turn_)) + sizeof(era_));
  // @@protoc_insertion_point(copy_constructor:UpdateGlobalData)
}

void UpdateGlobalData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateGlobalData_riposte_2eproto.base);
  ::memset(&turn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&era_) -
      reinterpret_cast<char*>(&turn_)) + sizeof(era_));
}

UpdateGlobalData::~UpdateGlobalData() {
  // @@protoc_insertion_point(destructor:UpdateGlobalData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateGlobalData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateGlobalData::ArenaDtor(void* object) {
  UpdateGlobalData* _this = reinterpret_cast< UpdateGlobalData* >(object);
  (void)_this;
}
void UpdateGlobalData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateGlobalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGlobalData& UpdateGlobalData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateGlobalData_riposte_2eproto.base);
  return *internal_default_instance();
}


void UpdateGlobalData::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateGlobalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  ::memset(&turn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&era_) -
      reinterpret_cast<char*>(&turn_)) + sizeof(era_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateGlobalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlayerInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 turn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Era era = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_era(static_cast<::Era>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGlobalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateGlobalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerInfo players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  // int32 turn = 2;
  if (this->turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_turn(), target);
  }

  // .Era era = 3;
  if (this->era() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_era(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateGlobalData)
  return target;
}

size_t UpdateGlobalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateGlobalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 turn = 2;
  if (this->turn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turn());
  }

  // .Era era = 3;
  if (this->era() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_era());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGlobalData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateGlobalData)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGlobalData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateGlobalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateGlobalData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateGlobalData)
    MergeFrom(*source);
  }
}

void UpdateGlobalData::MergeFrom(const UpdateGlobalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateGlobalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.turn() != 0) {
    _internal_set_turn(from._internal_turn());
  }
  if (from.era() != 0) {
    _internal_set_era(from._internal_era());
  }
}

void UpdateGlobalData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateGlobalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGlobalData::CopyFrom(const UpdateGlobalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateGlobalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGlobalData::IsInitialized() const {
  return true;
}

void UpdateGlobalData::InternalSwap(UpdateGlobalData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateGlobalData, era_)
      + sizeof(UpdateGlobalData::era_)
      - PROTOBUF_FIELD_OFFSET(UpdateGlobalData, turn_)>(
          reinterpret_cast<char*>(&turn_),
          reinterpret_cast<char*>(&other->turn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGlobalData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Improvement::InitAsDefaultInstance() {
}
class Improvement::_Internal {
 public:
};

Improvement::Improvement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Improvement)
}
Improvement::Improvement(const Improvement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  cottagelevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cottagelevel().empty()) {
    cottagelevel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cottagelevel(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Improvement)
}

void Improvement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Improvement_riposte_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cottagelevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Improvement::~Improvement() {
  // @@protoc_insertion_point(destructor:Improvement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Improvement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cottagelevel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Improvement::ArenaDtor(void* object) {
  Improvement* _this = reinterpret_cast< Improvement* >(object);
  (void)_this;
}
void Improvement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Improvement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Improvement& Improvement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Improvement_riposte_2eproto.base);
  return *internal_default_instance();
}


void Improvement::Clear() {
// @@protoc_insertion_point(message_clear_start:Improvement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cottagelevel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Improvement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Improvement.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cottageLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cottagelevel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Improvement.cottageLevel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Improvement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Improvement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Improvement.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string cottageLevel = 2;
  if (this->cottagelevel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cottagelevel().data(), static_cast<int>(this->_internal_cottagelevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Improvement.cottageLevel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cottagelevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Improvement)
  return target;
}

size_t Improvement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Improvement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string cottageLevel = 2;
  if (this->cottagelevel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cottagelevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Improvement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Improvement)
  GOOGLE_DCHECK_NE(&from, this);
  const Improvement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Improvement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Improvement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Improvement)
    MergeFrom(*source);
  }
}

void Improvement::MergeFrom(const Improvement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Improvement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.cottagelevel().size() > 0) {
    _internal_set_cottagelevel(from._internal_cottagelevel());
  }
}

void Improvement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Improvement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Improvement::CopyFrom(const Improvement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Improvement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Improvement::IsInitialized() const {
  return true;
}

void Improvement::InternalSwap(Improvement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cottagelevel_.Swap(&other->cottagelevel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Improvement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Yield::InitAsDefaultInstance() {
}
class Yield::_Internal {
 public:
};

Yield::Yield(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Yield)
}
Yield::Yield(const Yield& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hammers_, &from.hammers_,
    static_cast<size_t>(reinterpret_cast<char*>(&food_) -
    reinterpret_cast<char*>(&hammers_)) + sizeof(food_));
  // @@protoc_insertion_point(copy_constructor:Yield)
}

void Yield::SharedCtor() {
  ::memset(&hammers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&food_) -
      reinterpret_cast<char*>(&hammers_)) + sizeof(food_));
}

Yield::~Yield() {
  // @@protoc_insertion_point(destructor:Yield)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Yield::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Yield::ArenaDtor(void* object) {
  Yield* _this = reinterpret_cast< Yield* >(object);
  (void)_this;
}
void Yield::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Yield::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Yield& Yield::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Yield_riposte_2eproto.base);
  return *internal_default_instance();
}


void Yield::Clear() {
// @@protoc_insertion_point(message_clear_start:Yield)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hammers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&food_) -
      reinterpret_cast<char*>(&hammers_)) + sizeof(food_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Yield::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hammers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hammers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 commerce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          commerce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 food = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          food_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Yield::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Yield)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hammers = 1;
  if (this->hammers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hammers(), target);
  }

  // int32 commerce = 2;
  if (this->commerce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_commerce(), target);
  }

  // int32 food = 3;
  if (this->food() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_food(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Yield)
  return target;
}

size_t Yield::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Yield)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hammers = 1;
  if (this->hammers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hammers());
  }

  // int32 commerce = 2;
  if (this->commerce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commerce());
  }

  // int32 food = 3;
  if (this->food() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_food());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Yield::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Yield)
  GOOGLE_DCHECK_NE(&from, this);
  const Yield* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Yield>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Yield)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Yield)
    MergeFrom(*source);
  }
}

void Yield::MergeFrom(const Yield& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Yield)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hammers() != 0) {
    _internal_set_hammers(from._internal_hammers());
  }
  if (from.commerce() != 0) {
    _internal_set_commerce(from._internal_commerce());
  }
  if (from.food() != 0) {
    _internal_set_food(from._internal_food());
  }
}

void Yield::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Yield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Yield::CopyFrom(const Yield& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Yield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Yield::IsInitialized() const {
  return true;
}

void Yield::InternalSwap(Yield* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Yield, food_)
      + sizeof(Yield::food_)
      - PROTOBUF_FIELD_OFFSET(Yield, hammers_)>(
          reinterpret_cast<char*>(&hammers_),
          reinterpret_cast<char*>(&other->hammers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Yield::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tile::InitAsDefaultInstance() {
  ::_Tile_default_instance_._instance.get_mutable()->yield_ = const_cast< ::Yield*>(
      ::Yield::internal_default_instance());
}
class Tile::_Internal {
 public:
  static const ::Yield& yield(const Tile* msg);
};

const ::Yield&
Tile::_Internal::yield(const Tile* msg) {
  return *msg->yield_;
}
Tile::Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  improvements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Tile)
}
Tile::Tile(const Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      improvements_(from.improvements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_yield()) {
    yield_ = new ::Yield(*from.yield_);
  } else {
    yield_ = nullptr;
  }
  ::memcpy(&terrain_, &from.terrain_,
    static_cast<size_t>(reinterpret_cast<char*>(&ownerid_) -
    reinterpret_cast<char*>(&terrain_)) + sizeof(ownerid_));
  // @@protoc_insertion_point(copy_constructor:Tile)
}

void Tile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tile_riposte_2eproto.base);
  ::memset(&yield_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ownerid_) -
      reinterpret_cast<char*>(&yield_)) + sizeof(ownerid_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:Tile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete yield_;
}

void Tile::ArenaDtor(void* object) {
  Tile* _this = reinterpret_cast< Tile* >(object);
  (void)_this;
}
void Tile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tile& Tile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tile_riposte_2eproto.base);
  return *internal_default_instance();
}


void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  improvements_.Clear();
  if (GetArena() == nullptr && yield_ != nullptr) {
    delete yield_;
  }
  yield_ = nullptr;
  ::memset(&terrain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ownerid_) -
      reinterpret_cast<char*>(&terrain_)) + sizeof(ownerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Terrain terrain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_terrain(static_cast<::Terrain>(val));
        } else goto handle_unusual;
        continue;
      // bool forested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          forested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hilled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Improvement improvements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_improvements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .Yield yield = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ownerID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasOwner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hasowner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Terrain terrain = 1;
  if (this->terrain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_terrain(), target);
  }

  // bool forested = 2;
  if (this->forested() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_forested(), target);
  }

  // bool hilled = 3;
  if (this->hilled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hilled(), target);
  }

  // repeated .Improvement improvements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_improvements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_improvements(i), target, stream);
  }

  // .Yield yield = 5;
  if (this->has_yield()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::yield(this), target, stream);
  }

  // int32 ownerID = 6;
  if (this->ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ownerid(), target);
  }

  // bool hasOwner = 7;
  if (this->hasowner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hasowner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tile)
  return target;
}

size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Improvement improvements = 4;
  total_size += 1UL * this->_internal_improvements_size();
  for (const auto& msg : this->improvements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Yield yield = 5;
  if (this->has_yield()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yield_);
  }

  // .Terrain terrain = 1;
  if (this->terrain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_terrain());
  }

  // bool forested = 2;
  if (this->forested() != 0) {
    total_size += 1 + 1;
  }

  // bool hilled = 3;
  if (this->hilled() != 0) {
    total_size += 1 + 1;
  }

  // bool hasOwner = 7;
  if (this->hasowner() != 0) {
    total_size += 1 + 1;
  }

  // int32 ownerID = 6;
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ownerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tile)
  GOOGLE_DCHECK_NE(&from, this);
  const Tile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tile)
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  improvements_.MergeFrom(from.improvements_);
  if (from.has_yield()) {
    _internal_mutable_yield()->::Yield::MergeFrom(from._internal_yield());
  }
  if (from.terrain() != 0) {
    _internal_set_terrain(from._internal_terrain());
  }
  if (from.forested() != 0) {
    _internal_set_forested(from._internal_forested());
  }
  if (from.hilled() != 0) {
    _internal_set_hilled(from._internal_hilled());
  }
  if (from.hasowner() != 0) {
    _internal_set_hasowner(from._internal_hasowner());
  }
  if (from.ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
}

void Tile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  return true;
}

void Tile::InternalSwap(Tile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  improvements_.InternalSwap(&other->improvements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile, ownerid_)
      + sizeof(Tile::ownerid_)
      - PROTOBUF_FIELD_OFFSET(Tile, yield_)>(
          reinterpret_cast<char*>(&yield_),
          reinterpret_cast<char*>(&other->yield_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMap::InitAsDefaultInstance() {
}
class UpdateMap::_Internal {
 public:
};

UpdateMap::UpdateMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tiles_(arena),
  visibility_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateMap)
}
UpdateMap::UpdateMap(const UpdateMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tiles_(from.tiles_),
      visibility_(from.visibility_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:UpdateMap)
}

void UpdateMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMap_riposte_2eproto.base);
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

UpdateMap::~UpdateMap() {
  // @@protoc_insertion_point(destructor:UpdateMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateMap::ArenaDtor(void* object) {
  UpdateMap* _this = reinterpret_cast< UpdateMap* >(object);
  (void)_this;
}
void UpdateMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMap& UpdateMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMap_riposte_2eproto.base);
  return *internal_default_instance();
}


void UpdateMap::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  visibility_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Tile tiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Visibility visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_visibility(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_visibility(static_cast<::Visibility>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // repeated .Tile tiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tiles(i), target, stream);
  }

  // repeated .Visibility visibility = 4;
  {
    int byte_size = _visibility_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, visibility_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateMap)
  return target;
}

size_t UpdateMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tile tiles = 3;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Visibility visibility = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_visibility_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_visibility(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _visibility_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateMap)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateMap)
    MergeFrom(*source);
  }
}

void UpdateMap::MergeFrom(const UpdateMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  visibility_.MergeFrom(from.visibility_);
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void UpdateMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMap::CopyFrom(const UpdateMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMap::IsInitialized() const {
  return true;
}

void UpdateMap::InternalSwap(UpdateMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
  visibility_.InternalSwap(&other->visibility_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateMap, height_)
      + sizeof(UpdateMap::height_)
      - PROTOBUF_FIELD_OFFSET(UpdateMap, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitBuildTask::InitAsDefaultInstance() {
}
class UnitBuildTask::_Internal {
 public:
};

UnitBuildTask::UnitBuildTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnitBuildTask)
}
UnitBuildTask::UnitBuildTask(const UnitBuildTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unitkindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unitkindid().empty()) {
    unitkindid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unitkindid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:UnitBuildTask)
}

void UnitBuildTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitBuildTask_riposte_2eproto.base);
  unitkindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitBuildTask::~UnitBuildTask() {
  // @@protoc_insertion_point(destructor:UnitBuildTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitBuildTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unitkindid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitBuildTask::ArenaDtor(void* object) {
  UnitBuildTask* _this = reinterpret_cast< UnitBuildTask* >(object);
  (void)_this;
}
void UnitBuildTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitBuildTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitBuildTask& UnitBuildTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitBuildTask_riposte_2eproto.base);
  return *internal_default_instance();
}


void UnitBuildTask::Clear() {
// @@protoc_insertion_point(message_clear_start:UnitBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unitkindid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitBuildTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string unitKindID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unitkindid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnitBuildTask.unitKindID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitBuildTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnitBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string unitKindID = 1;
  if (this->unitkindid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unitkindid().data(), static_cast<int>(this->_internal_unitkindid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnitBuildTask.unitKindID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unitkindid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnitBuildTask)
  return target;
}

size_t UnitBuildTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnitBuildTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unitKindID = 1;
  if (this->unitkindid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unitkindid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitBuildTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnitBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitBuildTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitBuildTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnitBuildTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnitBuildTask)
    MergeFrom(*source);
  }
}

void UnitBuildTask::MergeFrom(const UnitBuildTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnitBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unitkindid().size() > 0) {
    _internal_set_unitkindid(from._internal_unitkindid());
  }
}

void UnitBuildTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnitBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitBuildTask::CopyFrom(const UnitBuildTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnitBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitBuildTask::IsInitialized() const {
  return true;
}

void UnitBuildTask::InternalSwap(UnitBuildTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unitkindid_.Swap(&other->unitkindid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitBuildTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildingBuildTask::InitAsDefaultInstance() {
}
class BuildingBuildTask::_Internal {
 public:
};

BuildingBuildTask::BuildingBuildTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildingBuildTask)
}
BuildingBuildTask::BuildingBuildTask(const BuildingBuildTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buildingid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buildingid().empty()) {
    buildingid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buildingid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BuildingBuildTask)
}

void BuildingBuildTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildingBuildTask_riposte_2eproto.base);
  buildingid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BuildingBuildTask::~BuildingBuildTask() {
  // @@protoc_insertion_point(destructor:BuildingBuildTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildingBuildTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  buildingid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuildingBuildTask::ArenaDtor(void* object) {
  BuildingBuildTask* _this = reinterpret_cast< BuildingBuildTask* >(object);
  (void)_this;
}
void BuildingBuildTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildingBuildTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildingBuildTask& BuildingBuildTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildingBuildTask_riposte_2eproto.base);
  return *internal_default_instance();
}


void BuildingBuildTask::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildingBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildingid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildingBuildTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string buildingID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buildingid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BuildingBuildTask.buildingID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildingBuildTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildingBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string buildingID = 1;
  if (this->buildingid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buildingid().data(), static_cast<int>(this->_internal_buildingid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildingBuildTask.buildingID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_buildingid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildingBuildTask)
  return target;
}

size_t BuildingBuildTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildingBuildTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string buildingID = 1;
  if (this->buildingid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildingid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildingBuildTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildingBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildingBuildTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildingBuildTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildingBuildTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildingBuildTask)
    MergeFrom(*source);
  }
}

void BuildingBuildTask::MergeFrom(const BuildingBuildTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildingBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buildingid().size() > 0) {
    _internal_set_buildingid(from._internal_buildingid());
  }
}

void BuildingBuildTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildingBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingBuildTask::CopyFrom(const BuildingBuildTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildingBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingBuildTask::IsInitialized() const {
  return true;
}

void BuildingBuildTask::InternalSwap(BuildingBuildTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buildingid_.Swap(&other->buildingid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildingBuildTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildTaskKind::InitAsDefaultInstance() {
  ::_BuildTaskKind_default_instance_.unit_ = const_cast< ::UnitBuildTask*>(
      ::UnitBuildTask::internal_default_instance());
  ::_BuildTaskKind_default_instance_.building_ = const_cast< ::BuildingBuildTask*>(
      ::BuildingBuildTask::internal_default_instance());
}
class BuildTaskKind::_Internal {
 public:
  static const ::UnitBuildTask& unit(const BuildTaskKind* msg);
  static const ::BuildingBuildTask& building(const BuildTaskKind* msg);
};

const ::UnitBuildTask&
BuildTaskKind::_Internal::unit(const BuildTaskKind* msg) {
  return *msg->task_.unit_;
}
const ::BuildingBuildTask&
BuildTaskKind::_Internal::building(const BuildTaskKind* msg) {
  return *msg->task_.building_;
}
void BuildTaskKind::set_allocated_unit(::UnitBuildTask* unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_task();
  if (unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unit);
    if (message_arena != submessage_arena) {
      unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    set_has_unit();
    task_.unit_ = unit;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildTaskKind.unit)
}
void BuildTaskKind::set_allocated_building(::BuildingBuildTask* building) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_task();
  if (building) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(building);
    if (message_arena != submessage_arena) {
      building = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, building, submessage_arena);
    }
    set_has_building();
    task_.building_ = building;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildTaskKind.building)
}
BuildTaskKind::BuildTaskKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildTaskKind)
}
BuildTaskKind::BuildTaskKind(const BuildTaskKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_task();
  switch (from.task_case()) {
    case kUnit: {
      _internal_mutable_unit()->::UnitBuildTask::MergeFrom(from._internal_unit());
      break;
    }
    case kBuilding: {
      _internal_mutable_building()->::BuildingBuildTask::MergeFrom(from._internal_building());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:BuildTaskKind)
}

void BuildTaskKind::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildTaskKind_riposte_2eproto.base);
  clear_has_task();
}

BuildTaskKind::~BuildTaskKind() {
  // @@protoc_insertion_point(destructor:BuildTaskKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildTaskKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_task()) {
    clear_task();
  }
}

void BuildTaskKind::ArenaDtor(void* object) {
  BuildTaskKind* _this = reinterpret_cast< BuildTaskKind* >(object);
  (void)_this;
}
void BuildTaskKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildTaskKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildTaskKind& BuildTaskKind::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildTaskKind_riposte_2eproto.base);
  return *internal_default_instance();
}


void BuildTaskKind::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:BuildTaskKind)
  switch (task_case()) {
    case kUnit: {
      if (GetArena() == nullptr) {
        delete task_.unit_;
      }
      break;
    }
    case kBuilding: {
      if (GetArena() == nullptr) {
        delete task_.building_;
      }
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void BuildTaskKind::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildTaskKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_task();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildTaskKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .UnitBuildTask unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildingBuildTask building = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_building(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildTaskKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildTaskKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UnitBuildTask unit = 1;
  if (_internal_has_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::unit(this), target, stream);
  }

  // .BuildingBuildTask building = 2;
  if (_internal_has_building()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::building(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildTaskKind)
  return target;
}

size_t BuildTaskKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildTaskKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (task_case()) {
    // .UnitBuildTask unit = 1;
    case kUnit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.unit_);
      break;
    }
    // .BuildingBuildTask building = 2;
    case kBuilding: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.building_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildTaskKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildTaskKind)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildTaskKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildTaskKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildTaskKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildTaskKind)
    MergeFrom(*source);
  }
}

void BuildTaskKind::MergeFrom(const BuildTaskKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildTaskKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.task_case()) {
    case kUnit: {
      _internal_mutable_unit()->::UnitBuildTask::MergeFrom(from._internal_unit());
      break;
    }
    case kBuilding: {
      _internal_mutable_building()->::BuildingBuildTask::MergeFrom(from._internal_building());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
}

void BuildTaskKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildTaskKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildTaskKind::CopyFrom(const BuildTaskKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildTaskKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildTaskKind::IsInitialized() const {
  return true;
}

void BuildTaskKind::InternalSwap(BuildTaskKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(task_, other->task_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildTaskKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildTask::InitAsDefaultInstance() {
  ::_BuildTask_default_instance_._instance.get_mutable()->kind_ = const_cast< ::BuildTaskKind*>(
      ::BuildTaskKind::internal_default_instance());
}
class BuildTask::_Internal {
 public:
  static const ::BuildTaskKind& kind(const BuildTask* msg);
};

const ::BuildTaskKind&
BuildTask::_Internal::kind(const BuildTask* msg) {
  return *msg->kind_;
}
BuildTask::BuildTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildTask)
}
BuildTask::BuildTask(const BuildTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kind()) {
    kind_ = new ::BuildTaskKind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:BuildTask)
}

void BuildTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildTask_riposte_2eproto.base);
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(cost_));
}

BuildTask::~BuildTask() {
  // @@protoc_insertion_point(destructor:BuildTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete kind_;
}

void BuildTask::ArenaDtor(void* object) {
  BuildTask* _this = reinterpret_cast< BuildTask* >(object);
  (void)_this;
}
void BuildTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildTask& BuildTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildTask_riposte_2eproto.base);
  return *internal_default_instance();
}


void BuildTask::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BuildTaskKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kind(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BuildTaskKind kind = 1;
  if (this->has_kind()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kind(this), target, stream);
  }

  // int32 progress = 2;
  if (this->progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_progress(), target);
  }

  // int32 cost = 3;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildTask)
  return target;
}

size_t BuildTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BuildTaskKind kind = 1;
  if (this->has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  // int32 progress = 2;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress());
  }

  // int32 cost = 3;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildTask)
    MergeFrom(*source);
  }
}

void BuildTask::MergeFrom(const BuildTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kind()) {
    _internal_mutable_kind()->::BuildTaskKind::MergeFrom(from._internal_kind());
  }
  if (from.progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
}

void BuildTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildTask::CopyFrom(const BuildTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildTask::IsInitialized() const {
  return true;
}

void BuildTask::InternalSwap(BuildTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildTask, cost_)
      + sizeof(BuildTask::cost_)
      - PROTOBUF_FIELD_OFFSET(BuildTask, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateCity::InitAsDefaultInstance() {
  ::_UpdateCity_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Pos*>(
      ::Pos::internal_default_instance());
  ::_UpdateCity_default_instance_._instance.get_mutable()->buildtask_ = const_cast< ::BuildTask*>(
      ::BuildTask::internal_default_instance());
}
class UpdateCity::_Internal {
 public:
  static const ::Pos& pos(const UpdateCity* msg);
  static const ::BuildTask& buildtask(const UpdateCity* msg);
};

const ::Pos&
UpdateCity::_Internal::pos(const UpdateCity* msg) {
  return *msg->pos_;
}
const ::BuildTask&
UpdateCity::_Internal::buildtask(const UpdateCity* msg) {
  return *msg->buildtask_;
}
UpdateCity::UpdateCity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buildingnames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateCity)
}
UpdateCity::UpdateCity(const UpdateCity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buildingnames_(from.buildingnames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_buildtask()) {
    buildtask_ = new ::BuildTask(*from.buildtask_);
  } else {
    buildtask_ = nullptr;
  }
  ::memcpy(&ownerid_, &from.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ownerid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:UpdateCity)
}

void UpdateCity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCity_riposte_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(id_));
}

UpdateCity::~UpdateCity() {
  // @@protoc_insertion_point(destructor:UpdateCity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete buildtask_;
}

void UpdateCity::ArenaDtor(void* object) {
  UpdateCity* _this = reinterpret_cast< UpdateCity* >(object);
  (void)_this;
}
void UpdateCity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCity& UpdateCity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCity_riposte_2eproto.base);
  return *internal_default_instance();
}


void UpdateCity::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateCity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildingnames_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArena() == nullptr && buildtask_ != nullptr) {
    delete buildtask_;
  }
  buildtask_ = nullptr;
  ::memset(&ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ownerid_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateCity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ownerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildTask buildTask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildtask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hammersPerTurn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hammersperturn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 culture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          culture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cultureNeeded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cultureneeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string buildingNames = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buildingnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateCity.buildingNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateCity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pos pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateCity.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 ownerID = 3;
  if (this->ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ownerid(), target);
  }

  // .BuildTask buildTask = 4;
  if (this->has_buildtask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::buildtask(this), target, stream);
  }

  // int32 hammersPerTurn = 5;
  if (this->hammersperturn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hammersperturn(), target);
  }

  // int32 culture = 6;
  if (this->culture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_culture(), target);
  }

  // int32 cultureNeeded = 7;
  if (this->cultureneeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cultureneeded(), target);
  }

  // int32 ID = 8;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_id(), target);
  }

  // repeated string buildingNames = 9;
  for (int i = 0, n = this->_internal_buildingnames_size(); i < n; i++) {
    const auto& s = this->_internal_buildingnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateCity.buildingNames");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateCity)
  return target;
}

size_t UpdateCity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateCity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string buildingNames = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buildingnames_.size());
  for (int i = 0, n = buildingnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      buildingnames_.Get(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Pos pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .BuildTask buildTask = 4;
  if (this->has_buildtask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buildtask_);
  }

  // int32 ownerID = 3;
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ownerid());
  }

  // int32 hammersPerTurn = 5;
  if (this->hammersperturn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hammersperturn());
  }

  // int32 culture = 6;
  if (this->culture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_culture());
  }

  // int32 cultureNeeded = 7;
  if (this->cultureneeded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cultureneeded());
  }

  // int32 ID = 8;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateCity)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateCity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateCity)
    MergeFrom(*source);
  }
}

void UpdateCity::MergeFrom(const UpdateCity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateCity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildingnames_.MergeFrom(from.buildingnames_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::Pos::MergeFrom(from._internal_pos());
  }
  if (from.has_buildtask()) {
    _internal_mutable_buildtask()->::BuildTask::MergeFrom(from._internal_buildtask());
  }
  if (from.ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
  if (from.hammersperturn() != 0) {
    _internal_set_hammersperturn(from._internal_hammersperturn());
  }
  if (from.culture() != 0) {
    _internal_set_culture(from._internal_culture());
  }
  if (from.cultureneeded() != 0) {
    _internal_set_cultureneeded(from._internal_cultureneeded());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UpdateCity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateCity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCity::CopyFrom(const UpdateCity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateCity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCity::IsInitialized() const {
  return true;
}

void UpdateCity::InternalSwap(UpdateCity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buildingnames_.InternalSwap(&other->buildingnames_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCity, id_)
      + sizeof(UpdateCity::id_)
      - PROTOBUF_FIELD_OFFSET(UpdateCity, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Path)
}

void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_riposte_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_positions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_positions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 positions = 1;
  {
    int byte_size = _positions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_positions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 positions = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->positions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _positions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FoundCityCapability::InitAsDefaultInstance() {
}
class FoundCityCapability::_Internal {
 public:
};

FoundCityCapability::FoundCityCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FoundCityCapability)
}
FoundCityCapability::FoundCityCapability(const FoundCityCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FoundCityCapability)
}

void FoundCityCapability::SharedCtor() {
}

FoundCityCapability::~FoundCityCapability() {
  // @@protoc_insertion_point(destructor:FoundCityCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FoundCityCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FoundCityCapability::ArenaDtor(void* object) {
  FoundCityCapability* _this = reinterpret_cast< FoundCityCapability* >(object);
  (void)_this;
}
void FoundCityCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FoundCityCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FoundCityCapability& FoundCityCapability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FoundCityCapability_riposte_2eproto.base);
  return *internal_default_instance();
}


void FoundCityCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:FoundCityCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FoundCityCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FoundCityCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FoundCityCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FoundCityCapability)
  return target;
}

size_t FoundCityCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FoundCityCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FoundCityCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FoundCityCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const FoundCityCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FoundCityCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FoundCityCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FoundCityCapability)
    MergeFrom(*source);
  }
}

void FoundCityCapability::MergeFrom(const FoundCityCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FoundCityCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FoundCityCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FoundCityCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoundCityCapability::CopyFrom(const FoundCityCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FoundCityCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoundCityCapability::IsInitialized() const {
  return true;
}

void FoundCityCapability::InternalSwap(FoundCityCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FoundCityCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerTaskImprovement::InitAsDefaultInstance() {
}
class WorkerTaskImprovement::_Internal {
 public:
};

WorkerTaskImprovement::WorkerTaskImprovement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WorkerTaskImprovement)
}
WorkerTaskImprovement::WorkerTaskImprovement(const WorkerTaskImprovement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  improvementid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_improvementid().empty()) {
    improvementid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_improvementid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:WorkerTaskImprovement)
}

void WorkerTaskImprovement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerTaskImprovement_riposte_2eproto.base);
  improvementid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkerTaskImprovement::~WorkerTaskImprovement() {
  // @@protoc_insertion_point(destructor:WorkerTaskImprovement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerTaskImprovement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  improvementid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkerTaskImprovement::ArenaDtor(void* object) {
  WorkerTaskImprovement* _this = reinterpret_cast< WorkerTaskImprovement* >(object);
  (void)_this;
}
void WorkerTaskImprovement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerTaskImprovement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerTaskImprovement& WorkerTaskImprovement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerTaskImprovement_riposte_2eproto.base);
  return *internal_default_instance();
}


void WorkerTaskImprovement::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerTaskImprovement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  improvementid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerTaskImprovement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string improvementID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_improvementid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerTaskImprovement.improvementID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerTaskImprovement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerTaskImprovement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string improvementID = 1;
  if (this->improvementid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_improvementid().data(), static_cast<int>(this->_internal_improvementid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerTaskImprovement.improvementID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_improvementid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerTaskImprovement)
  return target;
}

size_t WorkerTaskImprovement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerTaskImprovement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string improvementID = 1;
  if (this->improvementid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_improvementid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerTaskImprovement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorkerTaskImprovement)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerTaskImprovement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerTaskImprovement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorkerTaskImprovement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorkerTaskImprovement)
    MergeFrom(*source);
  }
}

void WorkerTaskImprovement::MergeFrom(const WorkerTaskImprovement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerTaskImprovement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.improvementid().size() > 0) {
    _internal_set_improvementid(from._internal_improvementid());
  }
}

void WorkerTaskImprovement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorkerTaskImprovement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerTaskImprovement::CopyFrom(const WorkerTaskImprovement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerTaskImprovement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTaskImprovement::IsInitialized() const {
  return true;
}

void WorkerTaskImprovement::InternalSwap(WorkerTaskImprovement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  improvementid_.Swap(&other->improvementid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerTaskImprovement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerTaskKind::InitAsDefaultInstance() {
  ::_WorkerTaskKind_default_instance_.buildimprovement_ = const_cast< ::WorkerTaskImprovement*>(
      ::WorkerTaskImprovement::internal_default_instance());
}
class WorkerTaskKind::_Internal {
 public:
  static const ::WorkerTaskImprovement& buildimprovement(const WorkerTaskKind* msg);
};

const ::WorkerTaskImprovement&
WorkerTaskKind::_Internal::buildimprovement(const WorkerTaskKind* msg) {
  return *msg->kind_.buildimprovement_;
}
void WorkerTaskKind::set_allocated_buildimprovement(::WorkerTaskImprovement* buildimprovement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (buildimprovement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buildimprovement);
    if (message_arena != submessage_arena) {
      buildimprovement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buildimprovement, submessage_arena);
    }
    set_has_buildimprovement();
    kind_.buildimprovement_ = buildimprovement;
  }
  // @@protoc_insertion_point(field_set_allocated:WorkerTaskKind.buildImprovement)
}
WorkerTaskKind::WorkerTaskKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WorkerTaskKind)
}
WorkerTaskKind::WorkerTaskKind(const WorkerTaskKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kBuildImprovement: {
      _internal_mutable_buildimprovement()->::WorkerTaskImprovement::MergeFrom(from._internal_buildimprovement());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WorkerTaskKind)
}

void WorkerTaskKind::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerTaskKind_riposte_2eproto.base);
  clear_has_kind();
}

WorkerTaskKind::~WorkerTaskKind() {
  // @@protoc_insertion_point(destructor:WorkerTaskKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerTaskKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void WorkerTaskKind::ArenaDtor(void* object) {
  WorkerTaskKind* _this = reinterpret_cast< WorkerTaskKind* >(object);
  (void)_this;
}
void WorkerTaskKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerTaskKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerTaskKind& WorkerTaskKind::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerTaskKind_riposte_2eproto.base);
  return *internal_default_instance();
}


void WorkerTaskKind::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:WorkerTaskKind)
  switch (kind_case()) {
    case kBuildImprovement: {
      if (GetArena() == nullptr) {
        delete kind_.buildimprovement_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void WorkerTaskKind::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerTaskKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerTaskKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .WorkerTaskImprovement buildImprovement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildimprovement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerTaskKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerTaskKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WorkerTaskImprovement buildImprovement = 1;
  if (_internal_has_buildimprovement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::buildimprovement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerTaskKind)
  return target;
}

size_t WorkerTaskKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerTaskKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .WorkerTaskImprovement buildImprovement = 1;
    case kBuildImprovement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.buildimprovement_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerTaskKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorkerTaskKind)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerTaskKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerTaskKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorkerTaskKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorkerTaskKind)
    MergeFrom(*source);
  }
}

void WorkerTaskKind::MergeFrom(const WorkerTaskKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerTaskKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kBuildImprovement: {
      _internal_mutable_buildimprovement()->::WorkerTaskImprovement::MergeFrom(from._internal_buildimprovement());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void WorkerTaskKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorkerTaskKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerTaskKind::CopyFrom(const WorkerTaskKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerTaskKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTaskKind::IsInitialized() const {
  return true;
}

void WorkerTaskKind::InternalSwap(WorkerTaskKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerTaskKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerTask::InitAsDefaultInstance() {
  ::_WorkerTask_default_instance_._instance.get_mutable()->kind_ = const_cast< ::WorkerTaskKind*>(
      ::WorkerTaskKind::internal_default_instance());
}
class WorkerTask::_Internal {
 public:
  static const ::WorkerTaskKind& kind(const WorkerTask* msg);
};

const ::WorkerTaskKind&
WorkerTask::_Internal::kind(const WorkerTask* msg) {
  return *msg->kind_;
}
WorkerTask::WorkerTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WorkerTask)
}
WorkerTask::WorkerTask(const WorkerTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_kind()) {
    kind_ = new ::WorkerTaskKind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  turnsleft_ = from.turnsleft_;
  // @@protoc_insertion_point(copy_constructor:WorkerTask)
}

void WorkerTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerTask_riposte_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnsleft_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(turnsleft_));
}

WorkerTask::~WorkerTask() {
  // @@protoc_insertion_point(destructor:WorkerTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kind_;
}

void WorkerTask::ArenaDtor(void* object) {
  WorkerTask* _this = reinterpret_cast< WorkerTask* >(object);
  (void)_this;
}
void WorkerTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerTask& WorkerTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerTask_riposte_2eproto.base);
  return *internal_default_instance();
}


void WorkerTask::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  turnsleft_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerTask.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 turnsLeft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          turnsleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WorkerTaskKind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kind(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerTask.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 turnsLeft = 2;
  if (this->turnsleft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_turnsleft(), target);
  }

  // .WorkerTaskKind kind = 3;
  if (this->has_kind()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kind(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerTask)
  return target;
}

size_t WorkerTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .WorkerTaskKind kind = 3;
  if (this->has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  // int32 turnsLeft = 2;
  if (this->turnsleft() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turnsleft());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorkerTask)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorkerTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorkerTask)
    MergeFrom(*source);
  }
}

void WorkerTask::MergeFrom(const WorkerTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_kind()) {
    _internal_mutable_kind()->::WorkerTaskKind::MergeFrom(from._internal_kind());
  }
  if (from.turnsleft() != 0) {
    _internal_set_turnsleft(from._internal_turnsleft());
  }
}

void WorkerTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorkerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerTask::CopyFrom(const WorkerTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTask::IsInitialized() const {
  return true;
}

void WorkerTask::InternalSwap(WorkerTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerTask, turnsleft_)
      + sizeof(WorkerTask::turnsleft_)
      - PROTOBUF_FIELD_OFFSET(WorkerTask, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerCapability::InitAsDefaultInstance() {
  ::_WorkerCapability_default_instance_._instance.get_mutable()->currenttask_ = const_cast< ::WorkerTask*>(
      ::WorkerTask::internal_default_instance());
}
class WorkerCapability::_Internal {
 public:
  static const ::WorkerTask& currenttask(const WorkerCapability* msg);
};

const ::WorkerTask&
WorkerCapability::_Internal::currenttask(const WorkerCapability* msg) {
  return *msg->currenttask_;
}
WorkerCapability::WorkerCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  possibletasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WorkerCapability)
}
WorkerCapability::WorkerCapability(const WorkerCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      possibletasks_(from.possibletasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currenttask()) {
    currenttask_ = new ::WorkerTask(*from.currenttask_);
  } else {
    currenttask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:WorkerCapability)
}

void WorkerCapability::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerCapability_riposte_2eproto.base);
  currenttask_ = nullptr;
}

WorkerCapability::~WorkerCapability() {
  // @@protoc_insertion_point(destructor:WorkerCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete currenttask_;
}

void WorkerCapability::ArenaDtor(void* object) {
  WorkerCapability* _this = reinterpret_cast< WorkerCapability* >(object);
  (void)_this;
}
void WorkerCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerCapability& WorkerCapability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerCapability_riposte_2eproto.base);
  return *internal_default_instance();
}


void WorkerCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  possibletasks_.Clear();
  if (GetArena() == nullptr && currenttask_ != nullptr) {
    delete currenttask_;
  }
  currenttask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .WorkerTask currentTask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currenttask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .WorkerTask possibleTasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_possibletasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WorkerTask currentTask = 1;
  if (this->has_currenttask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::currenttask(this), target, stream);
  }

  // repeated .WorkerTask possibleTasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_possibletasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_possibletasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerCapability)
  return target;
}

size_t WorkerCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WorkerTask possibleTasks = 2;
  total_size += 1UL * this->_internal_possibletasks_size();
  for (const auto& msg : this->possibletasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .WorkerTask currentTask = 1;
  if (this->has_currenttask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currenttask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorkerCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorkerCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorkerCapability)
    MergeFrom(*source);
  }
}

void WorkerCapability::MergeFrom(const WorkerCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  possibletasks_.MergeFrom(from.possibletasks_);
  if (from.has_currenttask()) {
    _internal_mutable_currenttask()->::WorkerTask::MergeFrom(from._internal_currenttask());
  }
}

void WorkerCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorkerCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerCapability::CopyFrom(const WorkerCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerCapability::IsInitialized() const {
  return true;
}

void WorkerCapability::InternalSwap(WorkerCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  possibletasks_.InternalSwap(&other->possibletasks_);
  swap(currenttask_, other->currenttask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CarryUnitsCapability::InitAsDefaultInstance() {
}
class CarryUnitsCapability::_Internal {
 public:
};

CarryUnitsCapability::CarryUnitsCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  carryingunitids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CarryUnitsCapability)
}
CarryUnitsCapability::CarryUnitsCapability(const CarryUnitsCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      carryingunitids_(from.carryingunitids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CarryUnitsCapability)
}

void CarryUnitsCapability::SharedCtor() {
}

CarryUnitsCapability::~CarryUnitsCapability() {
  // @@protoc_insertion_point(destructor:CarryUnitsCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CarryUnitsCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CarryUnitsCapability::ArenaDtor(void* object) {
  CarryUnitsCapability* _this = reinterpret_cast< CarryUnitsCapability* >(object);
  (void)_this;
}
void CarryUnitsCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarryUnitsCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarryUnitsCapability& CarryUnitsCapability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarryUnitsCapability_riposte_2eproto.base);
  return *internal_default_instance();
}


void CarryUnitsCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:CarryUnitsCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  carryingunitids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarryUnitsCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 carryingUnitIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_carryingunitids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_carryingunitids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarryUnitsCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarryUnitsCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 carryingUnitIDs = 1;
  {
    int byte_size = _carryingunitids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_carryingunitids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarryUnitsCapability)
  return target;
}

size_t CarryUnitsCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarryUnitsCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 carryingUnitIDs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->carryingunitids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _carryingunitids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarryUnitsCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CarryUnitsCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const CarryUnitsCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarryUnitsCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CarryUnitsCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CarryUnitsCapability)
    MergeFrom(*source);
  }
}

void CarryUnitsCapability::MergeFrom(const CarryUnitsCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarryUnitsCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  carryingunitids_.MergeFrom(from.carryingunitids_);
}

void CarryUnitsCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CarryUnitsCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarryUnitsCapability::CopyFrom(const CarryUnitsCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarryUnitsCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarryUnitsCapability::IsInitialized() const {
  return true;
}

void CarryUnitsCapability::InternalSwap(CarryUnitsCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  carryingunitids_.InternalSwap(&other->carryingunitids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarryUnitsCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Capability::InitAsDefaultInstance() {
  ::_Capability_default_instance_.foundcity_ = const_cast< ::FoundCityCapability*>(
      ::FoundCityCapability::internal_default_instance());
  ::_Capability_default_instance_.worker_ = const_cast< ::WorkerCapability*>(
      ::WorkerCapability::internal_default_instance());
  ::_Capability_default_instance_.carryunits_ = const_cast< ::CarryUnitsCapability*>(
      ::CarryUnitsCapability::internal_default_instance());
}
class Capability::_Internal {
 public:
  static const ::FoundCityCapability& foundcity(const Capability* msg);
  static const ::WorkerCapability& worker(const Capability* msg);
  static const ::CarryUnitsCapability& carryunits(const Capability* msg);
};

const ::FoundCityCapability&
Capability::_Internal::foundcity(const Capability* msg) {
  return *msg->cap_.foundcity_;
}
const ::WorkerCapability&
Capability::_Internal::worker(const Capability* msg) {
  return *msg->cap_.worker_;
}
const ::CarryUnitsCapability&
Capability::_Internal::carryunits(const Capability* msg) {
  return *msg->cap_.carryunits_;
}
void Capability::set_allocated_foundcity(::FoundCityCapability* foundcity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_cap();
  if (foundcity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foundcity);
    if (message_arena != submessage_arena) {
      foundcity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foundcity, submessage_arena);
    }
    set_has_foundcity();
    cap_.foundcity_ = foundcity;
  }
  // @@protoc_insertion_point(field_set_allocated:Capability.foundCity)
}
void Capability::set_allocated_worker(::WorkerCapability* worker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_cap();
  if (worker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(worker);
    if (message_arena != submessage_arena) {
      worker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worker, submessage_arena);
    }
    set_has_worker();
    cap_.worker_ = worker;
  }
  // @@protoc_insertion_point(field_set_allocated:Capability.worker)
}
void Capability::set_allocated_carryunits(::CarryUnitsCapability* carryunits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_cap();
  if (carryunits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(carryunits);
    if (message_arena != submessage_arena) {
      carryunits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carryunits, submessage_arena);
    }
    set_has_carryunits();
    cap_.carryunits_ = carryunits;
  }
  // @@protoc_insertion_point(field_set_allocated:Capability.carryUnits)
}
Capability::Capability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Capability)
}
Capability::Capability(const Capability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_cap();
  switch (from.cap_case()) {
    case kFoundCity: {
      _internal_mutable_foundcity()->::FoundCityCapability::MergeFrom(from._internal_foundcity());
      break;
    }
    case kWorker: {
      _internal_mutable_worker()->::WorkerCapability::MergeFrom(from._internal_worker());
      break;
    }
    case kCarryUnits: {
      _internal_mutable_carryunits()->::CarryUnitsCapability::MergeFrom(from._internal_carryunits());
      break;
    }
    case CAP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Capability)
}

void Capability::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Capability_riposte_2eproto.base);
  clear_has_cap();
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:Capability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Capability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_cap()) {
    clear_cap();
  }
}

void Capability::ArenaDtor(void* object) {
  Capability* _this = reinterpret_cast< Capability* >(object);
  (void)_this;
}
void Capability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capability& Capability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capability_riposte_2eproto.base);
  return *internal_default_instance();
}


void Capability::clear_cap() {
// @@protoc_insertion_point(one_of_clear_start:Capability)
  switch (cap_case()) {
    case kFoundCity: {
      if (GetArena() == nullptr) {
        delete cap_.foundcity_;
      }
      break;
    }
    case kWorker: {
      if (GetArena() == nullptr) {
        delete cap_.worker_;
      }
      break;
    }
    case kCarryUnits: {
      if (GetArena() == nullptr) {
        delete cap_.carryunits_;
      }
      break;
    }
    case CAP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CAP_NOT_SET;
}


void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_cap();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .FoundCityCapability foundCity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_foundcity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WorkerCapability worker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CarryUnitsCapability carryUnits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_carryunits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FoundCityCapability foundCity = 1;
  if (_internal_has_foundcity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::foundcity(this), target, stream);
  }

  // .WorkerCapability worker = 2;
  if (_internal_has_worker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::worker(this), target, stream);
  }

  // .CarryUnitsCapability carryUnits = 3;
  if (_internal_has_carryunits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::carryunits(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Capability)
  return target;
}

size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Capability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (cap_case()) {
    // .FoundCityCapability foundCity = 1;
    case kFoundCity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cap_.foundcity_);
      break;
    }
    // .WorkerCapability worker = 2;
    case kWorker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cap_.worker_);
      break;
    }
    // .CarryUnitsCapability carryUnits = 3;
    case kCarryUnits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cap_.carryunits_);
      break;
    }
    case CAP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Capability)
  GOOGLE_DCHECK_NE(&from, this);
  const Capability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Capability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Capability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Capability)
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Capability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.cap_case()) {
    case kFoundCity: {
      _internal_mutable_foundcity()->::FoundCityCapability::MergeFrom(from._internal_foundcity());
      break;
    }
    case kWorker: {
      _internal_mutable_worker()->::WorkerCapability::MergeFrom(from._internal_worker());
      break;
    }
    case kCarryUnits: {
      _internal_mutable_carryunits()->::CarryUnitsCapability::MergeFrom(from._internal_carryunits());
      break;
    }
    case CAP_NOT_SET: {
      break;
    }
  }
}

void Capability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  return true;
}

void Capability::InternalSwap(Capability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(cap_, other->cap_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateUnit::InitAsDefaultInstance() {
  ::_UpdateUnit_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Pos*>(
      ::Pos::internal_default_instance());
  ::_UpdateUnit_default_instance_._instance.get_mutable()->followingpath_ = const_cast< ::Path*>(
      ::Path::internal_default_instance());
}
class UpdateUnit::_Internal {
 public:
  static const ::Pos& pos(const UpdateUnit* msg);
  static const ::Path& followingpath(const UpdateUnit* msg);
};

const ::Pos&
UpdateUnit::_Internal::pos(const UpdateUnit* msg) {
  return *msg->pos_;
}
const ::Path&
UpdateUnit::_Internal::followingpath(const UpdateUnit* msg) {
  return *msg->followingpath_;
}
UpdateUnit::UpdateUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capabilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateUnit)
}
UpdateUnit::UpdateUnit(const UpdateUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kindid().empty()) {
    kindid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kindid(),
      GetArena());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::Pos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_followingpath()) {
    followingpath_ = new ::Path(*from.followingpath_);
  } else {
    followingpath_ = nullptr;
  }
  ::memcpy(&health_, &from.health_,
    static_cast<size_t>(reinterpret_cast<char*>(&ownerid_) -
    reinterpret_cast<char*>(&health_)) + sizeof(ownerid_));
  // @@protoc_insertion_point(copy_constructor:UpdateUnit)
}

void UpdateUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateUnit_riposte_2eproto.base);
  kindid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ownerid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(ownerid_));
}

UpdateUnit::~UpdateUnit() {
  // @@protoc_insertion_point(destructor:UpdateUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  kindid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete followingpath_;
}

void UpdateUnit::ArenaDtor(void* object) {
  UpdateUnit* _this = reinterpret_cast< UpdateUnit* >(object);
  (void)_this;
}
void UpdateUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateUnit& UpdateUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateUnit_riposte_2eproto.base);
  return *internal_default_instance();
}


void UpdateUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  kindid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArena() == nullptr && followingpath_ != nullptr) {
    delete followingpath_;
  }
  followingpath_ = nullptr;
  ::memset(&health_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ownerid_) -
      reinterpret_cast<char*>(&health_)) + sizeof(ownerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Pos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kindID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_kindid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateUnit.kindID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ownerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          health_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double movementLeft = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          movementleft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Path followingPath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_followingpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Capability capabilities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pos pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // string kindID = 2;
  if (this->kindid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kindid().data(), static_cast<int>(this->_internal_kindid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateUnit.kindID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kindid(), target);
  }

  // int32 ownerID = 3;
  if (this->ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ownerid(), target);
  }

  // double health = 4;
  if (!(this->health() <= 0 && this->health() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_health(), target);
  }

  // double movementLeft = 5;
  if (!(this->movementleft() <= 0 && this->movementleft() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_movementleft(), target);
  }

  // .Path followingPath = 6;
  if (this->has_followingpath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::followingpath(this), target, stream);
  }

  // repeated .Capability capabilities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_capabilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateUnit)
  return target;
}

size_t UpdateUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Capability capabilities = 7;
  total_size += 1UL * this->_internal_capabilities_size();
  for (const auto& msg : this->capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string kindID = 2;
  if (this->kindid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kindid());
  }

  // .Pos pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .Path followingPath = 6;
  if (this->has_followingpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *followingpath_);
  }

  // double health = 4;
  if (!(this->health() <= 0 && this->health() >= 0)) {
    total_size += 1 + 8;
  }

  // double movementLeft = 5;
  if (!(this->movementleft() <= 0 && this->movementleft() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 ownerID = 3;
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ownerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateUnit)
    MergeFrom(*source);
  }
}

void UpdateUnit::MergeFrom(const UpdateUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
  if (from.kindid().size() > 0) {
    _internal_set_kindid(from._internal_kindid());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::Pos::MergeFrom(from._internal_pos());
  }
  if (from.has_followingpath()) {
    _internal_mutable_followingpath()->::Path::MergeFrom(from._internal_followingpath());
  }
  if (!(from.health() <= 0 && from.health() >= 0)) {
    _internal_set_health(from._internal_health());
  }
  if (!(from.movementleft() <= 0 && from.movementleft() >= 0)) {
    _internal_set_movementleft(from._internal_movementleft());
  }
  if (from.ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
}

void UpdateUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUnit::CopyFrom(const UpdateUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUnit::IsInitialized() const {
  return true;
}

void UpdateUnit::InternalSwap(UpdateUnit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capabilities_.InternalSwap(&other->capabilities_);
  kindid_.Swap(&other->kindid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateUnit, ownerid_)
      + sizeof(UpdateUnit::ownerid_)
      - PROTOBUF_FIELD_OFFSET(UpdateUnit, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResearchingTech::InitAsDefaultInstance() {
}
class ResearchingTech::_Internal {
 public:
};

ResearchingTech::ResearchingTech(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ResearchingTech)
}
ResearchingTech::ResearchingTech(const ResearchingTech& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  techid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_techid().empty()) {
    techid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_techid(),
      GetArena());
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:ResearchingTech)
}

void ResearchingTech::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResearchingTech_riposte_2eproto.base);
  techid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
}

ResearchingTech::~ResearchingTech() {
  // @@protoc_insertion_point(destructor:ResearchingTech)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResearchingTech::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  techid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResearchingTech::ArenaDtor(void* object) {
  ResearchingTech* _this = reinterpret_cast< ResearchingTech* >(object);
  (void)_this;
}
void ResearchingTech::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResearchingTech::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResearchingTech& ResearchingTech::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResearchingTech_riposte_2eproto.base);
  return *internal_default_instance();
}


void ResearchingTech::Clear() {
// @@protoc_insertion_point(message_clear_start:ResearchingTech)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  progress_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResearchingTech::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string techID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_techid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ResearchingTech.techID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResearchingTech::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResearchingTech)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string techID = 1;
  if (this->techid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_techid().data(), static_cast<int>(this->_internal_techid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResearchingTech.techID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_techid(), target);
  }

  // int32 progress = 2;
  if (this->progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResearchingTech)
  return target;
}

size_t ResearchingTech::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResearchingTech)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string techID = 1;
  if (this->techid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_techid());
  }

  // int32 progress = 2;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResearchingTech::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResearchingTech)
  GOOGLE_DCHECK_NE(&from, this);
  const ResearchingTech* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResearchingTech>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResearchingTech)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResearchingTech)
    MergeFrom(*source);
  }
}

void ResearchingTech::MergeFrom(const ResearchingTech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResearchingTech)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.techid().size() > 0) {
    _internal_set_techid(from._internal_techid());
  }
  if (from.progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
}

void ResearchingTech::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResearchingTech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResearchingTech::CopyFrom(const ResearchingTech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResearchingTech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResearchingTech::IsInitialized() const {
  return true;
}

void ResearchingTech::InternalSwap(ResearchingTech* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  techid_.Swap(&other->techid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResearchingTech::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlayer::InitAsDefaultInstance() {
  ::_UpdatePlayer_default_instance_._instance.get_mutable()->researchingtech_ = const_cast< ::ResearchingTech*>(
      ::ResearchingTech::internal_default_instance());
}
class UpdatePlayer::_Internal {
 public:
  static const ::ResearchingTech& researchingtech(const UpdatePlayer* msg);
};

const ::ResearchingTech&
UpdatePlayer::_Internal::researchingtech(const UpdatePlayer* msg) {
  return *msg->researchingtech_;
}
UpdatePlayer::UpdatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unlockedtechids_(arena),
  possibleresearches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdatePlayer)
}
UpdatePlayer::UpdatePlayer(const UpdatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unlockedtechids_(from.unlockedtechids_),
      possibleresearches_(from.possibleresearches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  if (from._internal_has_researchingtech()) {
    researchingtech_ = new ::ResearchingTech(*from.researchingtech_);
  } else {
    researchingtech_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&capitalcityid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(capitalcityid_));
  // @@protoc_insertion_point(copy_constructor:UpdatePlayer)
}

void UpdatePlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePlayer_riposte_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&researchingtech_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capitalcityid_) -
      reinterpret_cast<char*>(&researchingtech_)) + sizeof(capitalcityid_));
}

UpdatePlayer::~UpdatePlayer() {
  // @@protoc_insertion_point(destructor:UpdatePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete researchingtech_;
}

void UpdatePlayer::ArenaDtor(void* object) {
  UpdatePlayer* _this = reinterpret_cast< UpdatePlayer* >(object);
  (void)_this;
}
void UpdatePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayer& UpdatePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlayer_riposte_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlockedtechids_.Clear();
  possibleresearches_.Clear();
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && researchingtech_ != nullptr) {
    delete researchingtech_;
  }
  researchingtech_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capitalcityid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(capitalcityid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdatePlayer.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 baseRevenue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          baserevenue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beakerRevenue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          beakerrevenue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goldRevenue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          goldrevenue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expenses = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expenses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 netGold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          netgold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ResearchingTech researchingTech = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_researchingtech(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 capitalCityID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          capitalcityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string unlockedTechIDs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unlockedtechids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdatePlayer.unlockedTechIDs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string possibleResearches = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_possibleresearches();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdatePlayer.possibleResearches"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdatePlayer.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // int32 baseRevenue = 3;
  if (this->baserevenue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_baserevenue(), target);
  }

  // int32 beakerRevenue = 4;
  if (this->beakerrevenue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_beakerrevenue(), target);
  }

  // int32 goldRevenue = 5;
  if (this->goldrevenue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_goldrevenue(), target);
  }

  // int32 expenses = 6;
  if (this->expenses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_expenses(), target);
  }

  // int32 netGold = 7;
  if (this->netgold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_netgold(), target);
  }

  // int32 gold = 8;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_gold(), target);
  }

  // .ResearchingTech researchingTech = 9;
  if (this->has_researchingtech()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::researchingtech(this), target, stream);
  }

  // int32 capitalCityID = 10;
  if (this->capitalcityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_capitalcityid(), target);
  }

  // repeated string unlockedTechIDs = 11;
  for (int i = 0, n = this->_internal_unlockedtechids_size(); i < n; i++) {
    const auto& s = this->_internal_unlockedtechids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdatePlayer.unlockedTechIDs");
    target = stream->WriteString(11, s, target);
  }

  // repeated string possibleResearches = 12;
  for (int i = 0, n = this->_internal_possibleresearches_size(); i < n; i++) {
    const auto& s = this->_internal_possibleresearches(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdatePlayer.possibleResearches");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdatePlayer)
  return target;
}

size_t UpdatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdatePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string unlockedTechIDs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unlockedtechids_.size());
  for (int i = 0, n = unlockedtechids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unlockedtechids_.Get(i));
  }

  // repeated string possibleResearches = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(possibleresearches_.size());
  for (int i = 0, n = possibleresearches_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      possibleresearches_.Get(i));
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .ResearchingTech researchingTech = 9;
  if (this->has_researchingtech()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *researchingtech_);
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 baseRevenue = 3;
  if (this->baserevenue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_baserevenue());
  }

  // int32 beakerRevenue = 4;
  if (this->beakerrevenue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beakerrevenue());
  }

  // int32 goldRevenue = 5;
  if (this->goldrevenue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goldrevenue());
  }

  // int32 expenses = 6;
  if (this->expenses() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expenses());
  }

  // int32 netGold = 7;
  if (this->netgold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_netgold());
  }

  // int32 gold = 8;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  // int32 capitalCityID = 10;
  if (this->capitalcityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capitalcityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdatePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdatePlayer)
    MergeFrom(*source);
  }
}

void UpdatePlayer::MergeFrom(const UpdatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlockedtechids_.MergeFrom(from.unlockedtechids_);
  possibleresearches_.MergeFrom(from.possibleresearches_);
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.has_researchingtech()) {
    _internal_mutable_researchingtech()->::ResearchingTech::MergeFrom(from._internal_researchingtech());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.baserevenue() != 0) {
    _internal_set_baserevenue(from._internal_baserevenue());
  }
  if (from.beakerrevenue() != 0) {
    _internal_set_beakerrevenue(from._internal_beakerrevenue());
  }
  if (from.goldrevenue() != 0) {
    _internal_set_goldrevenue(from._internal_goldrevenue());
  }
  if (from.expenses() != 0) {
    _internal_set_expenses(from._internal_expenses());
  }
  if (from.netgold() != 0) {
    _internal_set_netgold(from._internal_netgold());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.capitalcityid() != 0) {
    _internal_set_capitalcityid(from._internal_capitalcityid());
  }
}

void UpdatePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayer::CopyFrom(const UpdatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayer::IsInitialized() const {
  return true;
}

void UpdatePlayer::InternalSwap(UpdatePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unlockedtechids_.InternalSwap(&other->unlockedtechids_);
  possibleresearches_.InternalSwap(&other->possibleresearches_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayer, capitalcityid_)
      + sizeof(UpdatePlayer::capitalcityid_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayer, researchingtech_)>(
          reinterpret_cast<char*>(&researchingtech_),
          reinterpret_cast<char*>(&other->researchingtech_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathComputed::InitAsDefaultInstance() {
  ::_PathComputed_default_instance_._instance.get_mutable()->path_ = const_cast< ::Path*>(
      ::Path::internal_default_instance());
}
class PathComputed::_Internal {
 public:
  static const ::Path& path(const PathComputed* msg);
};

const ::Path&
PathComputed::_Internal::path(const PathComputed* msg) {
  return *msg->path_;
}
PathComputed::PathComputed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PathComputed)
}
PathComputed::PathComputed(const PathComputed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  pathid_ = from.pathid_;
  // @@protoc_insertion_point(copy_constructor:PathComputed)
}

void PathComputed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathComputed_riposte_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pathid_) -
      reinterpret_cast<char*>(&path_)) + sizeof(pathid_));
}

PathComputed::~PathComputed() {
  // @@protoc_insertion_point(destructor:PathComputed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathComputed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void PathComputed::ArenaDtor(void* object) {
  PathComputed* _this = reinterpret_cast< PathComputed* >(object);
  (void)_this;
}
void PathComputed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathComputed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathComputed& PathComputed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathComputed_riposte_2eproto.base);
  return *internal_default_instance();
}


void PathComputed::Clear() {
// @@protoc_insertion_point(message_clear_start:PathComputed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  pathid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathComputed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pathID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pathid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Path path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathComputed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathComputed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pathID = 1;
  if (this->pathid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pathid(), target);
  }

  // .Path path = 2;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathComputed)
  return target;
}

size_t PathComputed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathComputed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Path path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // int32 pathID = 1;
  if (this->pathid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pathid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathComputed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PathComputed)
  GOOGLE_DCHECK_NE(&from, this);
  const PathComputed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathComputed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PathComputed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PathComputed)
    MergeFrom(*source);
  }
}

void PathComputed::MergeFrom(const PathComputed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathComputed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::Path::MergeFrom(from._internal_path());
  }
  if (from.pathid() != 0) {
    _internal_set_pathid(from._internal_pathid());
  }
}

void PathComputed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PathComputed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathComputed::CopyFrom(const PathComputed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathComputed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathComputed::IsInitialized() const {
  return true;
}

void PathComputed::InternalSwap(PathComputed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathComputed, pathid_)
      + sizeof(PathComputed::pathid_)
      - PROTOBUF_FIELD_OFFSET(PathComputed, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathComputed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveUnit::InitAsDefaultInstance() {
  ::_MoveUnit_default_instance_._instance.get_mutable()->newpos_ = const_cast< ::Pos*>(
      ::Pos::internal_default_instance());
}
class MoveUnit::_Internal {
 public:
  static const ::Pos& newpos(const MoveUnit* msg);
};

const ::Pos&
MoveUnit::_Internal::newpos(const MoveUnit* msg) {
  return *msg->newpos_;
}
MoveUnit::MoveUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MoveUnit)
}
MoveUnit::MoveUnit(const MoveUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_newpos()) {
    newpos_ = new ::Pos(*from.newpos_);
  } else {
    newpos_ = nullptr;
  }
  unitid_ = from.unitid_;
  // @@protoc_insertion_point(copy_constructor:MoveUnit)
}

void MoveUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveUnit_riposte_2eproto.base);
  ::memset(&newpos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unitid_) -
      reinterpret_cast<char*>(&newpos_)) + sizeof(unitid_));
}

MoveUnit::~MoveUnit() {
  // @@protoc_insertion_point(destructor:MoveUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete newpos_;
}

void MoveUnit::ArenaDtor(void* object) {
  MoveUnit* _this = reinterpret_cast< MoveUnit* >(object);
  (void)_this;
}
void MoveUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveUnit& MoveUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveUnit_riposte_2eproto.base);
  return *internal_default_instance();
}


void MoveUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && newpos_ != nullptr) {
    delete newpos_;
  }
  newpos_ = nullptr;
  unitid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unitID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Pos newPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newpos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MoveUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unitID = 1;
  if (this->unitid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unitid(), target);
  }

  // .Pos newPos = 2;
  if (this->has_newpos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newpos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MoveUnit)
  return target;
}

size_t MoveUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MoveUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Pos newPos = 2;
  if (this->has_newpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newpos_);
  }

  // int32 unitID = 1;
  if (this->unitid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unitid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MoveUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MoveUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MoveUnit)
    MergeFrom(*source);
  }
}

void MoveUnit::MergeFrom(const MoveUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MoveUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_newpos()) {
    _internal_mutable_newpos()->::Pos::MergeFrom(from._internal_newpos());
  }
  if (from.unitid() != 0) {
    _internal_set_unitid(from._internal_unitid());
  }
}

void MoveUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MoveUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveUnit::CopyFrom(const MoveUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveUnit::IsInitialized() const {
  return true;
}

void MoveUnit::InternalSwap(MoveUnit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveUnit, unitid_)
      + sizeof(MoveUnit::unitid_)
      - PROTOBUF_FIELD_OFFSET(MoveUnit, newpos_)>(
          reinterpret_cast<char*>(&newpos_),
          reinterpret_cast<char*>(&other->newpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCityBuildTask::InitAsDefaultInstance() {
  ::_SetCityBuildTask_default_instance_._instance.get_mutable()->task_ = const_cast< ::BuildTaskKind*>(
      ::BuildTaskKind::internal_default_instance());
}
class SetCityBuildTask::_Internal {
 public:
  static const ::BuildTaskKind& task(const SetCityBuildTask* msg);
};

const ::BuildTaskKind&
SetCityBuildTask::_Internal::task(const SetCityBuildTask* msg) {
  return *msg->task_;
}
SetCityBuildTask::SetCityBuildTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetCityBuildTask)
}
SetCityBuildTask::SetCityBuildTask(const SetCityBuildTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::BuildTaskKind(*from.task_);
  } else {
    task_ = nullptr;
  }
  cityid_ = from.cityid_;
  // @@protoc_insertion_point(copy_constructor:SetCityBuildTask)
}

void SetCityBuildTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetCityBuildTask_riposte_2eproto.base);
  ::memset(&task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cityid_) -
      reinterpret_cast<char*>(&task_)) + sizeof(cityid_));
}

SetCityBuildTask::~SetCityBuildTask() {
  // @@protoc_insertion_point(destructor:SetCityBuildTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetCityBuildTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_;
}

void SetCityBuildTask::ArenaDtor(void* object) {
  SetCityBuildTask* _this = reinterpret_cast< SetCityBuildTask* >(object);
  (void)_this;
}
void SetCityBuildTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCityBuildTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCityBuildTask& SetCityBuildTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCityBuildTask_riposte_2eproto.base);
  return *internal_default_instance();
}


void SetCityBuildTask::Clear() {
// @@protoc_insertion_point(message_clear_start:SetCityBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  cityid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCityBuildTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildTaskKind task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCityBuildTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetCityBuildTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cityID = 1;
  if (this->cityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cityid(), target);
  }

  // .BuildTaskKind task = 2;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetCityBuildTask)
  return target;
}

size_t SetCityBuildTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetCityBuildTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BuildTaskKind task = 2;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // int32 cityID = 1;
  if (this->cityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCityBuildTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetCityBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCityBuildTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCityBuildTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetCityBuildTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetCityBuildTask)
    MergeFrom(*source);
  }
}

void SetCityBuildTask::MergeFrom(const SetCityBuildTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetCityBuildTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    _internal_mutable_task()->::BuildTaskKind::MergeFrom(from._internal_task());
  }
  if (from.cityid() != 0) {
    _internal_set_cityid(from._internal_cityid());
  }
}

void SetCityBuildTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetCityBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCityBuildTask::CopyFrom(const SetCityBuildTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetCityBuildTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCityBuildTask::IsInitialized() const {
  return true;
}

void SetCityBuildTask::InternalSwap(SetCityBuildTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetCityBuildTask, cityid_)
      + sizeof(SetCityBuildTask::cityid_)
      - PROTOBUF_FIELD_OFFSET(SetCityBuildTask, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCityBuildTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetWorkerTask::InitAsDefaultInstance() {
  ::_SetWorkerTask_default_instance_._instance.get_mutable()->task_ = const_cast< ::WorkerTask*>(
      ::WorkerTask::internal_default_instance());
}
class SetWorkerTask::_Internal {
 public:
  static const ::WorkerTask& task(const SetWorkerTask* msg);
};

const ::WorkerTask&
SetWorkerTask::_Internal::task(const SetWorkerTask* msg) {
  return *msg->task_;
}
SetWorkerTask::SetWorkerTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetWorkerTask)
}
SetWorkerTask::SetWorkerTask(const SetWorkerTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::WorkerTask(*from.task_);
  } else {
    task_ = nullptr;
  }
  workerid_ = from.workerid_;
  // @@protoc_insertion_point(copy_constructor:SetWorkerTask)
}

void SetWorkerTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetWorkerTask_riposte_2eproto.base);
  ::memset(&task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workerid_) -
      reinterpret_cast<char*>(&task_)) + sizeof(workerid_));
}

SetWorkerTask::~SetWorkerTask() {
  // @@protoc_insertion_point(destructor:SetWorkerTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetWorkerTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_;
}

void SetWorkerTask::ArenaDtor(void* object) {
  SetWorkerTask* _this = reinterpret_cast< SetWorkerTask* >(object);
  (void)_this;
}
void SetWorkerTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetWorkerTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetWorkerTask& SetWorkerTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetWorkerTask_riposte_2eproto.base);
  return *internal_default_instance();
}


void SetWorkerTask::Clear() {
// @@protoc_insertion_point(message_clear_start:SetWorkerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  workerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetWorkerTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 workerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          workerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WorkerTask task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetWorkerTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetWorkerTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 workerID = 1;
  if (this->workerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_workerid(), target);
  }

  // .WorkerTask task = 2;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetWorkerTask)
  return target;
}

size_t SetWorkerTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetWorkerTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .WorkerTask task = 2;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // int32 workerID = 1;
  if (this->workerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_workerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetWorkerTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetWorkerTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SetWorkerTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetWorkerTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetWorkerTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetWorkerTask)
    MergeFrom(*source);
  }
}

void SetWorkerTask::MergeFrom(const SetWorkerTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetWorkerTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    _internal_mutable_task()->::WorkerTask::MergeFrom(from._internal_task());
  }
  if (from.workerid() != 0) {
    _internal_set_workerid(from._internal_workerid());
  }
}

void SetWorkerTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetWorkerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetWorkerTask::CopyFrom(const SetWorkerTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetWorkerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWorkerTask::IsInitialized() const {
  return true;
}

void SetWorkerTask::InternalSwap(SetWorkerTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetWorkerTask, workerid_)
      + sizeof(SetWorkerTask::workerid_)
      - PROTOBUF_FIELD_OFFSET(SetWorkerTask, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetWorkerTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComputePath::InitAsDefaultInstance() {
  ::_ComputePath_default_instance_._instance.get_mutable()->from_ = const_cast< ::Pos*>(
      ::Pos::internal_default_instance());
  ::_ComputePath_default_instance_._instance.get_mutable()->to_ = const_cast< ::Pos*>(
      ::Pos::internal_default_instance());
}
class ComputePath::_Internal {
 public:
  static const ::Pos& from(const ComputePath* msg);
  static const ::Pos& to(const ComputePath* msg);
};

const ::Pos&
ComputePath::_Internal::from(const ComputePath* msg) {
  return *msg->from_;
}
const ::Pos&
ComputePath::_Internal::to(const ComputePath* msg) {
  return *msg->to_;
}
ComputePath::ComputePath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ComputePath)
}
ComputePath::ComputePath(const ComputePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from()) {
    from_ = new ::Pos(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::Pos(*from.to_);
  } else {
    to_ = nullptr;
  }
  ::memcpy(&unitid_, &from.unitid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pathid_) -
    reinterpret_cast<char*>(&unitid_)) + sizeof(pathid_));
  // @@protoc_insertion_point(copy_constructor:ComputePath)
}

void ComputePath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComputePath_riposte_2eproto.base);
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pathid_) -
      reinterpret_cast<char*>(&from_)) + sizeof(pathid_));
}

ComputePath::~ComputePath() {
  // @@protoc_insertion_point(destructor:ComputePath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComputePath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void ComputePath::ArenaDtor(void* object) {
  ComputePath* _this = reinterpret_cast< ComputePath* >(object);
  (void)_this;
}
void ComputePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComputePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComputePath& ComputePath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComputePath_riposte_2eproto.base);
  return *internal_default_instance();
}


void ComputePath::Clear() {
// @@protoc_insertion_point(message_clear_start:ComputePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArena() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  ::memset(&unitid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pathid_) -
      reinterpret_cast<char*>(&unitid_)) + sizeof(pathid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unitID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Pos from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Pos to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pathID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pathid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComputePath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComputePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unitID = 1;
  if (this->unitid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unitid(), target);
  }

  // .Pos from = 2;
  if (this->has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // .Pos to = 3;
  if (this->has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::to(this), target, stream);
  }

  // int32 pathID = 4;
  if (this->pathid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pathid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComputePath)
  return target;
}

size_t ComputePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComputePath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Pos from = 2;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .Pos to = 3;
  if (this->has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  // int32 unitID = 1;
  if (this->unitid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unitid());
  }

  // int32 pathID = 4;
  if (this->pathid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pathid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputePath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ComputePath)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputePath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComputePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ComputePath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ComputePath)
    MergeFrom(*source);
  }
}

void ComputePath::MergeFrom(const ComputePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ComputePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from()) {
    _internal_mutable_from()->::Pos::MergeFrom(from._internal_from());
  }
  if (from.has_to()) {
    _internal_mutable_to()->::Pos::MergeFrom(from._internal_to());
  }
  if (from.unitid() != 0) {
    _internal_set_unitid(from._internal_unitid());
  }
  if (from.pathid() != 0) {
    _internal_set_pathid(from._internal_pathid());
  }
}

void ComputePath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ComputePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputePath::CopyFrom(const ComputePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComputePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputePath::IsInitialized() const {
  return true;
}

void ComputePath::InternalSwap(ComputePath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputePath, pathid_)
      + sizeof(ComputePath::pathid_)
      - PROTOBUF_FIELD_OFFSET(ComputePath, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputePath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEconomySettings::InitAsDefaultInstance() {
}
class SetEconomySettings::_Internal {
 public:
};

SetEconomySettings::SetEconomySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetEconomySettings)
}
SetEconomySettings::SetEconomySettings(const SetEconomySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beakerpercent_ = from.beakerpercent_;
  // @@protoc_insertion_point(copy_constructor:SetEconomySettings)
}

void SetEconomySettings::SharedCtor() {
  beakerpercent_ = 0;
}

SetEconomySettings::~SetEconomySettings() {
  // @@protoc_insertion_point(destructor:SetEconomySettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetEconomySettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetEconomySettings::ArenaDtor(void* object) {
  SetEconomySettings* _this = reinterpret_cast< SetEconomySettings* >(object);
  (void)_this;
}
void SetEconomySettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetEconomySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEconomySettings& SetEconomySettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEconomySettings_riposte_2eproto.base);
  return *internal_default_instance();
}


void SetEconomySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:SetEconomySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beakerpercent_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEconomySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 beakerPercent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          beakerpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEconomySettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetEconomySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 beakerPercent = 1;
  if (this->beakerpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_beakerpercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetEconomySettings)
  return target;
}

size_t SetEconomySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetEconomySettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 beakerPercent = 1;
  if (this->beakerpercent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beakerpercent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEconomySettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetEconomySettings)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEconomySettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEconomySettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetEconomySettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetEconomySettings)
    MergeFrom(*source);
  }
}

void SetEconomySettings::MergeFrom(const SetEconomySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetEconomySettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.beakerpercent() != 0) {
    _internal_set_beakerpercent(from._internal_beakerpercent());
  }
}

void SetEconomySettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetEconomySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEconomySettings::CopyFrom(const SetEconomySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetEconomySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEconomySettings::IsInitialized() const {
  return true;
}

void SetEconomySettings::InternalSwap(SetEconomySettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(beakerpercent_, other->beakerpercent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEconomySettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetResearch::InitAsDefaultInstance() {
}
class SetResearch::_Internal {
 public:
};

SetResearch::SetResearch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetResearch)
}
SetResearch::SetResearch(const SetResearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  techid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_techid().empty()) {
    techid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_techid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SetResearch)
}

void SetResearch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetResearch_riposte_2eproto.base);
  techid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetResearch::~SetResearch() {
  // @@protoc_insertion_point(destructor:SetResearch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetResearch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  techid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetResearch::ArenaDtor(void* object) {
  SetResearch* _this = reinterpret_cast< SetResearch* >(object);
  (void)_this;
}
void SetResearch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResearch& SetResearch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResearch_riposte_2eproto.base);
  return *internal_default_instance();
}


void SetResearch::Clear() {
// @@protoc_insertion_point(message_clear_start:SetResearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string techID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_techid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SetResearch.techID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetResearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string techID = 1;
  if (this->techid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_techid().data(), static_cast<int>(this->_internal_techid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SetResearch.techID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_techid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetResearch)
  return target;
}

size_t SetResearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetResearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string techID = 1;
  if (this->techid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_techid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResearch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetResearch)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResearch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetResearch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetResearch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetResearch)
    MergeFrom(*source);
  }
}

void SetResearch::MergeFrom(const SetResearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetResearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.techid().size() > 0) {
    _internal_set_techid(from._internal_techid());
  }
}

void SetResearch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetResearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResearch::CopyFrom(const SetResearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetResearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResearch::IsInitialized() const {
  return true;
}

void SetResearch::InternalSwap(SetResearch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  techid_.Swap(&other->techid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResearch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Pos* Arena::CreateMaybeMessage< ::Pos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pos >(arena);
}
template<> PROTOBUF_NOINLINE ::AnyClient* Arena::CreateMaybeMessage< ::AnyClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnyClient >(arena);
}
template<> PROTOBUF_NOINLINE ::AnyServer* Arena::CreateMaybeMessage< ::AnyServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AnyServer >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientInfo* Arena::CreateMaybeMessage< ::ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerInfo* Arena::CreateMaybeMessage< ::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KickPlayer* Arena::CreateMaybeMessage< ::KickPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KickPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::SetLeader* Arena::CreateMaybeMessage< ::SetLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminStartGame* Arena::CreateMaybeMessage< ::AdminStartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdminStartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyError* Arena::CreateMaybeMessage< ::LobbyError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LobbyError >(arena);
}
template<> PROTOBUF_NOINLINE ::StartGame* Arena::CreateMaybeMessage< ::StartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfo* Arena::CreateMaybeMessage< ::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateGlobalData* Arena::CreateMaybeMessage< ::UpdateGlobalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateGlobalData >(arena);
}
template<> PROTOBUF_NOINLINE ::Improvement* Arena::CreateMaybeMessage< ::Improvement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Improvement >(arena);
}
template<> PROTOBUF_NOINLINE ::Yield* Arena::CreateMaybeMessage< ::Yield >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Yield >(arena);
}
template<> PROTOBUF_NOINLINE ::Tile* Arena::CreateMaybeMessage< ::Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateMap* Arena::CreateMaybeMessage< ::UpdateMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateMap >(arena);
}
template<> PROTOBUF_NOINLINE ::UnitBuildTask* Arena::CreateMaybeMessage< ::UnitBuildTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnitBuildTask >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildingBuildTask* Arena::CreateMaybeMessage< ::BuildingBuildTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildingBuildTask >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildTaskKind* Arena::CreateMaybeMessage< ::BuildTaskKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildTaskKind >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildTask* Arena::CreateMaybeMessage< ::BuildTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildTask >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateCity* Arena::CreateMaybeMessage< ::UpdateCity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateCity >(arena);
}
template<> PROTOBUF_NOINLINE ::Path* Arena::CreateMaybeMessage< ::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::FoundCityCapability* Arena::CreateMaybeMessage< ::FoundCityCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FoundCityCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerTaskImprovement* Arena::CreateMaybeMessage< ::WorkerTaskImprovement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerTaskImprovement >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerTaskKind* Arena::CreateMaybeMessage< ::WorkerTaskKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerTaskKind >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerTask* Arena::CreateMaybeMessage< ::WorkerTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerTask >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerCapability* Arena::CreateMaybeMessage< ::WorkerCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::CarryUnitsCapability* Arena::CreateMaybeMessage< ::CarryUnitsCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarryUnitsCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::Capability* Arena::CreateMaybeMessage< ::Capability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Capability >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateUnit* Arena::CreateMaybeMessage< ::UpdateUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::ResearchingTech* Arena::CreateMaybeMessage< ::ResearchingTech >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResearchingTech >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdatePlayer* Arena::CreateMaybeMessage< ::UpdatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::PathComputed* Arena::CreateMaybeMessage< ::PathComputed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PathComputed >(arena);
}
template<> PROTOBUF_NOINLINE ::MoveUnit* Arena::CreateMaybeMessage< ::MoveUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MoveUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::SetCityBuildTask* Arena::CreateMaybeMessage< ::SetCityBuildTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetCityBuildTask >(arena);
}
template<> PROTOBUF_NOINLINE ::SetWorkerTask* Arena::CreateMaybeMessage< ::SetWorkerTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetWorkerTask >(arena);
}
template<> PROTOBUF_NOINLINE ::ComputePath* Arena::CreateMaybeMessage< ::ComputePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComputePath >(arena);
}
template<> PROTOBUF_NOINLINE ::SetEconomySettings* Arena::CreateMaybeMessage< ::SetEconomySettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetEconomySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::SetResearch* Arena::CreateMaybeMessage< ::SetResearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetResearch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
