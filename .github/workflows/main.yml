name: Build

on:
  push:
    tags:
      - '*'

jobs:
  build:
    strategy:
      matrix: 
        os: [
            #ubuntu-18.04,
            macos-10.15
        ]
        include:
          #- os: ubuntu-18.04
          #  os-name: linux
          #  dylib-ext: so
          - os: macos-10.15
            os-name: macOS
            dylib-ext: dylib
        
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
           
        # Caching

        # Work around https://github.com/actions/cache/issues/403 by using GNU tar
        # instead of BSD tar.
      - name: Install GNU tar
        if: matrix.os-name == 'macOS'
        run: |
          brew install gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
          
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
            
      - name: Cache build
        uses: actions/cache@v2
        with:
          path: cmake-build-release
          key: ${{ runner.os }}-cmake-build-v4
        
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-18.04'
        run: sudo apt install libasound2-dev -y
        
      - name: Install makers
        run: cargo install cargo-make --debug

      - name: Build & Bundle
        run: makers bundle
        
      - name: Upload temporary artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os-name }}
          path: target/release/riposte.tar.zst
          
  publish:
    runs-on: ubuntu-18.04
    name: Publish artifacts to GitHub Releases
    needs: [build]
    steps:      
      - name: Get tag name
        id: get_tag
        run: echo ::set-output name=TAG::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          release_name: Release ${{ steps.get_tag.outputs.TAG }}
          
     # - name: Download Linux build
     #   uses: actions/download-artifact@v1
     #   with:
     #     name: linux

      - name: Download macOS build
        uses: actions/download-artifact@v1
        with:
          name: macOS
        
      #- name: Upload Linux package
       # uses: actions/upload-release-asset@v1
       # env:
       #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       # with:
       #   upload_url: ${{ steps.create_release.outputs.upload_url }}
       #   asset_path: linux/riposte.tar.zst
       #   asset_name: riposte-linux.tar.zst
       #   asset_content_type: application/zstd
          
      - name: Upload macOS package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macOS/riposte.tar.zst
          asset_name: riposte-macOS.tar.zst
          asset_content_type: application/zstd
