name: Build

on: [push]
  #push:
    #tags:
      #- '*'

jobs:
  build:
    strategy:
      matrix: 
        os: [ubuntu-18.04, macos-latest]
        
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Conan (Linux)
        if: matrix.os == 'ubuntu-18.04'
        run: |
           pwd
           pip3 install wheel setuptools
           pip3 install conan
           export PATH=$PATH:/home/runner/.local/bin
           echo $PATH
           sudo ln -s ~/.local/bin/conan /usr/local/bin/conan
           conan --version
           ls
           
      - name: Install Conan (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install conan
           
        # Caching

        # Work around https://github.com/actions/cache/issues/403 by using GNU tar
        # instead of BSD tar.
      - name: Install GNU tar
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
          
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
            
      - name: Cache build
        uses: actions/cache@v2
        with:
          path: cmake-build-release
          key: ${{ runner.os }}-cmake-build
           
      - name: Cache protobuf library
        id: cache-protobuf
        uses: actions/cache@v2
        if: matrix.os == 'ubuntu-18.04'
        with:
          path: protobuf
          key: ${{ runner.os }}-protobuf
          
      - name: Cache LuaJIT library
        id: cache-luajit
        uses: actions/cache@v2
        with:
          path: LuaJIT
          key: ${{ runner.os }}-luajit
          
      - name: Build protobuf library (Linux)
        if: steps.cache-protobuf.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-18.04'
        run: |
           git clone https://github.com/protocolbuffers/protobuf.git
           cd protobuf
           git submodule update --init --recursive
           ./autogen.sh
           ./autogen.sh
           ./configure
           make -j2
           
      - name: Install protobuf library (Linux)
        if: matrix.os == 'ubuntu-18.04'
        run: |
           cd protobuf
           sudo make install
           sudo ldconfig
           
      - name: Install protobuf library (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install protobuf
        
      - name: Build LuaJIT
        if: steps.cache-luajit.outputs.cache-hit != 'true'
        run: |
            git clone https://github.com/LuaJIT/LuaJIT
            cd LuaJIT
            make -j2
            cd ..
            
      - name: Install LuaJIT
        run: cd LuaJIT && sudo make install
        
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-18.04'
        run: sudo apt install libgl-dev libglu1-mesa-dev libasound2-dev -y
           
      - name: Prepare build
        run: |
            mkdir -p cmake-build-release
            cd cmake-build-release
            conan install ..
            cmake .. -DCMAKE_BUILD_TYPE=Release
            cd ..

      - name: Build
        run: cd cmake-build-release && cmake --build . --target riposte -j2
        
      - name: Build riposte-bundler
        run: |
            cd bundler
            cargo build --release
            cd ..
            
      - name: Bundle
        run: bundler/target/release/riposte-bundler
        
      - name: Get tag name
        id: get_tag
        run: echo ::set-output name=TAG::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          release_name: Release ${{ steps.get_tag.outputs.TAG }}
        
      - name: Upload Linux package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cmake-build-release/riposte.tar.zst
          asset_name: riposte-linux.tar.zst
          asset_content_type: application/zstd
